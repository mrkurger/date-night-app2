oivindlund@Mac date-night-app % npm run test:server

> date-night-app@1.0.0 test:server
> jest --selectProjects server-unit server-integration

● Validation Warning:

  Unknown option "testTimeout" with value 30000 was found.
  This is probably a typing mistake. Fixing it will remove this message.

  Configuration Documentation:
  https://jestjs.io/docs/configuration

● Validation Warning:

  Unknown option "testTimeout" with value 60000 was found.
  This is probably a typing mistake. Fixing it will remove this message.

  Configuration Documentation:
  https://jestjs.io/docs/configuration

Running 2 projects:
- server-integration
- server-unit
 FAIL   server-unit  server/tests/performance/api.performance.test.js
  ● Test suite failed to run

    Cannot find module '../../setup' from 'server/tests/performance/api.performance.test.js'

      12 |
      13 | const request = require('supertest');
    > 14 | const { setupTestDB, teardownTestDB, clearDatabase } = require('../../setup');
         |                                                        ^
      15 | const { createTestUser, generateTestToken, TEST_USER_DATA } = require('../../helpers');
      16 |
      17 | // Performance thresholds in milliseconds

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (server/tests/performance/api.performance.test.js:14:56)

  console.error
    TypeError: app.use is not a function
        at use (/Users/oivindlund/date-night-app/server/middleware/csp.middleware.js:38:7)
        at Layer.handle [as handle_request] (/Users/oivindlund/date-night-app/node_modules/express/lib/router/layer.js:95:5)
        at trim_prefix (/Users/oivindlund/date-night-app/node_modules/express/lib/router/index.js:328:13)
        at /Users/oivindlund/date-night-app/node_modules/express/lib/router/index.js:286:9
        at Function.process_params (/Users/oivindlund/date-night-app/node_modules/express/lib/router/index.js:346:12)
        at next (/Users/oivindlund/date-night-app/node_modules/express/lib/router/index.js:280:10)
        at jsonParser (/Users/oivindlund/date-night-app/node_modules/body-parser/lib/types/json.js:113:7)
        at Layer.handle [as handle_request] (/Users/oivindlund/date-night-app/node_modules/express/lib/router/layer.js:95:5)
        at trim_prefix (/Users/oivindlund/date-night-app/node_modules/express/lib/router/index.js:328:13)
        at /Users/oivindlund/date-night-app/node_modules/express/lib/router/index.js:286:9
        at Function.process_params (/Users/oivindlund/date-night-app/node_modules/express/lib/router/index.js:346:12)
        at next (/Users/oivindlund/date-night-app/node_modules/express/lib/router/index.js:280:10)
        at expressInit (/Users/oivindlund/date-night-app/node_modules/express/lib/middleware/init.js:40:5)
        at Layer.handle [as handle_request] (/Users/oivindlund/date-night-app/node_modules/express/lib/router/layer.js:95:5)
        at trim_prefix (/Users/oivindlund/date-night-app/node_modules/express/lib/router/index.js:328:13)
        at /Users/oivindlund/date-night-app/node_modules/express/lib/router/index.js:286:9
        at Function.process_params (/Users/oivindlund/date-night-app/node_modules/express/lib/router/index.js:346:12)
        at next (/Users/oivindlund/date-night-app/node_modules/express/lib/router/index.js:280:10)
        at query (/Users/oivindlund/date-night-app/node_modules/express/lib/middleware/query.js:45:5)
        at Layer.handle [as handle_request] (/Users/oivindlund/date-night-app/node_modules/express/lib/router/layer.js:95:5)
        at trim_prefix (/Users/oivindlund/date-night-app/node_modules/express/lib/router/index.js:328:13)
        at /Users/oivindlund/date-night-app/node_modules/express/lib/router/index.js:286:9
        at Function.process_params (/Users/oivindlund/date-night-app/node_modules/express/lib/router/index.js:346:12)
        at next (/Users/oivindlund/date-night-app/node_modules/express/lib/router/index.js:280:10)
        at Function.handle (/Users/oivindlund/date-night-app/node_modules/express/lib/router/index.js:175:3)
        at Function.handle (/Users/oivindlund/date-night-app/node_modules/express/lib/application.js:181:10)
        at Server.app (/Users/oivindlund/date-night-app/node_modules/express/lib/express.js:39:9)
        at Server.emit (node:events:518:28)
        at parserOnIncoming (node:_http_server:1153:12)
        at HTTPParser.parserOnHeadersComplete (node:_http_common:117:17)

      at Function.logerror (node_modules/express/lib/application.js:647:43)

 FAIL   server-unit  server/tests/unit/middleware/security.test.js
  Security Middleware
    Security Headers Middleware
      ✕ should set security headers correctly (13 ms)
    CSP Middleware
      ✕ should set Content-Security-Policy header in development mode (3 ms)
      ✕ should set Content-Security-Policy header in production mode (19 ms)

  ● Security Middleware › Security Headers Middleware › should set security headers correctly

    expect(received).toHaveProperty(path, value)

    Expected path: "x-content-type-options"
    Received path: []

    Expected value: "nosniff"
    Received value: {"connection": "close", "content-length": "27", "content-type": "application/json; charset=utf-8", "date": "Mon, 14 Apr 2025 12:51:16 GMT", "etag": "W/\"1b-ACDXAXt5vcI2VEXp2GQ91ZrMWOs\"", "x-powered-by": "Express"}

      35 |       
      36 |       expect(res.statusCode).toBe(200);
    > 37 |       expect(res.headers).toHaveProperty('x-content-type-options', 'nosniff');
         |                           ^
      38 |       expect(res.headers).toHaveProperty('x-frame-options', 'DENY');
      39 |       expect(res.headers).toHaveProperty('x-xss-protection', '1; mode=block');
      40 |       expect(res.headers).toHaveProperty('strict-transport-security');

      at Object.toHaveProperty (server/tests/unit/middleware/security.test.js:37:27)

  ● Security Middleware › CSP Middleware › should set Content-Security-Policy header in development mode

    expect(received).toHaveProperty(path)

    Expected path: "content-security-policy-report-only"
    Received path: []

    Received value: {"connection": "close", "content-length": "27", "content-type": "application/json; charset=utf-8", "date": "Mon, 14 Apr 2025 12:51:16 GMT", "etag": "W/\"1b-ACDXAXt5vcI2VEXp2GQ91ZrMWOs\"", "x-powered-by": "Express"}

      59 |       
      60 |       expect(res.statusCode).toBe(200);
    > 61 |       expect(res.headers).toHaveProperty('content-security-policy-report-only');
         |                           ^
      62 |       
      63 |       const cspHeader = res.headers['content-security-policy-report-only'];
      64 |       

      at Object.toHaveProperty (server/tests/unit/middleware/security.test.js:61:27)

  ● Security Middleware › CSP Middleware › should set Content-Security-Policy header in production mode

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      85 |       const res = await request(prodApp).get('/test');
      86 |       
    > 87 |       expect(res.statusCode).toBe(200);
         |                              ^
      88 |       expect(res.headers).toHaveProperty('content-security-policy');
      89 |       
      90 |       const cspHeader = res.headers['content-security-policy'];

      at Object.toBe (server/tests/unit/middleware/security.test.js:87:30)

 FAIL   server-unit  server/services/auth.service.test.js
  AuthService
    authenticate
      ✕ should generate tokens for valid credentials (2 ms)
      ✓ should throw error for invalid username (2 ms)
      ✕ should throw error for invalid password (10 ms)
    register
      ✕ should register a new user successfully (1 ms)
      ✕ should throw error if username already exists (1 ms)
      ✕ should throw error if email already exists
    refreshToken
      ✕ should generate new access token with valid refresh token
      ✕ should throw error with invalid refresh token
      ✕ should throw error if user not found

  ● AuthService › authenticate › should generate tokens for valid credentials

    TypeError: user.save is not a function

       97 |     // Update last active timestamp
       98 |     user.lastActive = new Date();
    >  99 |     await user.save();
          |                ^
      100 |
      101 |     return this.generateTokens(user);
      102 |   }

      at AuthService.save [as authenticate] (server/services/auth.service.js:99:16)
      at Object.<anonymous> (server/services/auth.service.test.js:53:22)

  ● AuthService › authenticate › should throw error for invalid password

    expect(received).rejects.toThrow(expected)

    Expected substring: "Invalid credentials"
    Received message:   "Invalid password"

          92 |
          93 |     if (!validPassword) {
        > 94 |       throw new Error('Invalid password');
             |             ^
          95 |     }
          96 |
          97 |     // Update last active timestamp

          at AuthService.authenticate (server/services/auth.service.js:94:13)
          at Object.<anonymous> (server/services/auth.service.test.js:82:7)

      81 |       // Call and verify
      82 |       await expect(AuthService.authenticate('testuser', 'wrongpassword'))
    > 83 |         .rejects.toThrow('Invalid credentials');
         |                  ^
      84 |       
      85 |       expect(User.findOne).toHaveBeenCalledWith({ username: 'testuser' });
      86 |       expect(bcrypt.compare).toHaveBeenCalledWith('wrongpassword', mockUser.password);

      at Object.toThrow (node_modules/expect/build/index.js:218:22)
      at Object.toThrow (server/services/auth.service.test.js:83:18)

  ● AuthService › register › should register a new user successfully

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 2
    Received number of calls: 1

      127 |
      128 |       // Verify results
    > 129 |       expect(User.findOne).toHaveBeenCalledTimes(2); // Check for existing username and email
          |                            ^
      130 |       expect(bcrypt.hash).toHaveBeenCalledWith(registerData.password, expect.any(Number));
      131 |       expect(mockNewUser.save).toHaveBeenCalled();
      132 |       expect(jwt.sign).toHaveBeenCalledTimes(2);

      at Object.toHaveBeenCalledTimes (server/services/auth.service.test.js:129:28)

  ● AuthService › register › should throw error if username already exists

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {"expiresIn": 900, "refreshToken": "mock-refresh-token", "token": "mock-refresh-token", "user": {"_id": "new-user-123", "email": "new@example.com", "firstName": "New", "lastName": "User", "username": "newuser"}}

      146 |
      147 |       // Call and verify
    > 148 |       await expect(AuthService.register(registerData))
          |             ^
      149 |         .rejects.toThrow('Username already exists');
      150 |       
      151 |       expect(User.findOne).toHaveBeenCalledWith({ username: registerData.username });

      at expect (node_modules/expect/build/index.js:113:15)
      at Object.expect (server/services/auth.service.test.js:148:13)

  ● AuthService › register › should throw error if email already exists

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {"expiresIn": 900, "refreshToken": "mock-refresh-token", "token": "mock-refresh-token", "user": {"_id": "new-user-123", "email": "new@example.com", "firstName": "New", "lastName": "User", "username": "newuser"}}

      162 |
      163 |       // Call and verify
    > 164 |       await expect(AuthService.register(registerData))
          |             ^
      165 |         .rejects.toThrow('Email already exists');
      166 |       
      167 |       expect(User.findOne).toHaveBeenCalledWith({ username: registerData.username });

      at expect (node_modules/expect/build/index.js:113:15)
      at Object.expect (server/services/auth.service.test.js:164:13)

  ● AuthService › refreshToken › should generate new access token with valid refresh token

    TypeError: AuthService.refreshToken is not a function

      179 |
      180 |       // Call the service
    > 181 |       const result = await AuthService.refreshToken('valid-refresh-token');
          |                                        ^
      182 |
      183 |       // Verify results
      184 |       expect(jwt.verify).toHaveBeenCalledWith('valid-refresh-token', expect.any(String));

      at Object.refreshToken (server/services/auth.service.test.js:181:40)

  ● AuthService › refreshToken › should throw error with invalid refresh token

    TypeError: AuthService.refreshToken is not a function

      196 |
      197 |       // Call and verify
    > 198 |       await expect(AuthService.refreshToken('invalid-token'))
          |                                ^
      199 |         .rejects.toThrow('Invalid token');
      200 |       
      201 |       expect(jwt.verify).toHaveBeenCalledWith('invalid-token', expect.any(String));

      at Object.refreshToken (server/services/auth.service.test.js:198:32)

  ● AuthService › refreshToken › should throw error if user not found

    TypeError: AuthService.refreshToken is not a function

      210 |
      211 |       // Call and verify
    > 212 |       await expect(AuthService.refreshToken('valid-token-wrong-user'))
          |                                ^
      213 |         .rejects.toThrow('User not found');
      214 |       
      215 |       expect(jwt.verify).toHaveBeenCalledWith('valid-token-wrong-user', expect.any(String));

      at Object.refreshToken (server/services/auth.service.test.js:212:32)

(node:29446) [MONGOOSE] Warning: Duplicate schema index on {"token":1} found. This is often due to declaring an index using both "index: true" and "schema.index()". Please remove the duplicate index definition.
(Use `node --trace-warnings ...` to show where the warning was created)
(node:29446) [MONGOOSE] Warning: Duplicate schema index on {"user":1} found. This is often due to declaring an index using both "index: true" and "schema.index()". Please remove the duplicate index definition.
(node:29450) [MONGOOSE] Warning: Duplicate schema index on {"token":1} found. This is often due to declaring an index using both "index: true" and "schema.index()". Please remove the duplicate index definition.
(Use `node --trace-warnings ...` to show where the warning was created)
(node:29450) [MONGOOSE] Warning: Duplicate schema index on {"user":1} found. This is often due to declaring an index using both "index: true" and "schema.index()". Please remove the duplicate index definition.
 FAIL   server-unit  server/tests/unit/models/user.model.test.js
  User Model
    ✕ should create a new user successfully (139 ms)
    ✓ should require username, email, and password (3 ms)
    ✓ should not allow duplicate usernames (246 ms)
    ✓ should not allow duplicate emails (240 ms)
    ✓ should validate email format (1 ms)

  ● User Model › should create a new user successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: "Test"
    Received: undefined

      37 |     expect(savedUser.username).toBe(TEST_USER_DATA.username);
      38 |     expect(savedUser.email).toBe(TEST_USER_DATA.email);
    > 39 |     expect(savedUser.firstName).toBe(TEST_USER_DATA.firstName);
         |                                 ^
      40 |     expect(savedUser.lastName).toBe(TEST_USER_DATA.lastName);
      41 |   });
      42 |

      at Object.toBe (server/tests/unit/models/user.model.test.js:39:33)

 FAIL   server-unit  server/tests/integration/controllers/auth.controller.test.js
  Auth Controller
    POST /api/v1/auth/register
      ✕ should register a new user successfully (23 ms)
      ✕ should return 400 if required fields are missing (2 ms)
      ✕ should return 409 if username already exists (1 ms)
    POST /api/v1/auth/login
      ✕ should login successfully with correct credentials (1 ms)
      ✕ should return 401 with incorrect password (2 ms)
      ✕ should return 404 with non-existent username (2 ms)

  ● Auth Controller › POST /api/v1/auth/register › should register a new user successfully

    TypeError: asyncHandler is not a function

      21 |  * @access  Public
      22 |  */
    > 23 | router.get('/counties', asyncHandler(async (req, res) => {
         |                         ^
      24 |   const counties = norwayLocations.getAllCounties();
      25 |   res.json(counties);
      26 | }));

      at Object.asyncHandler (server/routes/location.routes.js:23:25)
      at Object.require (server/routes/index.js:57:24)
      at Object.require (server/server.js:26:16)
      at Object.require (server/tests/integration/controllers/auth.controller.test.js:26:26)

  ● Auth Controller › POST /api/v1/auth/register › should return 400 if required fields are missing

    TypeError: asyncHandler is not a function

      21 |  * @access  Public
      22 |  */
    > 23 | router.get('/counties', asyncHandler(async (req, res) => {
         |                         ^
      24 |   const counties = norwayLocations.getAllCounties();
      25 |   res.json(counties);
      26 | }));

      at Object.asyncHandler (server/routes/location.routes.js:23:25)
      at Object.require (server/routes/index.js:57:24)
      at Object.require (server/server.js:26:16)
      at Object.require (server/tests/integration/controllers/auth.controller.test.js:26:26)

  ● Auth Controller › POST /api/v1/auth/register › should return 409 if username already exists

    TypeError: asyncHandler is not a function

      21 |  * @access  Public
      22 |  */
    > 23 | router.get('/counties', asyncHandler(async (req, res) => {
         |                         ^
      24 |   const counties = norwayLocations.getAllCounties();
      25 |   res.json(counties);
      26 | }));

      at Object.asyncHandler (server/routes/location.routes.js:23:25)
      at Object.require (server/routes/index.js:57:24)
      at Object.require (server/server.js:26:16)
      at Object.require (server/tests/integration/controllers/auth.controller.test.js:26:26)

  ● Auth Controller › POST /api/v1/auth/login › should login successfully with correct credentials

    TypeError: asyncHandler is not a function

      21 |  * @access  Public
      22 |  */
    > 23 | router.get('/counties', asyncHandler(async (req, res) => {
         |                         ^
      24 |   const counties = norwayLocations.getAllCounties();
      25 |   res.json(counties);
      26 | }));

      at Object.asyncHandler (server/routes/location.routes.js:23:25)
      at Object.require (server/routes/index.js:57:24)
      at Object.require (server/server.js:26:16)
      at Object.require (server/tests/integration/controllers/auth.controller.test.js:26:26)

  ● Auth Controller › POST /api/v1/auth/login › should return 401 with incorrect password

    TypeError: asyncHandler is not a function

      21 |  * @access  Public
      22 |  */
    > 23 | router.get('/counties', asyncHandler(async (req, res) => {
         |                         ^
      24 |   const counties = norwayLocations.getAllCounties();
      25 |   res.json(counties);
      26 | }));

      at Object.asyncHandler (server/routes/location.routes.js:23:25)
      at Object.require (server/routes/index.js:57:24)
      at Object.require (server/server.js:26:16)
      at Object.require (server/tests/integration/controllers/auth.controller.test.js:26:26)

  ● Auth Controller › POST /api/v1/auth/login › should return 404 with non-existent username

    TypeError: asyncHandler is not a function

      21 |  * @access  Public
      22 |  */
    > 23 | router.get('/counties', asyncHandler(async (req, res) => {
         |                         ^
      24 |   const counties = norwayLocations.getAllCounties();
      25 |   res.json(counties);
      26 | }));

      at Object.asyncHandler (server/routes/location.routes.js:23:25)
      at Object.require (server/routes/index.js:57:24)
      at Object.require (server/server.js:26:16)
      at Object.require (server/tests/integration/controllers/auth.controller.test.js:26:26)

 FAIL   server-integration  server/tests/integration/controllers/auth.controller.test.js
  Auth Controller
    POST /api/v1/auth/register
      ✕ should register a new user successfully (22 ms)
      ✕ should return 400 if required fields are missing (2 ms)
      ✕ should return 409 if username already exists (2 ms)
    POST /api/v1/auth/login
      ✕ should login successfully with correct credentials (1 ms)
      ✕ should return 401 with incorrect password (2 ms)
      ✕ should return 404 with non-existent username (2 ms)

  ● Auth Controller › POST /api/v1/auth/register › should register a new user successfully

    TypeError: asyncHandler is not a function

      21 |  * @access  Public
      22 |  */
    > 23 | router.get('/counties', asyncHandler(async (req, res) => {
         |                         ^
      24 |   const counties = norwayLocations.getAllCounties();
      25 |   res.json(counties);
      26 | }));

      at Object.asyncHandler (server/routes/location.routes.js:23:25)
      at Object.require (server/routes/index.js:57:24)
      at Object.require (server/server.js:26:16)
      at Object.require (server/tests/integration/controllers/auth.controller.test.js:26:26)

  ● Auth Controller › POST /api/v1/auth/register › should return 400 if required fields are missing

    TypeError: asyncHandler is not a function

      21 |  * @access  Public
      22 |  */
    > 23 | router.get('/counties', asyncHandler(async (req, res) => {
         |                         ^
      24 |   const counties = norwayLocations.getAllCounties();
      25 |   res.json(counties);
      26 | }));

      at Object.asyncHandler (server/routes/location.routes.js:23:25)
      at Object.require (server/routes/index.js:57:24)
      at Object.require (server/server.js:26:16)
      at Object.require (server/tests/integration/controllers/auth.controller.test.js:26:26)

  ● Auth Controller › POST /api/v1/auth/register › should return 409 if username already exists

    TypeError: asyncHandler is not a function

      21 |  * @access  Public
      22 |  */
    > 23 | router.get('/counties', asyncHandler(async (req, res) => {
         |                         ^
      24 |   const counties = norwayLocations.getAllCounties();
      25 |   res.json(counties);
      26 | }));

      at Object.asyncHandler (server/routes/location.routes.js:23:25)
      at Object.require (server/routes/index.js:57:24)
      at Object.require (server/server.js:26:16)
      at Object.require (server/tests/integration/controllers/auth.controller.test.js:26:26)

  ● Auth Controller › POST /api/v1/auth/login › should login successfully with correct credentials

    TypeError: asyncHandler is not a function

      21 |  * @access  Public
      22 |  */
    > 23 | router.get('/counties', asyncHandler(async (req, res) => {
         |                         ^
      24 |   const counties = norwayLocations.getAllCounties();
      25 |   res.json(counties);
      26 | }));

      at Object.asyncHandler (server/routes/location.routes.js:23:25)
      at Object.require (server/routes/index.js:57:24)
      at Object.require (server/server.js:26:16)
      at Object.require (server/tests/integration/controllers/auth.controller.test.js:26:26)

  ● Auth Controller › POST /api/v1/auth/login › should return 401 with incorrect password

    TypeError: asyncHandler is not a function

      21 |  * @access  Public
      22 |  */
    > 23 | router.get('/counties', asyncHandler(async (req, res) => {
         |                         ^
      24 |   const counties = norwayLocations.getAllCounties();
      25 |   res.json(counties);
      26 | }));

      at Object.asyncHandler (server/routes/location.routes.js:23:25)
      at Object.require (server/routes/index.js:57:24)
      at Object.require (server/server.js:26:16)
      at Object.require (server/tests/integration/controllers/auth.controller.test.js:26:26)

  ● Auth Controller › POST /api/v1/auth/login › should return 404 with non-existent username

    TypeError: asyncHandler is not a function

      21 |  * @access  Public
      22 |  */
    > 23 | router.get('/counties', asyncHandler(async (req, res) => {
         |                         ^
      24 |   const counties = norwayLocations.getAllCounties();
      25 |   res.json(counties);
      26 | }));

      at Object.asyncHandler (server/routes/location.routes.js:23:25)
      at Object.require (server/routes/index.js:57:24)
      at Object.require (server/server.js:26:16)
      at Object.require (server/tests/integration/controllers/auth.controller.test.js:26:26)

Test Suites: 6 failed, 6 total
Tests:       24 failed, 5 passed, 29 total
Snapshots:   0 total
Time:        1.731 s, estimated 29 s
Ran all test suites in 2 projects.

