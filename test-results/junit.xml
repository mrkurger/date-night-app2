<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="34" failures="0" errors="0" time="1.82">
  <testsuite name="API Performance Tests" errors="0" failures="0" skipped="1" timestamp="2025-04-14T13:43:02" time="0.46" tests="5">
    <testcase classname="API Performance Tests Authentication Performance should login within performance threshold" name="API Performance Tests Authentication Performance should login within performance threshold" time="0.033">
    </testcase>
    <testcase classname="API Performance Tests Authentication Performance should handle sequential login requests efficiently" name="API Performance Tests Authentication Performance should handle sequential login requests efficiently" time="0.019">
    </testcase>
    <testcase classname="API Performance Tests User Profile Performance should fetch user profile within performance threshold" name="API Performance Tests User Profile Performance should fetch user profile within performance threshold" time="0.001">
    </testcase>
    <testcase classname="API Performance Tests Search Performance should perform search within performance threshold" name="API Performance Tests Search Performance should perform search within performance threshold" time="0.002">
    </testcase>
    <testcase classname="API Performance Tests Load Testing should handle concurrent requests efficiently" name="API Performance Tests Load Testing should handle concurrent requests efficiently" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Security Middleware" errors="0" failures="0" skipped="0" timestamp="2025-04-14T13:43:02" time="0.703" tests="3">
    <testcase classname="Security Middleware Security Headers Middleware should set security headers correctly" name="Security Middleware Security Headers Middleware should set security headers correctly" time="0.046">
    </testcase>
    <testcase classname="Security Middleware CSP Middleware should set Content-Security-Policy header in development mode" name="Security Middleware CSP Middleware should set Content-Security-Policy header in development mode" time="0.006">
    </testcase>
    <testcase classname="Security Middleware CSP Middleware should set Content-Security-Policy header in production mode" name="Security Middleware CSP Middleware should set Content-Security-Policy header in production mode" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="AuthService" errors="0" failures="0" skipped="0" timestamp="2025-04-14T13:43:02" time="0.826" tests="9">
    <testcase classname="AuthService authenticate should generate tokens for valid credentials" name="AuthService authenticate should generate tokens for valid credentials" time="0.005">
    </testcase>
    <testcase classname="AuthService authenticate should throw error for invalid username" name="AuthService authenticate should throw error for invalid username" time="0.009">
    </testcase>
    <testcase classname="AuthService authenticate should throw error for invalid password" name="AuthService authenticate should throw error for invalid password" time="0.001">
    </testcase>
    <testcase classname="AuthService register should register a new user successfully" name="AuthService register should register a new user successfully" time="0.006">
    </testcase>
    <testcase classname="AuthService register should throw error if username already exists" name="AuthService register should throw error if username already exists" time="0.001">
    </testcase>
    <testcase classname="AuthService register should throw error if email already exists" name="AuthService register should throw error if email already exists" time="0.001">
    </testcase>
    <testcase classname="AuthService refreshAccessToken should generate new access token with valid refresh token" name="AuthService refreshAccessToken should generate new access token with valid refresh token" time="0">
    </testcase>
    <testcase classname="AuthService refreshAccessToken should throw error with invalid refresh token" name="AuthService refreshAccessToken should throw error with invalid refresh token" time="0.002">
    </testcase>
    <testcase classname="AuthService refreshAccessToken should throw error if user not found" name="AuthService refreshAccessToken should throw error if user not found" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Auth Controller" errors="0" failures="0" skipped="0" timestamp="2025-04-14T13:43:02" time="1.193" tests="6">
    <testcase classname="Auth Controller POST /api/v1/auth/register should register a new user successfully" name="Auth Controller POST /api/v1/auth/register should register a new user successfully" time="0.02">
    </testcase>
    <testcase classname="Auth Controller POST /api/v1/auth/register should return 400 if required fields are missing" name="Auth Controller POST /api/v1/auth/register should return 400 if required fields are missing" time="0.002">
    </testcase>
    <testcase classname="Auth Controller POST /api/v1/auth/register should return 409 if username already exists" name="Auth Controller POST /api/v1/auth/register should return 409 if username already exists" time="0.002">
    </testcase>
    <testcase classname="Auth Controller POST /api/v1/auth/login should login successfully with correct credentials" name="Auth Controller POST /api/v1/auth/login should login successfully with correct credentials" time="0.002">
    </testcase>
    <testcase classname="Auth Controller POST /api/v1/auth/login should return 401 with incorrect password" name="Auth Controller POST /api/v1/auth/login should return 401 with incorrect password" time="0.003">
    </testcase>
    <testcase classname="Auth Controller POST /api/v1/auth/login should return 404 with non-existent username" name="Auth Controller POST /api/v1/auth/login should return 404 with non-existent username" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Auth Controller" errors="0" failures="0" skipped="0" timestamp="2025-04-14T13:43:02" time="1.193" tests="6">
    <testcase classname="Auth Controller POST /api/v1/auth/register should register a new user successfully" name="Auth Controller POST /api/v1/auth/register should register a new user successfully" time="0.02">
    </testcase>
    <testcase classname="Auth Controller POST /api/v1/auth/register should return 400 if required fields are missing" name="Auth Controller POST /api/v1/auth/register should return 400 if required fields are missing" time="0.002">
    </testcase>
    <testcase classname="Auth Controller POST /api/v1/auth/register should return 409 if username already exists" name="Auth Controller POST /api/v1/auth/register should return 409 if username already exists" time="0.002">
    </testcase>
    <testcase classname="Auth Controller POST /api/v1/auth/login should login successfully with correct credentials" name="Auth Controller POST /api/v1/auth/login should login successfully with correct credentials" time="0.003">
    </testcase>
    <testcase classname="Auth Controller POST /api/v1/auth/login should return 401 with incorrect password" name="Auth Controller POST /api/v1/auth/login should return 401 with incorrect password" time="0.002">
    </testcase>
    <testcase classname="Auth Controller POST /api/v1/auth/login should return 404 with non-existent username" name="Auth Controller POST /api/v1/auth/login should return 404 with non-existent username" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="User Model" errors="0" failures="0" skipped="0" timestamp="2025-04-14T13:43:02" time="1.718" tests="5">
    <testcase classname="User Model should create a new user successfully" name="User Model should create a new user successfully" time="0.121">
    </testcase>
    <testcase classname="User Model should require username, email, and password" name="User Model should require username, email, and password" time="0.002">
    </testcase>
    <testcase classname="User Model should not allow duplicate usernames" name="User Model should not allow duplicate usernames" time="0.217">
    </testcase>
    <testcase classname="User Model should not allow duplicate emails" name="User Model should not allow duplicate emails" time="0.21">
    </testcase>
    <testcase classname="User Model should validate email format" name="User Model should validate email format" time="0.001">
    </testcase>
  </testsuite>
</testsuites>