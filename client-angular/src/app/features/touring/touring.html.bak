<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Touring - Date Night App</title>
    <link rel="stylesheet" href="/docs/component-library/styles/style.css" />
    <style>
      .tooltip {
        position: relative;
        display: inline-block;
        border-bottom: 1px dotted #333;
      }
      .tooltip .tooltip-text {
        visibility: hidden;
        width: 300px;
        background-color: #f8f9fa;
        color: #333;
        text-align: left;
        border-radius: 6px;
        padding: 10px;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        margin-left: -150px;
        opacity: 0;
        transition: opacity 0.3s;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
      }
      .tooltip:hover .tooltip-text {
        visibility: visible;
        opacity: 1;
      }
      .function-link {
        color: #0366d6;
        text-decoration: none;
        font-family: monospace;
        background-color: #f6f8fa;
        padding: 2px 4px;
        border-radius: 3px;
      }
      .function-link:hover {
        text-decoration: underline;
      }
      code {
        font-family: monospace;
        background-color: #f6f8fa;
        padding: 2px 4px;
        border-radius: 3px;
      }
      pre {
        background-color: #f6f8fa;
        padding: 16px;
        border-radius: 6px;
        overflow: auto;
      }
    </style>
  </head>
  <body>
    <header>
      <div class="container">
        <h1>Date Night App Documentation</h1>
        <nav>
          <ul>
            <li><a href="/_docs_index.html">Home</a></li>
            <li><a href="/_glossary.html">Glossary</a></li>
            <li><a href="index.html">touring Index</a></li>
          </ul>
        </nav>
      </div>
    </header>
    <main class="container">
      <div class="page-content">
        <aside class="sidebar">
          <h3>Touring</h3>
          <ul>
            <li><a href="./CHANGELOG.html">Changelog</a></li>
            <li><a href="./AILESSONS.html">AI Lessons</a></li>
            <li><a href="./GLOSSARY.html">Glossary</a></li>
            <li><a href="./touring.html">Touring</a></li>
          </ul>
        </aside>

        <article class="content">
          <h1>Touring</h1>

          <section id="overview">
            <h2>Overview</h2>
            <h2>Overview</h2>
            <p>
              The Travel Itinerary feature allows service providers to create and manage travel
              schedules, enabling them to announce when they will be visiting different locations.
              This feature helps service providers expand their reach beyond their home location and
              allows users to discover services that will be available in their area in the future.
            </p>
            <h2>User Experience</h2>
            <p>
              Service providers interact with the Travel Itinerary feature through several
              interfaces:
            </p>
            <ul>
              <li>
                <strong>Itinerary Creation</strong>: Service providers can create travel plans with
                destination, dates, and optional accommodation details
              </li>
              <li>
                <strong>Itinerary Management</strong>: Service providers can view, edit, and cancel
                their travel plans
              </li>
              <li>
                <strong>Itinerary Visibility</strong>: Service providers can control the visibility
                of their travel plans and accommodation details
              </li>
            </ul>
            <p>Users interact with the Travel Itinerary feature through:</p>
            <ul>
              <li>
                <strong>Discover Traveling Providers</strong>: Users can see which service providers
                will be visiting their area
              </li>
              <li>
                <strong>Search by Date</strong>: Users can search for services available in a
                specific location during a particular time period
              </li>
              <li>
                <strong>Notifications</strong>: Users can opt to receive notifications when service
                providers announce travel to their area
              </li>
            </ul>
            <h2>Architecture</h2>
            <h3>Client-Side Components</h3>
            <h4>Components</h4>
            <ol>
              <li>
                <p>
                  <strong>TravelItineraryListComponent</strong>
                  (<code>client-angular/src/app/features/travel/travel-itinerary-list/travel-itinerary-list.component.ts</code>)
                </p>
                <ul>
                  <li>Displays a list of travel itineraries for a service provider</li>
                  <li>Supports filtering by status (upcoming, active, past)</li>
                  <li>Provides actions for managing itineraries</li>
                </ul>
              </li>
              <li>
                <p>
                  <strong>TravelItineraryFormComponent</strong>
                  (<code>client-angular/src/app/features/travel/travel-itinerary-form/travel-itinerary-form.component.ts</code>)
                </p>
                <ul>
                  <li>Form for creating and editing travel itineraries</li>
                  <li>Includes location selection, date range picker, and accommodation details</li>
                  <li>Implements validation for required fields and date ranges</li>
                </ul>
              </li>
              <li>
                <p>
                  <strong>TravelItineraryDetailComponent</strong>
                  (<code>client-angular/src/app/features/travel/travel-itinerary-detail/travel-itinerary-detail.component.ts</code>)
                </p>
                <ul>
                  <li>Displays detailed information about a specific travel itinerary</li>
                  <li>Shows map with destination location</li>
                  <li>Provides actions for editing and canceling the itinerary</li>
                </ul>
              </li>
              <li>
                <p>
                  <strong>TravelMapComponent</strong>
                  (<code>client-angular/src/app/features/travel/travel-map/travel-map.component.ts</code>)
                </p>
                <ul>
                  <li>Interactive map showing travel destinations</li>
                  <li>Supports clustering for multiple destinations</li>
                  <li>Provides filtering by date range</li>
                </ul>
              </li>
              <li>
                <p>
                  <strong>TravelCalendarComponent</strong>
                  (<code>client-angular/src/app/features/travel/travel-calendar/travel-calendar.component.ts</code>)
                </p>
                <ul>
                  <li>Calendar view of travel itineraries</li>
                  <li>Highlights dates when service providers will be in specific locations</li>
                  <li>Supports filtering by location and service provider</li>
                </ul>
              </li>
            </ol>
            <h4>Services</h4>
            <ol>
              <li>
                <p>
                  <strong>TravelService</strong>
                  (<code>client-angular/src/app/features/travel/services/travel.service.ts</code>)
                </p>
                <ul>
                  <li>Handles API communication for travel itineraries</li>
                  <li>Methods for CRUD operations on travel itineraries</li>
                  <li>Implements caching for frequently accessed data</li>
                </ul>
              </li>
              <li>
                <p>
                  <strong>TravelStateService</strong>
                  (<code>client-angular/src/app/features/travel/services/travel-state.service.ts</code>)
                </p>
                <ul>
                  <li>Manages state for travel itineraries</li>
                  <li>Implements Observable pattern for reactive updates</li>
                  <li>Handles filtering and sorting of itineraries</li>
                </ul>
              </li>
              <li>
                <p>
                  <strong>LocationService</strong>
                  (<code>client-angular/src/app/core/services/location.service.ts</code>)
                </p>
                <ul>
                  <li>Provides location data and geocoding functionality</li>
                  <li>Used for location selection in travel itinerary form</li>
                  <li>Implements autocomplete for location search</li>
                </ul>
              </li>
            </ol>
            <h4>State Management</h4>
            <ol>
              <li>
                <p>
                  <strong>TravelState</strong>
                  (<code>client-angular/src/app/features/travel/store/travel.state.ts</code>)
                </p>
                <ul>
                  <li>NgRx state for travel itineraries</li>
                  <li>Stores list of itineraries, loading status, and error messages</li>
                  <li>Implements selectors for filtered views</li>
                </ul>
              </li>
              <li>
                <p>
                  <strong>TravelActions</strong>
                  (<code>client-angular/src/app/features/travel/store/travel.actions.ts</code>)
                </p>
                <ul>
                  <li>NgRx actions for travel itineraries</li>
                  <li>
                    Includes actions for loading, creating, updating, and deleting itineraries
                  </li>
                  <li>Implements error handling actions</li>
                </ul>
              </li>
              <li>
                <p>
                  <strong>TravelEffects</strong>
                  (<code>client-angular/src/app/features/travel/store/travel.effects.ts</code>)
                </p>
                <ul>
                  <li>NgRx effects for travel itineraries</li>
                  <li>Handles asynchronous operations with the TravelService</li>
                  <li>Implements optimistic updates for better user experience</li>
                </ul>
              </li>
              <li>
                <p>
                  <strong>TravelReducer</strong>
                  (<code>client-angular/src/app/features/travel/store/travel.reducer.ts</code>)
                </p>
                <ul>
                  <li>NgRx reducer for travel itineraries</li>
                  <li>Updates state based on dispatched actions</li>
                  <li>Implements error handling and loading states</li>
                </ul>
              </li>
            </ol>
            <h3>Server-Side Components</h3>
            <h4>Models</h4>
            <ol>
              <li>
                <p>
                  <strong>TravelItinerary</strong>
                  (<code>server/models/travel-itinerary.model.js</code>)
                </p>
                <pre><code class="language-javascript">const travelItinerarySchema = new mongoose.Schema({
  adId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: &#39;Ad&#39;,
    required: true,
  },
  destination: {
    city: { type: String, required: true },
    county: { type: String, required: true },
    country: { type: String, default: &#39;Norway&#39; },
    location: {
      type: { type: String, enum: [&#39;Point&#39;], default: &#39;Point&#39; },
      coordinates: { type: [Number], required: true },
    },
  },
  arrivalDate: { type: Date, required: true },
  departureDate: { type: Date, required: true },
  accommodation: {
    name: String,
    address: String,
    location: {
      type: { type: String, enum: [&#39;Point&#39;], default: &#39;Point&#39; },
      coordinates: [Number],
    },
    showAccommodation: { type: Boolean, default: false },
  },
  notes: String,
  status: {
    type: String,
    enum: [&#39;planned&#39;, &#39;active&#39;, &#39;completed&#39;, &#39;cancelled&#39;],
    default: &#39;planned&#39;,
  },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
});

// Indexes for efficient querying
travelItinerarySchema.index({ &#39;destination.location&#39;: &#39;2dsphere&#39; });
travelItinerarySchema.index({ arrivalDate: 1, departureDate: 1 });
travelItinerarySchema.index({ adId: 1 });
travelItinerarySchema.index({ &#39;destination.city&#39;: 1 });
travelItinerarySchema.index({ &#39;destination.county&#39;: 1 });
travelItinerarySchema.index({ status: 1 });
</code></pre>
              </li>
            </ol>
            <h4>Controllers</h4>
            <ol>
              <li>
                <strong>TravelController</strong>
                (<code>server/controllers/travel.controller.js</code>)
                <ul>
                  <li>Handles API requests for travel itineraries</li>
                  <li>Implements CRUD operations</li>
                  <li>Includes validation and error handling</li>
                  <li>
                    Methods:
                    <ul>
                      <li><code>createItinerary</code>: Creates a new travel itinerary</li>
                      <li>
                        <code>getItineraries</code>: Retrieves itineraries with filtering options
                      </li>
                      <li><code>getItineraryById</code>: Retrieves a specific itinerary by ID</li>
                      <li><code>updateItinerary</code>: Updates an existing itinerary</li>
                      <li><code>deleteItinerary</code>: Deletes an itinerary</li>
                      <li><code>cancelItinerary</code>: Changes itinerary status to cancelled</li>
                      <li>
                        <code>searchItineraries</code>: Searches for itineraries by location and
                        date range
                      </li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ol>
            <h4>Services</h4>
            <ol>
              <li>
                <strong>TravelService</strong> (<code>server/services/travel.service.js</code>)
                <ul>
                  <li>Implements business logic for travel itineraries</li>
                  <li>Handles complex queries and data transformations</li>
                  <li>
                    Methods:
                    <ul>
                      <li>
                        <code>createItinerary</code>: Creates a new travel itinerary with validation
                      </li>
                      <li>
                        <code>findItineraries</code>: Retrieves itineraries with filtering and
                        pagination
                      </li>
                      <li><code>findItineraryById</code>: Retrieves a specific itinerary by ID</li>
                      <li>
                        <code>updateItinerary</code>: Updates an existing itinerary with validation
                      </li>
                      <li>
                        <code>deleteItinerary</code>: Deletes an itinerary with permission checks
                      </li>
                      <li><code>cancelItinerary</code>: Changes itinerary status to cancelled</li>
                      <li>
                        <code>searchItineraries</code>: Searches for itineraries by location and
                        date range
                      </li>
                      <li>
                        <code>updateItineraryStatus</code>: Automatically updates itinerary status
                        based on dates
                      </li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ol>
            <h4>Routes</h4>
            <ol>
              <li>
                <p><strong>TravelRoutes</strong> (<code>server/routes/travel.routes.js</code>)</p>
                <pre><code class="language-javascript">const express = require(&#39;express&#39;);
const router = express.Router();
const travelController = require(&#39;../controllers/travel.controller&#39;);
const { authenticateToken } = require(&#39;../middleware/authenticateToken&#39;);
const { travelValidator } = require(&#39;../middleware/validators/travel.validator&#39;);

// Get all itineraries for an ad
router.get(&#39;/ads/:adId/itineraries&#39;, travelController.getItineraries);

// Get a specific itinerary
router.get(&#39;/ads/:adId/itineraries/:id&#39;, travelController.getItineraryById);

// Create a new itinerary (requires authentication)
router.post(
  &#39;/ads/:adId/itineraries&#39;,
  authenticateToken,
  travelValidator.create,
  travelController.createItinerary
);

// Update an itinerary (requires authentication)
router.put(
  &#39;/ads/:adId/itineraries/:id&#39;,
  authenticateToken,
  travelValidator.update,
  travelController.updateItinerary
);

// Delete an itinerary (requires authentication)
router.delete(&#39;/ads/:adId/itineraries/:id&#39;, authenticateToken, travelController.deleteItinerary);

// Cancel an itinerary (requires authentication)
router.patch(
  &#39;/ads/:adId/itineraries/:id/cancel&#39;,
  authenticateToken,
  travelController.cancelItinerary
);

// Search for itineraries by location and date
router.get(&#39;/search&#39;, travelController.searchItineraries);

module.exports = router;
</code></pre>
              </li>
            </ol>
            <h2>Data Flow</h2>
            <ol>
              <li>
                <p><strong>Creating a Travel Itinerary</strong>:</p>
                <ul>
                  <li>User fills out the TravelItineraryFormComponent</li>
                  <li>Component validates input and dispatches a createItinerary action</li>
                  <li>
                    TravelEffects intercepts the action and calls TravelService.createItinerary()
                  </li>
                  <li>TravelService sends a POST request to the server API</li>
                  <li>Server validates the request and creates a new itinerary in the database</li>
                  <li>Server returns the created itinerary</li>
                  <li>TravelEffects dispatches a createItinerarySuccess action</li>
                  <li>TravelReducer updates the state with the new itinerary</li>
                  <li>TravelItineraryListComponent reflects the updated state</li>
                </ul>
              </li>
              <li>
                <p><strong>Searching for Travel Itineraries</strong>:</p>
                <ul>
                  <li>User selects location and date range in the search form</li>
                  <li>Component dispatches a searchItineraries action</li>
                  <li>
                    TravelEffects intercepts the action and calls TravelService.searchItineraries()
                  </li>
                  <li>TravelService sends a GET request to the server API with query parameters</li>
                  <li>
                    Server performs a geospatial query to find itineraries in the specified location
                    and date range
                  </li>
                  <li>Server returns the matching itineraries</li>
                  <li>TravelEffects dispatches a searchItinerariesSuccess action</li>
                  <li>TravelReducer updates the state with the search results</li>
                  <li>TravelMapComponent and TravelCalendarComponent reflect the updated state</li>
                </ul>
              </li>
              <li>
                <p><strong>Automatic Status Updates</strong>:</p>
                <ul>
                  <li>A scheduled job runs daily on the server</li>
                  <li>The job calls TravelService.updateItineraryStatus()</li>
                  <li>
                    The service queries for itineraries that need status updates based on current
                    date
                  </li>
                  <li>
                    Itineraries with arrival date in the past and departure date in the future are
                    updated to &#39;active&#39;
                  </li>
                  <li>
                    Itineraries with departure date in the past are updated to &#39;completed&#39;
                  </li>
                  <li>The updated statuses are saved to the database</li>
                </ul>
              </li>
            </ol>
            <h2>Key Algorithms and Logic</h2>
            <ol>
              <li>
                <p><strong>Geospatial Search</strong>:</p>
                <ul>
                  <li>Uses MongoDB&#39;s $geoNear operator for location-based searches</li>
                  <li>Implements radius-based search with configurable distance</li>
                  <li>Optimizes queries with geospatial indexes</li>
                </ul>
              </li>
              <li>
                <p><strong>Date Range Filtering</strong>:</p>
                <ul>
                  <li>
                    Implements efficient date range queries using MongoDB&#39;s date comparison
                    operators
                  </li>
                  <li>Handles timezone differences for accurate date matching</li>
                  <li>Optimizes queries with compound indexes on date fields</li>
                </ul>
              </li>
              <li>
                <p><strong>Status Management</strong>:</p>
                <ul>
                  <li>
                    Automatically updates itinerary status based on current date and itinerary dates
                  </li>
                  <li>Implements state machine pattern for status transitions</li>
                  <li>
                    Prevents invalid status transitions (e.g., cannot change from
                    &#39;cancelled&#39; to &#39;active&#39;)
                  </li>
                </ul>
              </li>
              <li>
                <p><strong>Conflict Detection</strong>:</p>
                <ul>
                  <li>Detects potential conflicts when creating or updating itineraries</li>
                  <li>Prevents overlapping itineraries for the same service provider</li>
                  <li>
                    Provides warnings for tight scheduling (e.g., back-to-back itineraries in
                    different locations)
                  </li>
                </ul>
              </li>
            </ol>
            <h2>Security Considerations</h2>
            <ol>
              <li>
                <p><strong>Authentication and Authorization</strong>:</p>
                <ul>
                  <li>
                    All itinerary creation, update, and deletion operations require authentication
                  </li>
                  <li>Only the owner of an ad can manage its itineraries</li>
                  <li>Implements role-based access control for admin operations</li>
                </ul>
              </li>
              <li>
                <p><strong>Data Privacy</strong>:</p>
                <ul>
                  <li>Accommodation details are only visible if showAccommodation is true</li>
                  <li>Sensitive location data is protected from unauthorized access</li>
                  <li>Implements data minimization principles in API responses</li>
                </ul>
              </li>
              <li>
                <p><strong>Input Validation</strong>:</p>
                <ul>
                  <li>All user inputs are validated on both client and server</li>
                  <li>Implements strict validation for dates, locations, and other fields</li>
                  <li>Prevents common security issues like injection attacks</li>
                </ul>
              </li>
              <li>
                <p><strong>Rate Limiting</strong>:</p>
                <ul>
                  <li>Implements rate limiting for itinerary creation and search operations</li>
                  <li>Prevents abuse of the API</li>
                  <li>Configurable limits based on user role and operation type</li>
                </ul>
              </li>
            </ol>
            <h2>Testing</h2>
            <ol>
              <li>
                <p><strong>Unit Tests</strong>:</p>
                <ul>
                  <li>Tests for TravelService methods</li>
                  <li>Tests for TravelController methods</li>
                  <li>Tests for TravelItinerary model validation</li>
                </ul>
              </li>
              <li>
                <p><strong>Integration Tests</strong>:</p>
                <ul>
                  <li>Tests for API endpoints</li>
                  <li>Tests for database operations</li>
                  <li>Tests for authentication and authorization</li>
                </ul>
              </li>
              <li>
                <p><strong>End-to-End Tests</strong>:</p>
                <ul>
                  <li>Tests for the complete travel itinerary workflow</li>
                  <li>Tests for the search functionality</li>
                  <li>Tests for the map and calendar components</li>
                </ul>
              </li>
            </ol>
            <h2>Configuration Options</h2>
            <p>
              The Travel Itinerary feature can be configured through environment variables and
              configuration files:
            </p>
            <ol>
              <li>
                <p><strong>Environment Variables</strong>:</p>
                <ul>
                  <li>
                    <code>MAX_ITINERARIES_PER_AD</code>: Maximum number of itineraries allowed per
                    ad (default: 10)
                  </li>
                  <li>
                    <code>DEFAULT_SEARCH_RADIUS_KM</code>: Default radius for location-based
                    searches (default: 50)
                  </li>
                  <li>
                    <code>ITINERARY_AUTO_UPDATE_CRON</code>: Cron expression for automatic status
                    updates (default: &#39;0 0 * * *&#39;)
                  </li>
                </ul>
              </li>
              <li>
                <p><strong>Configuration Files</strong>:</p>
                <ul>
                  <li><code>server/config/travel.config.js</code>: Server-side configuration</li>
                  <li>
                    <code>client-angular/src/app/features/travel/travel.config.ts</code>:
                    Client-side configuration
                  </li>
                </ul>
              </li>
            </ol>
            <h2>Known Limitations</h2>
            <ol>
              <li>
                <p><strong>Performance</strong>:</p>
                <ul>
                  <li>Large number of itineraries can slow down the map component</li>
                  <li>Complex geospatial queries can be resource-intensive</li>
                </ul>
              </li>
              <li>
                <p><strong>Timezone Handling</strong>:</p>
                <ul>
                  <li>Date handling across different timezones can be complex</li>
                  <li>Users may experience confusion with arrival and departure times</li>
                </ul>
              </li>
              <li>
                <p><strong>Mobile Experience</strong>:</p>
                <ul>
                  <li>Map component may have limited functionality on small screens</li>
                  <li>Calendar view may be difficult to use on mobile devices</li>
                </ul>
              </li>
            </ol>
            <h2>Future Enhancements</h2>
            <ol>
              <li>
                <p><strong>Advanced Scheduling</strong>:</p>
                <ul>
                  <li>Support for recurring travel patterns</li>
                  <li>Integration with calendar systems (Google Calendar, iCal)</li>
                  <li>Automatic scheduling suggestions based on historical data</li>
                </ul>
              </li>
              <li>
                <p><strong>Enhanced Notifications</strong>:</p>
                <ul>
                  <li>Push notifications for users when providers announce travel to their area</li>
                  <li>Email notifications for upcoming travel</li>
                  <li>SMS notifications for urgent changes</li>
                </ul>
              </li>
              <li>
                <p><strong>Travel Planning</strong>:</p>
                <ul>
                  <li>Route optimization for multiple destinations</li>
                  <li>Integration with travel booking services</li>
                  <li>Cost estimation for travel plans</li>
                </ul>
              </li>
              <li>
                <p><strong>Analytics</strong>:</p>
                <ul>
                  <li>Heatmaps showing popular travel destinations</li>
                  <li>Demand forecasting for different locations</li>
                  <li>Performance metrics for travel-related bookings</li>
                </ul>
              </li>
            </ol>
          </section>

          <section id="related">
            <h2>Related Components</h2>
            <h2>Related Documentation</h2>
            <ul>
              <li><a href="/docs/features/AD-MANAGEMENT.MD">AD-MANAGEMENT.MD</a></li>
              <li><a href="/docs/features/LOCATION-MATCHING.MD">LOCATION-MATCHING.MD</a></li>
              <li><a href="/docs/features/NOTIFICATION-SYSTEM.MD">NOTIFICATION-SYSTEM.MD</a></li>
              <li><a href="/docs/API_DOCUMENTATION.MD">API_DOCUMENTATION.MD</a></li>
            </ul>
          </section>
        </article>
      </div>
    </main>
  </body>
</html>
