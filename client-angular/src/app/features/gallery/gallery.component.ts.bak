// ===================================================
// CUSTOMIZABLE SETTINGS IN THIS FILE
// ===================================================
// This file contains settings for component configuration (gallery.component)
//
// COMMON CUSTOMIZATIONS:
// - DEFAULT_VIEW_MODE: Default view mode (default: 'grid')
//   Related to: user-preferences.service.ts:defaultViewType
// ===================================================
import { Component, OnInit, OnDestroy, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { MaterialModule } from '../../shared/material.module';
import { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup } from '@angular/forms';
import { UserPreferencesService } from '../../core/services/user-preferences.service';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-gallery',
  template: `
    <div class="gallery-container mat-elevation-z2">
      <mat-card>
        <mat-card-header>
          <mat-card-title>Photo Gallery</mat-card-title>
          <div class="view-toggle">
            <button
              mat-icon-button
              [color]="viewMode === 'grid' ? 'primary' : ''"
              (click)="setViewMode('grid')"
              aria-label="Grid view"
            >
              <mat-icon>grid_view</mat-icon>
            </button>
            <button
              mat-icon-button
              [color]="viewMode === 'list' ? 'primary' : ''"
              (click)="setViewMode('list')"
              aria-label="List view"
            >
              <mat-icon>view_list</mat-icon>
            </button>
          </div>
        </mat-card-header>
        <mat-card-content>
          <div
            [ngClass]="{ 'gallery-grid': viewMode === 'grid', 'gallery-list': viewMode === 'list' }"
          >
            <!-- Gallery content will be implemented here -->
            <p>Gallery feature coming soon...</p>
          </div>
        </mat-card-content>
      </mat-card>
    </div>
  `,
  styles: [
    `
      .gallery-container {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
      }
      .gallery-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 16px;
        padding: 16px;
      }
      .gallery-list {
        display: flex;
        flex-direction: column;
        gap: 16px;
        padding: 16px;
      }
      .view-toggle {
        display: flex;
        margin-left: auto;
      }
    `,
  ],
  standalone: true,
  imports: [CommonModule, RouterModule, MaterialModule, FormsModule, ReactiveFormsModule],
  schemas: [CUSTOM_ELEMENTS_SCHEMA],
})
export class GalleryComponent implements OnInit, OnDestroy {
  viewMode: 'grid' | 'list' = 'grid';
  private subscriptions: Subscription[] = [];

  constructor(private userPreferencesService: UserPreferencesService) {}

  ngOnInit(): void {
    // Load user preferences
    const preferences = this.userPreferencesService.getPreferences();

    // Set view mode based on user preferences
    if (preferences.defaultViewType === 'list') {
      this.viewMode = 'list';
    } else {
      this.viewMode = 'grid';
    }

    // Subscribe to preference changes
    this.subscriptions.push(
      this.userPreferencesService.preferences$.subscribe((prefs) => {
        if (prefs.defaultViewType === 'list') {
          this.viewMode = 'list';
        } else {
          this.viewMode = 'grid';
        }
      }),
    );
  }

  ngOnDestroy(): void {
    // Unsubscribe from all subscriptions
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }

  /**
   * Set the view mode and save it to user preferences
   * @param mode The view mode to set
   */
  setViewMode(mode: 'grid' | 'list'): void {
    this.viewMode = mode;

    // Save view mode to user preferences
    this.userPreferencesService.setDefaultViewType(mode === 'list' ? 'list' : 'netflix');
  }
}
