<div class="chat-container">
  <!-- Left Sidebar with Conversation List -->
  <div class="chat-sidebar">
    <div class="chat-header">
      <h2>Messages</h2>
      <div class="chat-header-actions">
        <button nbButton ghost nbTooltip="New Message" (click)="openNewMessageDialog()">
          <nb-icon icon="add"></nb-icon>
        </button>
        <button nbButton ghost nbTooltip="Settings" [matMenuTriggerFor]="settingsMenu">
          <nb-icon icon="more_vert"></nb-icon>
        </button>
        <nb-menu #settingsMenu="matMenu">
          <button nb-menu-item (click)="toggleNotifications()">
            <nb-icon
              icon="{{ notificationsEnabled ? 'notifications' : 'notifications_off' }}"
            ></nb-icon>
            <span>{{ notificationsEnabled ? 'Mute Notifications' : 'Enable Notifications' }}</span>
          </button>
          <button nb-menu-item (click)="markAllAsRead()">
            <nb-icon icon="done_all"></nb-icon>
            <span>Mark All as Read</span>
          </button>
          <button nb-menu-item (click)="archiveAllChats()">
            <nb-icon icon="archive"></nb-icon>
            <span>Archive All</span>
          </button>
        </nb-menu>
      </div>
    </div>

    <div class="chat-search">
      <nb-form-field appearance="outline" class="search-field">
        <nb-icon matPrefix>search"></nb-icon>
        <input nbInput fullWidth placeholder="Search conversations..." [(ngModel)]="searchTerm" />
        <button
          *ngIf="searchTerm"
          matSuffix
          nb-icon-button
          aria-label="Clear"
          (click)="searchTerm = ''"
        >
          <nb-icon icon="close"></nb-icon>
        </button>
      </nb-form-field>

      <!-- Conversation Filters -->
      <div class="conversation-filters">
        <button
          nbButton
          [class.active]="currentFilter === 'all'"
          (click)="filterConversations('all')"
        >
          All
        </button>
        <button
          nbButton
          [class.active]="currentFilter === 'unread'"
          (click)="filterConversations('unread')"
        >
          Unread
        </button>
        <button
          nbButton
          [class.active]="currentFilter === 'archived'"
          (click)="filterConversations('archived')"
        >
          Archived
        </button>
      </div>
    </div>

    <div class="chat-contacts">
      <!-- Loading State -->
      <div *ngIf="loadingContacts" class="contacts-loading">
        <emerald-skeleton-loader
          type="list"
          [count]="3"
          [animated]="true"
        ></emerald-skeleton-loader>
      </div>

      <!-- Contact List -->
      <div
        *ngFor="let contact of filteredContacts"
        class="contact-item"
        [class.active]="selectedContactId === contact.id"
        [class.unread]="contact.unreadCount > 0"
        (click)="selectContact(contact.id)"
      >
        <emerald-avatar
          [imageUrl]="contact.imageUrl"
          [name]="contact.name"
          [isOnline]="contact.online"
          size="medium"
        >
        </emerald-avatar>

        <div class="contact-info">
          <div class="contact-name-row">
            <div class="contact-name">{{ contact.name }}</div>
            <div class="contact-time">{{ contact.lastMessageTime | date: 'shortTime' }}</div>
          </div>
          <div class="contact-preview-row">
            <div class="contact-preview">
              <span *ngIf="contact.typing" class="typing-indicator">typing...</span>
              <span *ngIf="!contact.typing">{{ contact.lastMessage }}</span>
            </div>
            <div class="contact-badges">
              <div class="unread-badge" *ngIf="contact.unreadCount">{{ contact.unreadCount }}</div>
              <nb-icon *ngIf="contact.pinned" class="pin-icon">push_pin"></nb-icon>
            </div>
          </div>
        </div>
      </div>

      <!-- Empty State -->
      <div *ngIf="filteredContacts.length === 0 && !loadingContacts" class="empty-contacts">
        <nb-icon icon="forum"></nb-icon>
        <p>No conversations found</p>
        <button nbButton appearance="outline" color="primary" (click)="openNewMessageDialog()">
          <nb-icon icon="add"></nb-icon>
          Start a new chat
        </button>
      </div>
    </div>
  </div>

  <!-- Main Chat Area -->
  <div class="chat-main">
    <!-- Active Conversation -->
    <div *ngIf="selectedContactId" class="chat-conversation">
      <!-- Conversation Header -->
      <div class="chat-main-header">
        <div class="header-left">
          <button
            nbButton
            ghost
            class="back-button"
            (click)="deselectContact()"
            nbTooltip="Back to conversations"
          >
            <nb-icon icon="arrow_back"></nb-icon>
          </button>

          <emerald-avatar
            [imageUrl]="getSelectedContact()?.imageUrl"
            [name]="getSelectedContact()?.name"
            [isOnline]="getSelectedContact()?.online"
            size="medium"
            (avatarClick)="viewContactProfile()"
          >
          </emerald-avatar>

          <div class="chat-recipient">
            <div class="recipient-name">{{ getSelectedContact()?.name }}</div>
            <div class="recipient-status" [class.online]="getSelectedContact()?.online">
              {{
                getSelectedContact()?.online
                  ? 'Online'
                  : 'Last seen ' + (getSelectedContact()?.lastSeen | date: 'shortTime')
              }}
            </div>
          </div>
        </div>

        <div class="header-actions">
          <button nbButton ghost nbTooltip="Media Gallery" (click)="openMediaGallery()">
            <nb-icon icon="photo_library"></nb-icon>
          </button>
          <button nbButton ghost nbTooltip="Search in Conversation" (click)="openSearchInChat()">
            <nb-icon icon="search"></nb-icon>
          </button>
          <button nbButton ghost [matMenuTriggerFor]="chatMenu" nbTooltip="More Options">
            <nb-icon icon="more_vert"></nb-icon>
          </button>
          <nb-menu #chatMenu="matMenu">
            <button nb-menu-item (click)="togglePin()">
              <nb-icon icon="{{ isPinned() ? 'push_pin' : 'push_pin' }}"></nb-icon>
              <span>{{ isPinned() ? 'Unpin Conversation' : 'Pin Conversation' }}</span>
            </button>
            <button nb-menu-item [matMenuTriggerFor]="autoDeletionMenu">
              <nb-icon icon="auto_delete"></nb-icon>
              <span>Message Auto-Deletion</span>
            </button>
            <button nb-menu-item (click)="blockContact()">
              <nb-icon icon="block"></nb-icon>
              <span>Block Contact</span>
            </button>
            <button nb-menu-item (click)="clearConversation()">
              <nb-icon icon="delete_sweep"></nb-icon>
              <span>Clear Conversation</span>
            </button>
          </nb-menu>

          <!-- Auto-Deletion Submenu -->
          <nb-menu #autoDeletionMenu="matMenu">
            <button nb-menu-item (click)="configureMessageAutoDeletion(true, 1)">
              <nb-icon icon="timer"></nb-icon>
              <span>Delete after 1 day</span>
            </button>
            <button nb-menu-item (click)="configureMessageAutoDeletion(true, 7)">
              <nb-icon icon="timer"></nb-icon>
              <span>Delete after 7 days</span>
            </button>
            <button nb-menu-item (click)="configureMessageAutoDeletion(true, 30)">
              <nb-icon icon="timer"></nb-icon>
              <span>Delete after 30 days</span>
            </button>
            <button nb-menu-item (click)="configureMessageAutoDeletion(false, 0)">
              <nb-icon icon="timer_off"></nb-icon>
              <span>Disable auto-deletion</span>
            </button>
          </nb-menu>
        </div>
      </div>

      <!-- Message List -->
      <div class="message-list" #messageList>
        <div class="message-group" *ngFor="let group of messageGroups">
          <div class="date-separator">{{ group.date | date }}</div>

          <div
            class="message"
            *ngFor="let message of group.messages"
            [id]="'message-' + message._id"
            [ngClass]="{
              'message--outgoing': message.sender.id === currentUserId,
              'message--incoming': message.sender.id !== currentUserId,
              'message--expiring': message.expiresAt,
              'message--about-to-expire': isAboutToExpire(message.expiresAt),
            }"
          >
            <!-- Message Content -->
            <div class="message__content">
              <div
                class="message-bubble"
                [class.temporary-message]="message.expiresAt"
                [class.about-to-expire]="message.expiresAt && isAboutToExpire(message.expiresAt)"
              >
                <!-- Temporary Message Indicator -->
                <div
                  *ngIf="message.expiresAt"
                  class="temporary-message-indicator"
                  [nbTooltip]="getRemainingTime(message.expiresAt)"
                >
                  <nb-icon icon="timer"></nb-icon>
                </div>

                <!-- Message Text -->
                <div
                  class="message-content"
                  [innerHTML]="formatMessageContent(message.message)"
                ></div>

                <!-- Message Attachments -->
                <div
                  *ngIf="message.attachments && message.attachments.length > 0"
                  class="message-attachments"
                >
                  <!-- Image Attachment -->
                  <div *ngFor="let attachment of message.attachments" class="attachment">
                    <img
                      *ngIf="isImageAttachment(attachment)"
                      [src]="attachment.url"
                      [alt]="attachment.name"
                      (click)="openImagePreview(attachment)"
                    />

                    <!-- File Attachment -->
                    <div
                      *ngIf="!isImageAttachment(attachment)"
                      class="file-attachment"
                      (click)="downloadAttachment(attachment)"
                    >
                      <nb-icon icon="{{ getFileIcon(attachment) }}"></nb-icon>
                      <div class="file-info">
                        <div class="file-name">{{ attachment.name }}</div>
                        <div class="file-size">{{ formatFileSize(attachment.size) }}</div>
                      </div>
                      <button nbButton ghost>
                        <nb-icon icon="download"></nb-icon>
                      </button>
                    </div>
                  </div>
                </div>

                <!-- Message Metadata -->
                <div class="message-meta">
                  <span class="message-time">{{ message.timestamp | date: 'shortTime' }}</span>
                  <!-- Expiry indicator for temporary messages -->
                  <span
                    *ngIf="message.expiresAt"
                    class="message-expiry"
                    [nbTooltip]="getRemainingTime(message.expiresAt)"
                  >
                    <nb-icon class="expiry-icon">timer"></nb-icon>
                  </span>
                  <span
                    *ngIf="message.sender.id === currentUserId"
                    class="message-status"
                    [class.read]="message.read"
                  >
                    <nb-icon class="status-icon"
                      >{{ message.read ? 'done_all' : 'done' }}"></nb-icon
                    >
                  </span>
                </div>
              </div>

              <!-- Expiry Indicator -->
              <span
                *ngIf="message.expiresAt"
                class="message__expiry"
                [nbTooltip]="getRemainingTime(message.expiresAt)"
              >
                <nb-icon [class.rotating]="isAboutToExpire(message.expiresAt)">timer"></nb-icon>
              </span>
            </div>
          </div>
        </div>

        <!-- Typing Indicator -->
        <div *ngIf="isContactTyping" class="typing-indicator-container">
          <emerald-avatar
            [imageUrl]="getSelectedContact()?.imageUrl"
            [name]="getSelectedContact()?.name"
            size="small"
          >
          </emerald-avatar>
          <div class="typing-bubble">
            <div class="typing-dots">
              <span></span>
              <span></span>
              <span></span>
            </div>
          </div>
        </div>

        <!-- Empty State -->
        <div *ngIf="messages.length === 0" class="empty-messages">
          <nb-icon icon="chat"></nb-icon>
          <h3>No messages yet</h3>
          <p>Start the conversation by sending a message below!</p>
        </div>
      </div>

      <!-- Reply Preview (if replying to a message) -->
      <div *ngIf="replyingTo" class="reply-preview">
        <div class="reply-content">
          <nb-icon icon="reply"></nb-icon>
          <div class="reply-text">
            <div class="reply-to">Replying to {{ replyingTo.sender.username }}</div>
            <div class="reply-message">{{ truncateMessage(replyingTo.message) }}</div>
          </div>
        </div>
        <button nbButton ghost (click)="cancelReply()">
          <nb-icon icon="close"></nb-icon>
        </button>
      </div>

      <!-- Message Input Area -->
      <div class="message-input-area">
        <!-- Reply Preview -->
        <div class="reply-preview" *ngIf="replyingTo">
          <div class="reply-content">
            <nb-icon icon="reply"></nb-icon>
            <div class="reply-text">
              <div class="reply-to">Replying to {{ replyingTo.sender.username }}</div>
              <div class="reply-message">{{ truncateMessage(replyingTo.message) }}</div>
            </div>
          </div>
          <button nbButton ghost (click)="cancelReply()">
            <nb-icon icon="close"></nb-icon>
          </button>
        </div>

        <!-- Temporary Message Mode Indicator -->
        <div class="temp-message-indicator" *ngIf="temporaryMessageMode">
          <nb-icon icon="timer"></nb-icon>
          <span>Temporary message mode: {{ formatTTL(temporaryMessageTTL) }}</span>
          <button nbButton ghost (click)="toggleTemporaryMessageMode()">
            <nb-icon icon="close"></nb-icon>
          </button>
        </div>

        <!-- Input Controls -->
        <div class="input-controls">
          <!-- Attachment Button -->
          <button nbButton ghost (click)="openAttachmentMenu()" nbTooltip="Add attachment">
            <nb-icon icon="attach_file"></nb-icon>
          </button>

          <!-- Temporary Message Toggle -->
          <button
            nbButton
            ghost
            (click)="toggleTemporaryMessageMode()"
            [class.active]="temporaryMessageMode"
            [nbTooltip]="
              temporaryMessageMode ? 'Disable temporary message' : 'Enable temporary message'
            "
          >
            <nb-icon icon="timer"></nb-icon>
          </button>

          <!-- Text Input -->
          <div class="message-input" [class.temp-message-mode]="temporaryMessageMode">
            <textarea
              [(ngModel)]="newMessage"
              (keyup.enter)="handleEnterKey($event)"
              (input)="onTyping()"
              [placeholder]="
                temporaryMessageMode ? 'Type a temporary message...' : 'Type a message...'
              "
              #messageInput
            >
            </textarea>
          </div>

          <!-- Emoji Picker -->
          <button nbButton ghost (click)="toggleEmojiPicker()" nbTooltip="Add emoji">
            <nb-icon icon="sentiment_satisfied_alt"></nb-icon>
          </button>

          <!-- Send Button -->
          <button
            nbButton
            ghost
            (click)="sendMessage()"
            [disabled]="!canSendMessage()"
            nbTooltip="Send message"
          >
            <nb-icon icon="send"></nb-icon>
          </button>
        </div>

        <!-- Emoji Picker Panel -->
        <div class="emoji-picker" *ngIf="showEmojiPicker">
          <div class="emoji-categories">
            <button
              nbButton
              ghost
              *ngFor="let category of emojiCategories"
              (click)="selectEmojiCategory(category)"
            >
              <nb-icon icon="{{ category.icon }}"></nb-icon>
            </button>
          </div>
          <div class="emoji-list">
            <button
              *ngFor="let emoji of currentCategoryEmojis"
              class="emoji-item"
              (click)="addEmoji(emoji)"
            >
              {{ emoji }}
            </button>
          </div>
        </div>
      </div>

      <!-- Message Settings Menu -->
      <nb-menu #messageSettings="matMenu">
        <button nb-menu-item (click)="configureMessageAutoDeletion(!messageAutoDeletionEnabled, 7)">
          <nb-icon icon="{{ messageAutoDeletionEnabled ? 'timer_off' : 'timer' }}"></nb-icon>
          <span>{{
            messageAutoDeletionEnabled ? 'Disable auto-deletion' : 'Enable auto-deletion'
          }}</span>
        </button>

        <mat-divider></mat-divider>

        <!-- Temporary Message Duration Options -->
        <button nb-menu-item [matMenuTriggerFor]="tempMessageDuration">
          <nb-icon icon="schedule"></nb-icon>
          <span>Temporary message duration</span>
        </button>
      </nb-menu>

      <!-- Temporary Message Duration Submenu -->
      <nb-menu #tempMessageDuration="matMenu">
        <button nb-menu-item (click)="setTemporaryMessageTTL(1)">1 hour</button>
        <button nb-menu-item (click)="setTemporaryMessageTTL(4)">4 hours</button>
        <button nb-menu-item (click)="setTemporaryMessageTTL(8)">8 hours</button>
        <button nb-menu-item (click)="setTemporaryMessageTTL(24)">1 day</button>
        <button nb-menu-item (click)="setTemporaryMessageTTL(48)">2 days</button>
        <button nb-menu-item (click)="setTemporaryMessageTTL(72)">3 days</button>
        <button nb-menu-item (click)="setTemporaryMessageTTL(168)">7 days</button>
      </nb-menu>
    </div>

    <!-- Empty State (No Conversation Selected) -->
    <div *ngIf="!selectedContactId" class="empty-state">
      <div class="empty-state-content">
        <nb-icon class="empty-icon">chat"></nb-icon>
        <h3>Select a conversation</h3>
        <p>Choose a contact from the list to start chatting</p>
        <button nbButton status="primary" color="primary" (click)="openNewMessageDialog()">
          <nb-icon icon="add"></nb-icon>
          Start a new chat
        </button>
      </div>
    </div>
  </div>
</div>

<!-- New Message Dialog Template -->
<ng-template #newMessageDialog>
  <h2 nb-dialog-title>New Message</h2>
  <nb-dialog-content>
    <nb-form-field appearance="outline" class="full-width">
      <nb-form-field-label>Search contacts</nb-form-field-label>
      <input nbInput fullWidth [(ngModel)]="newMessageSearch" placeholder="Type a name..." />
      <nb-icon matPrefix>search"></nb-icon>
    </nb-form-field>

    <div class="contact-list">
      <div
        *ngFor="let contact of filteredNewMessageContacts"
        class="contact-option"
        (click)="selectNewMessageContact(contact)"
      >
        <emerald-avatar
          [imageUrl]="contact.imageUrl"
          [name]="contact.name"
          [isOnline]="contact.online"
          size="small"
        >
        </emerald-avatar>
        <div class="contact-name">{{ contact.name }}</div>
      </div>

      <div *ngIf="filteredNewMessageContacts.length === 0" class="no-contacts">
        <p>No contacts found</p>
      </div>
    </div>
  </nb-dialog-content>
  <nb-dialog-actions align="end">
    <button nbButton nb-dialog-close>Cancel</button>
  </nb-dialog-actions>
</ng-template>

<!-- Image Preview Dialog Template -->
<ng-template #imagePreviewDialog>
  <div class="image-preview-container">
    <button nbButton ghost class="close-button" nb-dialog-close>
      <nb-icon icon="close"></nb-icon>
    </button>

    <img [src]="previewImage?.url" [alt]="previewImage?.name" class="preview-image" />

    <div class="image-preview-actions">
      <button nbButton ghost nbTooltip="Download" (click)="downloadImage()">
        <nb-icon icon="download"></nb-icon>
      </button>
      <button nbButton ghost nbTooltip="Share" (click)="shareImage()">
        <nb-icon icon="share"></nb-icon>
      </button>
    </div>
  </div>
</ng-template>

<!-- Search in Chat Dialog Template -->
<ng-template #searchInChatDialog>
  <h2 nb-dialog-title>Search in Conversation</h2>
  <nb-dialog-content>
    <nb-form-field appearance="outline" class="full-width">
      <nb-form-field-label>Search messages</nb-form-field-label>
      <input nbInput fullWidth [(ngModel)]="chatSearchQuery" placeholder="Type to search..." />
      <nb-icon matPrefix>search"></nb-icon>
    </nb-form-field>

    <div class="search-results">
      <div
        *ngFor="let result of chatSearchResults"
        class="search-result-item"
        (click)="scrollToMessage(result)"
      >
        <div class="result-sender">{{ result.sender.username }}</div>
        <div class="result-message" [innerHTML]="highlightSearchText(result.message)"></div>
        <div class="result-time">{{ result.timestamp | date: 'short' }}</div>
      </div>

      <div *ngIf="chatSearchResults.length === 0 && chatSearchQuery" class="no-results">
        <p>No messages found</p>
      </div>
    </div>
  </nb-dialog-content>
  <nb-dialog-actions align="end">
    <button nbButton nb-dialog-close>Close</button>
  </nb-dialog-actions>
</ng-template>

<!-- Media Gallery Dialog Template -->
<ng-template #mediaGalleryDialog>
  <h2 nb-dialog-title>Media Gallery</h2>
  <nb-dialog-content>
    <div class="gallery-tabs">
      <button nbButton [class.active]="galleryTab === 'images'" (click)="galleryTab = 'images'">
        Images
      </button>
      <button nbButton [class.active]="galleryTab === 'files'" (click)="galleryTab = 'files'">
        Files
      </button>
      <button nbButton [class.active]="galleryTab === 'links'" (click)="galleryTab = 'links'">
        Links
      </button>
    </div>

    <!-- Images Tab -->
    <div *ngIf="galleryTab === 'images'" class="gallery-images">
      <div
        *ngFor="let image of galleryImages"
        class="gallery-image"
        (click)="openImagePreview(image)"
      >
        <img [src]="image.url" [alt]="image.name" />
      </div>

      <div *ngIf="galleryImages.length === 0" class="no-media">
        <p>No images shared in this conversation</p>
      </div>
    </div>

    <!-- Files Tab -->
    <div *ngIf="galleryTab === 'files'" class="gallery-files">
      <div
        *ngFor="let file of galleryFiles"
        class="gallery-file"
        (click)="downloadAttachment(file)"
      >
        <nb-icon icon="{{ getFileIcon(file) }}"></nb-icon>
        <div class="file-info">
          <div class="file-name">{{ file.name }}</div>
          <div class="file-meta">
            <span class="file-size">{{ formatFileSize(file.size) }}</span>
            <span class="file-date">{{ file.timestamp | date: 'shortDate' }}</span>
          </div>
        </div>
        <button nbButton ghost>
          <nb-icon icon="download"></nb-icon>
        </button>
      </div>

      <div *ngIf="galleryFiles.length === 0" class="no-media">
        <p>No files shared in this conversation</p>
      </div>
    </div>

    <!-- Links Tab -->
    <div *ngIf="galleryTab === 'links'" class="gallery-links">
      <div *ngFor="let link of galleryLinks" class="gallery-link" (click)="openLink(link.url)">
        <nb-icon icon="link"></nb-icon>
        <div class="link-info">
          <div class="link-title">{{ link.title || link.url }}</div>
          <div class="link-url">{{ link.url }}</div>
        </div>
        <div class="link-date">{{ link.timestamp | date: 'shortDate' }}</div>
      </div>

      <div *ngIf="galleryLinks.length === 0" class="no-media">
        <p>No links shared in this conversation</p>
      </div>
    </div>
  </nb-dialog-content>
  <nb-dialog-actions align="end">
    <button nbButton nb-dialog-close>Close</button>
  </nb-dialog-actions>
</ng-template>
