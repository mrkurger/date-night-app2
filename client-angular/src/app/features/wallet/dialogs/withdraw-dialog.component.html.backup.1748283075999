<p-card
  [nbSpinner]="loadingInitialData || processingWithdrawal || processingCryptoWithdrawal"
  nbSpinnerStatus="primary"
  nbSpinnerSize="large"
  class="withdraw-dialog-card"
 >
  <p-card-header >
    <h3>Withdraw Funds</h3>
    <p-button></p-button>
      <nb-icon icon="close-outline"></nb-icon>
    </button>
  </ng-template>
  <p-card-body >
    <p-tabView (changeTab)="handleTabChange($event)" fullWidth >
      <!-- Fiat Currency Withdrawal Tab -->
      <p-tabPanel tabTitle="Fiat Currency" [active]="selectedTabIndex === 0">
        <ng-container *ngIf="fiatBalances.length > 0; else noFiatBalances">
          <form
            [formGroup]="withdrawForm"
            (ngSubmit)="submitFiatWithdrawal()"
            class="withdraw-form"
          >
            <div class="p-field">
              <label>Currency</label>
              <p-dropdown
                fullWidth
                formControlName="currency"
                placeholder="Select Fiat Currency"
                [status]="
                  withdrawForm.get('currency')?.dirty
                    ? withdrawForm.get('currency')?.invalid
                      ? 'danger'
                      : 'success'
                    : 'basic'
                "
                (selectedChange)="onBalanceSelect($event)"
               [options]="options" optionLabel="label" optionValue="value">
                <nb-option *ngFor="let balance of fiatBalances" [value]="balance.currency">
                  {{ balance.currency }} ({{ balance.available | currency: balance.currency }})
                </nb-option>
              </p-dropdown>

              <span *ngIf="withdrawForm.get('currency')?.errors?.['required']" class="text-danger">
                Please select a currency
              </span>
            </div>

            <div class="p-field">
              <label>Amount</label>
              <input
                nbInput
                fullWidth
                type="number"
                formControlName="amount"
                placeholder="Enter amount"
                [status]="
                  withdrawForm.get('amount')?.dirty
                    ? withdrawForm.get('amount')?.invalid
                      ? 'danger'
                      : 'success'
                    : 'basic'
                "
              />

              Available: {{ selectedBalance.available | currency: selectedBalance.currency }}

              <span *ngIf="withdrawForm.get('amount')?.errors?.required" class="text-danger">
                Amount is required
              </span>
              <span *ngIf="withdrawForm.get('amount')?.errors?.min" class="text-danger">
                Amount must be greater than 0
              </span>
              <span *ngIf="withdrawForm.get('amount')?.errors?.max" class="text-danger">
                Amount exceeds your balance
              </span>
            </div>

            <div *ngIf="filteredPaymentMethods.length  class="p-field"> 0">
              <label>Payment Method</label>
              <p-dropdown
                fullWidth
                formControlName="paymentMethodId"
                placeholder="Select payment method"
                [status]="
                  withdrawForm.get('paymentMethodId')?.dirty
                    ? withdrawForm.get('paymentMethodId')?.invalid
                      ? 'danger'
                      : 'success'
                    : 'basic'
                "
               [options]="options" optionLabel="label" optionValue="value">
                <nb-option *ngFor="let method of filteredPaymentMethods" [value]="method._id">
                  {{ getPaymentMethodLabel(method) }}
                </nb-option>
              </p-dropdown>

              Payment method is required.
            </div>
            <p-message
              status="warning"
              *ngIf="
                filteredPaymentMethods.length === 0 &&
                withdrawForm.get('currency')?.value &&
                fiatBalances.length  [severity]="status"> 0
              "
              class="no-payment-methods"
            >
              No suitable payment methods found for {{ withdrawForm.get('currency')?.value }}.
              Please <a href="#" (click)="closeAndOpenAddPaymentMethod($event)">add one</a>.
            </p-message>

            <div *ngIf="showFeeEstimate && withdrawForm.get('amount')?.value  class="p-field"> 0">
              <label>Fee Estimate</label>
              <input nbInput fullWidth readonly [value]="feeEstimate" disabled />
              <div>You will receive approximately: {{ netAmount }}</div>
            </div>

            <div class="p-field">
              <label>Description (Optional)</label>
              <input
                nbInput
                fullWidth
                formControlName="description"
                placeholder="Add a note for your reference"
              />
            </div>
          </form>
        </ng-container>
        <ng-template #noFiatBalances>
          <p-message status="info" class="full-width-alert"
             [severity]="status">You have no fiat balances to withdraw.</nb-alert
          >
        </ng-template>
      </p-tabPanel>

      <!-- Cryptocurrency Withdrawal Tab -->
      <p-tabPanel tabTitle="Cryptocurrency" [active]="selectedTabIndex === 1">
        <ng-container *ngIf="cryptoBalances.length > 0; else noCryptoBalances">
          <form
            [formGroup]="cryptoWithdrawForm"
            (ngSubmit)="submitCryptoWithdrawal()"
            class="withdraw-form"
          >
            <div class="p-field">
              <label>Cryptocurrency</label>
              <p-dropdown
                fullWidth
                formControlName="currency"
                placeholder="Select Cryptocurrency"
                [status]="
                  cryptoWithdrawForm.get('currency')?.dirty
                    ? cryptoWithdrawForm.get('currency')?.invalid
                      ? 'danger'
                      : 'success'
                    : 'basic'
                "
                (selectedChange)="onBalanceSelect($event)"
               [options]="options" optionLabel="label" optionValue="value">
                <nb-option *ngFor="let balance of cryptoBalances" [value]="balance.currency">
                  {{ balance.currency }} ({{ balance.available | currency: balance.currency }})
                </nb-option>
              </p-dropdown>

              <span
                *ngIf="cryptoWithdrawForm.get('currency')?.errors?.['required']"
                class="text-danger"
              >
                Please select a currency
              </span>
            </div>

            <div class="p-field">
              <label>Amount</label>
              <input
                nbInput
                fullWidth
                type="number"
                formControlName="amount"
                placeholder="Enter amount"
                [status]="
                  cryptoWithdrawForm.get('amount')?.dirty
                    ? cryptoWithdrawForm.get('amount')?.invalid
                      ? 'danger'
                      : 'success'
                    : 'basic'
                "
              />

              Available: {{ cryptoMaxAmount }} {{ cryptoWithdrawForm.get('currency')?.value }}

              <span *ngIf="cryptoWithdrawForm.get('amount')?.errors?.required" class="text-danger">
                Amount is required
              </span>
              <span *ngIf="cryptoWithdrawForm.get('amount')?.errors?.min" class="text-danger">
                Minimum amount is {{ cryptoWithdrawForm.get('amount')?.errors?.min.min }}.
              </span>
              <span *ngIf="cryptoWithdrawForm.get('amount')?.errors?.max" class="text-danger">
                Amount exceeds available balance ({{ cryptoMaxAmount }}
                {{ cryptoWithdrawForm.get('currency')?.value }}).
              </span>
            </div>

            <div class="p-field">
              <label>Network</label>
              <p-dropdown
                fullWidth
                formControlName="network"
                placeholder="Select Network"
                [status]="
                  cryptoWithdrawForm.get('network')?.dirty
                    ? cryptoWithdrawForm.get('network')?.invalid
                      ? 'danger'
                      : 'success'
                    : 'basic'
                "
               [options]="options" optionLabel="label" optionValue="value">
                <nb-option *ngFor="let network of availableCryptoNetworks" [value]="network.value">
                  {{ network.name }} <span *ngIf="network.fee">(Fee: {{ network.fee }})</span>
                </nb-option>
              </p-dropdown>

              Network is required.
            </div>

            <div class="p-field">
              <label>Withdrawal Address</label>
              <input
                nbInput
                fullWidth
                formControlName="address"
                placeholder="Enter withdrawal address"
                [status]="
                  cryptoWithdrawForm.get('address')?.dirty
                    ? cryptoWithdrawForm.get('address')?.invalid
                      ? 'danger'
                      : 'success'
                    : 'basic'
                "
              />

              <span *ngIf="cryptoWithdrawForm.get('address')?.errors?.required" class="text-danger">
                Address is required
              </span>
              <span
                *ngIf="cryptoWithdrawForm.get('address')?.errors?.minlength"
                class="text-danger"
              >
                Address is too short
              </span>
            </div>

            <div *ngIf="requiresMemo(cryptoWithdrawForm.get('currency')?.value)" class="p-field">
              <label>{{ getMemoName(cryptoWithdrawForm.get('currency')?.value) }}</label>
              <input
                nbInput
                fullWidth
                formControlName="memo"
                [placeholder]="getMemoName(cryptoWithdrawForm.get('currency')?.value)"
                [status]="
                  cryptoWithdrawForm.get('memo')?.dirty
                    ? cryptoWithdrawForm.get('memo')?.invalid
                      ? 'danger'
                      : 'success'
                    : 'basic'
                "
              />
              Some networks require a
              {{ getMemoName(cryptoWithdrawForm.get('currency')?.value) }} for the transaction.

              {{ getMemoName(cryptoWithdrawForm.get('currency')?.value) }} is required for this
              currency/network.
            </div>

            <div class="p-field">
              <label>Description (Optional)</label>
              <input
                nbInput
                fullWidth
                formControlName="description"
                placeholder="Add a note for your reference"
              />
            </div>

            <p-message status="warning" class="crypto-warning" [severity]="status">
              <strong>Important:</strong> Double-check the address and network. Crypto transactions
              are irreversible.
            </p-message>
          </form>
        </ng-container>
        <ng-template #noCryptoBalances>
          <p-message status="info" class="full-width-alert"
             [severity]="status">You have no cryptocurrency balances to withdraw.</nb-alert
          >
        </ng-template>
      </p-tabPanel>
    </p-tabView>
  </ng-template>
  <p-card-footer class="actions-footer" >
    <button
      nbButton
      status="basic"
      (click)="closeDialog()"
      [disabled]="processingWithdrawal || processingCryptoWithdrawal"
    >
      Cancel
    </button>
    <button
      nbButton
      status="primary"
      type="submit"
      *ngIf="selectedTabIndex === 0"
      (click)="submitFiatWithdrawal()"
      [disabled]="
        withdrawForm.invalid ||
        processingWithdrawal ||
        filteredPaymentMethods.length === 0 ||
        fiatBalances.length === 0
      "
      [nbSpinner]="processingWithdrawal"
      nbSpinnerStatus="control"
      nbSpinnerSize="tiny"
    >
      <nb-icon icon="checkmark-circle-2-outline" pack="eva" *ngIf="!processingWithdrawal"></nb-icon>
      {{ processingWithdrawal ? 'Processing...' : 'Withdraw Fiat' }}
    </button>
    <button
      nbButton
      status="primary"
      type="submit"
      *ngIf="selectedTabIndex === 1"
      (click)="submitCryptoWithdrawal()"
      [disabled]="
        cryptoWithdrawForm.invalid || processingCryptoWithdrawal || cryptoBalances.length === 0
      "
      [nbSpinner]="processingCryptoWithdrawal"
      nbSpinnerStatus="control"
      nbSpinnerSize="tiny"
    >
      <nb-icon
        icon="checkmark-circle-2-outline"
        pack="eva"
        *ngIf="!processingCryptoWithdrawal"
      ></nb-icon>
      {{ processingCryptoWithdrawal ? 'Processing...' : 'Withdraw Crypto' }}
    </button>
  </ng-template>
</p-card>
