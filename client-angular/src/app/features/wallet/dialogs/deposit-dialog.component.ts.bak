import {
  Component,
  OnInit,
  Inject,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  CUSTOM_ELEMENTS_SCHEMA,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import {
  NbDialogModule,
  NbDialogRef,
  NB_DIALOG_CONFIG,
  NbCardModule,
  NbFormFieldModule,
  NbInputModule,
  NbSelectModule,
  NbButtonModule,
  NbRadioModule,
  NbSpinnerModule,
  NbIconModule,
} from '@nebular/theme';
import {
  WalletService,
  DepositRequest,
  PaymentMethod,
} from '../../../core/services/wallet.service';
import { NotificationService } from '../../../core/services/notification.service';

export interface DepositDialogContext {
  currencies: string[];
  paymentMethods: PaymentMethod[];
  selectedCurrency?: string;
}

@Component({
  selector: 'app-deposit-dialog',
  templateUrl: './deposit-dialog.component.html',
  styleUrls: ['./deposit-dialog.component.scss'],
  standalone: true,
  schemas: [CUSTOM_ELEMENTS_SCHEMA],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    NbDialogModule,
    NbCardModule,
    NbFormFieldModule,
    NbInputModule,
    NbSelectModule,
    NbButtonModule,
    NbRadioModule,
    NbSpinnerModule,
    NbIconModule,
  ],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class DepositDialogComponent implements OnInit {
  depositForm: FormGroup;
  isSubmitting = false;

  constructor(
    protected ref: NbDialogRef<DepositDialogComponent>,
    private fb: FormBuilder,
    private walletService: WalletService,
    private notificationService: NotificationService,
    @Inject(NB_DIALOG_CONFIG) public context: DepositDialogContext,
    private cdr: ChangeDetectorRef,
  ) {
    this.depositForm = this.fb.group({
      currency: [this.context.selectedCurrency || '', Validators.required],
      amount: ['', [Validators.required, Validators.min(0.01)]],
      paymentMethodId: ['', Validators.required],
    });
  }

  ngOnInit() {
    if (this.context.paymentMethods?.length > 0) {
      const defaultMethod = this.context.paymentMethods.find((pm) => pm.isDefault);
      const paymentMethodToSelect = defaultMethod || this.context.paymentMethods[0];
      if (paymentMethodToSelect) {
        this.depositForm.patchValue({ paymentMethodId: paymentMethodToSelect._id });
      }
    }
    this.cdr.markForCheck();
  }

  async deposit() {
    if (this.depositForm.invalid) {
      this.depositForm.markAllAsTouched();
      this.cdr.markForCheck();
      return;
    }

    this.isSubmitting = true;
    this.cdr.markForCheck();

    const formData: DepositRequest = {
      amount: this.depositForm.value.amount,
      currency: this.depositForm.value.currency,
      paymentMethodId: this.depositForm.value.paymentMethodId,
      description: 'Wallet deposit',
    };

    try {
      const result = await this.walletService.processDeposit(formData).toPromise();
      if (result && result.success) {
        this.notificationService.success('Deposit successful!');
        this.ref.close({ success: true, amount: formData.amount, currency: formData.currency });
      } else {
        this.notificationService.error(
          result?.error || 'Failed to process deposit. Please try again.',
        );
      }
    } catch (error: unknown) {
      console.error('Deposit error:', error);
      let message = 'An unexpected error occurred during deposit.';
      if (typeof error === 'object' && error !== null) {
        type HttpErrorPayload = { message?: string };
        type AppError = { error?: HttpErrorPayload | string; message?: string };
        const err = error as AppError;
        if (typeof err.error === 'string') {
          message = err.error;
        } else if (err.error?.message) {
          message = err.error.message;
        } else if (err.message) {
          message = err.message;
        }
      } else if (typeof error === 'string') {
        message = error;
      }
      this.notificationService.error(message);
    } finally {
      this.isSubmitting = false;
      this.cdr.markForCheck();
    }
  }

  close() {
    this.ref.close();
  }

  getPaymentMethodLabel(method: PaymentMethod): string {
    const idSuffix = `...${method._id.slice(-4)}`;
    if (method.type === 'card' && method.cardDetails) {
      return `${method.cardDetails.brand || 'Card'} ending in ${method.cardDetails.lastFour} (${idSuffix})`;
    }
    if (method.type === 'bank_account' && method.bankDetails) {
      return `${method.bankDetails.bankName || 'Bank'} ending in ${method.bankDetails.lastFour} (${idSuffix})`;
    }
    if (method.type === 'crypto_address' && method.cryptoDetails) {
      const address = method.cryptoDetails.address || '';
      const shortAddress =
        address.length > 10 ? `${address.substring(0, 6)}...${address.slice(-4)}` : address;
      return `${method.cryptoDetails.currency} ${shortAddress} (${idSuffix})`;
    }
    const typeDisplay = method.type.replace(/_/g, ' ').replace(/\b\w/g, (l) => l.toUpperCase());
    return `${method.provider || 'Unknown'} ${typeDisplay} (${idSuffix})`;
  }

  get f() {
    return this.depositForm.controls;
  }
}
