import { Inject, Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { CommonModule } from '@angular/common';
import {
  FormControl,
  FormGroup,
  Validators,
  FormsModule,
  ReactiveFormsModule,
} from '@angular/forms';
import { NebularModule } from '../../../../app/shared/nebular.module';
import {
  NbDialogRef,
  NB_DIALOG_CONFIG,
  NbCardModule,
  NbButtonModule,
  NbIconModule,
  NbBadgeModule,
  NbToastrService,
  NbGlobalPosition,
  NbGlobalPhysicalPosition,
  NbFormFieldModule,
  NbInputModule,
  NbSelectModule,
  NbSpinnerModule,
  NbAlertModule,
  NbTooltipModule,
  NbTagModule,
} from '@nebular/theme';
import { ClipboardModule } from '@angular/cdk/clipboard';

import { WalletService } from '../../../core/services/wallet.service';
import { CardModule } from 'primeng/card';
import { ButtonModule } from 'primeng/button';


export interface WalletTransaction {
  id: string;
  type: string;
  amount: number;
  currency: string;
  status: string;
  createdAt: string;
  updatedAt: string;
  description?: string;
  metadata?: {
    paymentMethodId?: string;
    recipientId?: string;
    recipientWalletId?: string;
    senderId?: string;
    senderWalletId?: string;
    transactionId?: string;
    [key: string]: any;
  };
}

@Component({
  selector: 'app-transaction-details-dialog',
  templateUrl: './transaction-details-dialog.component.html',
  styleUrls: ['./transaction-details-dialog.component.scss'],
  standalone: true,
  schemas: [CUSTOM_ELEMENTS_SCHEMA],
  imports: [NebularModule, CommonModule,
    FormsModule,
    ReactiveFormsModule,
    ClipboardModule,
    NbCardModule,
    NbButtonModule,
    NbIconModule,
    NbBadgeModule,
    NbFormFieldModule,
    NbInputModule,
    NbSelectModule,
    NbSpinnerModule,
    NbAlertModule,
    NbTooltipModule,
    NbTagModule,
  ],
})
export class TransactionDetailsDialogComponent {
  constructor(
    private dialogRef: NbDialogRef<TransactionDetailsDialogComponent>,
    public walletService: WalletService,
    private toastrService: NbToastrService,
    @Inject(NB_DIALOG_CONFIG) private config: { transaction: WalletTransaction },
  ) {}

  get transaction(): WalletTransaction {
    return this.config.transaction;
  }

  formatTransactionAmount(transaction: WalletTransaction): string {
    const sign = transaction.amount >= 0 ? '+' : '';
    return `${sign}${this.walletService.formatCurrency(transaction.amount, transaction.currency)}`;
  }

  copyToClipboard(text: string): void {
    navigator.clipboard.writeText(text);
    const position: NbGlobalPosition = NbGlobalPhysicalPosition.TOP_RIGHT;
    this.toastrService.success('Copied to clipboard', 'Success', { position });
  }

  getTypeStatus(type: string): string {
    switch (type.toLowerCase()) {
      case 'deposit':
        return 'success';
      case 'withdrawal':
        return 'warning';
      case 'transfer':
        return 'info';
      case 'payment':
        return 'primary';
      case 'refund':
        return 'info';
      case 'fee':
        return 'basic';
      default:
        return 'basic';
    }
  }

  getStatusStatus(status: string): string {
    switch (status.toLowerCase()) {
      case 'completed':
        return 'success';
      case 'pending':
        return 'warning';
      case 'failed':
        return 'danger';
      case 'cancelled':
        return 'basic';
      default:
        return 'basic';
    }
  }

  getMetadataKeys(): string[] {
    if (!this.transaction.metadata) {
      return [];
    }
    return Object.keys(this.transaction.metadata);
  }

  formatMetadataKey(key: string): string {
    return key
      .replace(/([A-Z])/g, ' $1')
      .replace(/^./, (str) => str.toUpperCase())
      .replace(/Id$/, 'ID');
  }

  close(): void {
    this.dialogRef.close();
  }
}
