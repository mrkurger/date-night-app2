<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AUTH - Date Night App</title>
    <link rel="stylesheet" href="/docs/component-library/styles/style.css" />
    <style>
      .tooltip {
        position: relative;
        display: inline-block;
        border-bottom: 1px dotted #333;
      }

      .tooltip .tooltip-text {
        visibility: hidden;
        width: 300px;
        background-color: #f8f9fa;
        color: #333;
        text-align: left;
        border-radius: 6px;
        padding: 10px;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        margin-left: -150px;
        opacity: 0;
        transition: opacity 0.3s;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
      }

      .tooltip:hover .tooltip-text {
        visibility: visible;
        opacity: 1;
      }

      .function-link {
        color: #0366d6;
        text-decoration: none;
        font-family: monospace;
        background-color: #f6f8fa;
        padding: 2px 4px;
        border-radius: 3px;
      }

      .function-link:hover {
        text-decoration: underline;
      }

      code {
        font-family: monospace;
        background-color: #f6f8fa;
        padding: 2px 4px;
        border-radius: 3px;
      }

      pre {
        background-color: #f6f8fa;
        padding: 16px;
        border-radius: 6px;
        overflow: auto;
      }
    </style>
  </head>
  <body>
    <header>
      <div class="container">
        <h1>Date Night App Documentation</h1>
        <nav>
          <ul>
            <li><a href="/_docs_index.html">Home</a></li>
            <li><a href="/_glossary.html">Glossary</a></li>
            <li><a href="index.html">Auth Index</a></li>
          </ul>
        </nav>
      </div>
    </header>

    <main class="container">
      <h1>AUTH</h1>

      <h1>Authentication System</h1>
      <h2>Overview</h2>
      <p>
        The Authentication System is a core feature of DateNight.io that provides secure user
        authentication, authorization, and account management capabilities. It supports multiple
        authentication methods, role-based access control, and secure session management.
      </p>
      <h2>User Experience</h2>
      <p>Users interact with the Authentication System through several interfaces:</p>
      <ul>
        <li>
          <strong>Registration</strong>: New users can create an account with email/password or
          social login
        </li>
        <li>
          <strong>Login</strong>: Existing users can authenticate using email/password or social
          login
        </li>
        <li><strong>Password Recovery</strong>: Users can reset their password via email</li>
        <li>
          <strong>Profile Management</strong>: Users can update their profile information and
          credentials
        </li>
        <li>
          <strong>Session Management</strong>: Users can view active sessions and log out from
          specific devices
        </li>
        <li>
          <strong>Account Verification</strong>: New users receive email verification to confirm
          their account
        </li>
      </ul>
      <h2>Architecture</h2>
      <h3>Client-Side Components</h3>
      <table>
        <thead>
          <tr>
            <th>Component</th>
            <th>Path</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>AuthModule</code></td>
            <td><code>/client-angular/src/app/auth/auth.module.ts</code></td>
            <td>Main module for auth feature</td>
          </tr>
          <tr>
            <td><code>LoginComponent</code></td>
            <td><code>/client-angular/src/app/auth/components/login/login.component.ts</code></td>
            <td>Handles user login</td>
          </tr>
          <tr>
            <td><code>RegisterComponent</code></td>
            <td>
              <code>/client-angular/src/app/auth/components/register/register.component.ts</code>
            </td>
            <td>Handles user registration</td>
          </tr>
          <tr>
            <td><code>ForgotPasswordComponent</code></td>
            <td>
              <code
                >/client-angular/src/app/auth/components/forgot-password/forgot-password.component.ts</code
              >
            </td>
            <td>Handles password reset requests</td>
          </tr>
          <tr>
            <td><code>ResetPasswordComponent</code></td>
            <td>
              <code
                >/client-angular/src/app/auth/components/reset-password/reset-password.component.ts</code
              >
            </td>
            <td>Handles password reset</td>
          </tr>
          <tr>
            <td><code>VerifyEmailComponent</code></td>
            <td>
              <code
                >/client-angular/src/app/auth/components/verify-email/verify-email.component.ts</code
              >
            </td>
            <td>Handles email verification</td>
          </tr>
          <tr>
            <td><code>ProfileComponent</code></td>
            <td>
              <code>/client-angular/src/app/auth/components/profile/profile.component.ts</code>
            </td>
            <td>Displays and edits user profile</td>
          </tr>
          <tr>
            <td><code>SessionsComponent</code></td>
            <td>
              <code>/client-angular/src/app/auth/components/sessions/sessions.component.ts</code>
            </td>
            <td>Manages active user sessions</td>
          </tr>
          <tr>
            <td><code>AuthCallbackComponent</code></td>
            <td>
              <code
                >/client-angular/src/app/auth/components/auth-callback/auth-callback.component.ts</code
              >
            </td>
            <td>Handles OAuth callback</td>
          </tr>
        </tbody>
      </table>
      <h3>Client-Side Services</h3>
      <table>
        <thead>
          <tr>
            <th>Service</th>
            <th>Path</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>AuthService</code></td>
            <td><code>/client-angular/src/app/core/services/auth.service.ts</code></td>
            <td>Handles authentication operations</td>
          </tr>
          <tr>
            <td><code>TokenService</code></td>
            <td><code>/client-angular/src/app/core/services/token.service.ts</code></td>
            <td>Manages JWT tokens</td>
          </tr>
          <tr>
            <td><code>UserService</code></td>
            <td><code>/client-angular/src/app/core/services/user.service.ts</code></td>
            <td>Manages user data</td>
          </tr>
          <tr>
            <td><code>AuthGuard</code></td>
            <td><code>/client-angular/src/app/core/guards/auth.guard.ts</code></td>
            <td>Protects routes requiring authentication</td>
          </tr>
          <tr>
            <td><code>RoleGuard</code></td>
            <td><code>/client-angular/src/app/core/guards/role.guard.ts</code></td>
            <td>Protects routes requiring specific roles</td>
          </tr>
          <tr>
            <td><code>AuthInterceptor</code></td>
            <td><code>/client-angular/src/app/core/interceptors/auth.interceptor.ts</code></td>
            <td>Adds auth token to HTTP requests</td>
          </tr>
        </tbody>
      </table>
      <h3>Server-Side Controllers</h3>
      <table>
        <thead>
          <tr>
            <th>Controller</th>
            <th>Path</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>AuthController</code></td>
            <td><code>/server/components/auth/auth.controller.js</code></td>
            <td>Handles authentication requests</td>
          </tr>
          <tr>
            <td><code>UserController</code></td>
            <td><code>/server/components/user/user.controller.js</code></td>
            <td>Handles user-related requests</td>
          </tr>
          <tr>
            <td><code>SessionController</code></td>
            <td><code>/server/components/session/session.controller.js</code></td>
            <td>Manages user sessions</td>
          </tr>
        </tbody>
      </table>
      <h3>Server-Side Services</h3>
      <table>
        <thead>
          <tr>
            <th>Service</th>
            <th>Path</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>AuthService</code></td>
            <td><code>/server/services/auth.service.js</code></td>
            <td>Implements authentication business logic</td>
          </tr>
          <tr>
            <td><code>TokenService</code></td>
            <td><code>/server/services/token.service.js</code></td>
            <td>Generates and validates JWT tokens</td>
          </tr>
          <tr>
            <td><code>EmailService</code></td>
            <td><code>/server/services/email.service.js</code></td>
            <td>Sends verification and reset emails</td>
          </tr>
          <tr>
            <td><code>UserService</code></td>
            <td><code>/server/services/user.service.js</code></td>
            <td>Manages user data</td>
          </tr>
        </tbody>
      </table>
      <h3>Models</h3>
      <table>
        <thead>
          <tr>
            <th>Model</th>
            <th>Path</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>User</code></td>
            <td><code>/server/components/user/user.model.js</code></td>
            <td>Mongoose schema for users</td>
          </tr>
          <tr>
            <td><code>Session</code></td>
            <td><code>/server/components/session/session.model.js</code></td>
            <td>Mongoose schema for user sessions</td>
          </tr>
          <tr>
            <td><code>Token</code></td>
            <td><code>/server/components/token/token.model.js</code></td>
            <td>Mongoose schema for verification tokens</td>
          </tr>
        </tbody>
      </table>
      <h2>API Endpoints</h2>
      <table>
        <thead>
          <tr>
            <th>Endpoint</th>
            <th>Method</th>
            <th>Description</th>
            <th>Request Body</th>
            <th>Response</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>/api/auth/register</code></td>
            <td>POST</td>
            <td>Register a new user</td>
            <td><code>{email, password, name}</code></td>
            <td>User object with token</td>
          </tr>
          <tr>
            <td><code>/api/auth/login</code></td>
            <td>POST</td>
            <td>Authenticate a user</td>
            <td><code>{email, password}</code></td>
            <td>User object with token</td>
          </tr>
          <tr>
            <td><code>/api/auth/logout</code></td>
            <td>POST</td>
            <td>Log out a user</td>
            <td><code>{sessionId?}</code></td>
            <td>Success message</td>
          </tr>
          <tr>
            <td><code>/api/auth/refresh-token</code></td>
            <td>POST</td>
            <td>Refresh an expired JWT token</td>
            <td><code>{refreshToken}</code></td>
            <td>New access token</td>
          </tr>
          <tr>
            <td><code>/api/auth/forgot-password</code></td>
            <td>POST</td>
            <td>Request password reset</td>
            <td><code>{email}</code></td>
            <td>Success message</td>
          </tr>
          <tr>
            <td><code>/api/auth/reset-password</code></td>
            <td>POST</td>
            <td>Reset password with token</td>
            <td><code>{token, newPassword}</code></td>
            <td>Success message</td>
          </tr>
          <tr>
            <td><code>/api/auth/verify-email</code></td>
            <td>GET</td>
            <td>Verify email address</td>
            <td>Query param: <code>token</code></td>
            <td>Success message</td>
          </tr>
          <tr>
            <td><code>/api/auth/resend-verification</code></td>
            <td>POST</td>
            <td>Resend verification email</td>
            <td><code>{email}</code></td>
            <td>Success message</td>
          </tr>
          <tr>
            <td><code>/api/auth/social/:provider</code></td>
            <td>GET</td>
            <td>Initiate social login</td>
            <td>N/A</td>
            <td>Redirect to provider</td>
          </tr>
          <tr>
            <td><code>/api/auth/social/callback/:provider</code></td>
            <td>GET</td>
            <td>Handle social login callback</td>
            <td>Query params from provider</td>
            <td>Redirect with token</td>
          </tr>
          <tr>
            <td><code>/api/users/me</code></td>
            <td>GET</td>
            <td>Get current user profile</td>
            <td>N/A</td>
            <td>User object</td>
          </tr>
          <tr>
            <td><code>/api/users/me</code></td>
            <td>PUT</td>
            <td>Update user profile</td>
            <td>User object</td>
            <td>Updated user object</td>
          </tr>
          <tr>
            <td><code>/api/users/me/password</code></td>
            <td>PUT</td>
            <td>Change password</td>
            <td><code>{currentPassword, newPassword}</code></td>
            <td>Success message</td>
          </tr>
          <tr>
            <td><code>/api/users/me/sessions</code></td>
            <td>GET</td>
            <td>Get active sessions</td>
            <td>N/A</td>
            <td>Array of session objects</td>
          </tr>
          <tr>
            <td><code>/api/users/me/sessions/:id</code></td>
            <td>DELETE</td>
            <td>Terminate a specific session</td>
            <td>N/A</td>
            <td>Success message</td>
          </tr>
        </tbody>
      </table>
      <h2>Data Flow</h2>
      <p>The authentication system follows these data flows:</p>
      <ol>
        <li>
          <p><strong>Registration Flow</strong>:</p>
          <ul>
            <li>User submits registration data through RegisterComponent</li>
            <li>AuthService sends a POST request to <code>/api/auth/register</code></li>
            <li>AuthController validates the request and calls AuthService.register()</li>
            <li>User is created in the database with a hashed password</li>
            <li>Verification email is sent to the user</li>
            <li>JWT token is generated and returned to the client</li>
            <li>User is redirected to the verification pending page</li>
          </ul>
        </li>
        <li>
          <p><strong>Login Flow</strong>:</p>
          <ul>
            <li>User submits credentials through LoginComponent</li>
            <li>AuthService sends a POST request to <code>/api/auth/login</code></li>
            <li>AuthController validates credentials and calls AuthService.login()</li>
            <li>If valid, a JWT token and refresh token are generated</li>
            <li>Session is created in the database</li>
            <li>Tokens and user data are returned to the client</li>
            <li>TokenService stores tokens in localStorage/cookies</li>
            <li>User is redirected to the dashboard</li>
          </ul>
        </li>
        <li>
          <p><strong>Password Reset Flow</strong>:</p>
          <ul>
            <li>User requests password reset through ForgotPasswordComponent</li>
            <li>AuthService sends a POST request to <code>/api/auth/forgot-password</code></li>
            <li>AuthController generates a reset token and calls EmailService</li>
            <li>Reset email with token link is sent to the user</li>
            <li>User clicks the link and is directed to ResetPasswordComponent</li>
            <li>User submits new password</li>
            <li>AuthService sends a POST request to <code>/api/auth/reset-password</code></li>
            <li>AuthController validates the token and updates the password</li>
            <li>User is redirected to login</li>
          </ul>
        </li>
        <li>
          <p><strong>Social Authentication Flow</strong>:</p>
          <ul>
            <li>User clicks social login button</li>
            <li>AuthService redirects to <code>/api/auth/social/:provider</code></li>
            <li>AuthController redirects to the provider&#39;s OAuth page</li>
            <li>User authenticates with the provider</li>
            <li>Provider redirects back to <code>/api/auth/social/callback/:provider</code></li>
            <li>AuthController processes the OAuth response</li>
            <li>If the user exists, they are logged in; otherwise, a new account is created</li>
            <li>JWT token is generated and returned via redirect</li>
            <li>AuthCallbackComponent processes the token</li>
            <li>User is redirected to the dashboard</li>
          </ul>
        </li>
      </ol>
      <h2>State Management</h2>
      <p>
        The authentication system uses a combination of service-based state management and local
        storage:
      </p>
      <ul>
        <li><strong>AuthService</strong>: Maintains the current authentication state</li>
        <li><strong>TokenService</strong>: Manages JWT tokens in localStorage/cookies</li>
        <li><strong>AuthGuard/RoleGuard</strong>: Enforce access control based on auth state</li>
        <li><strong>AuthInterceptor</strong>: Automatically adds tokens to API requests</li>
      </ul>
      <h2>Key Algorithms and Logic</h2>
      <ol>
        <li>
          <p><strong>Password Hashing</strong>:</p>
          <ul>
            <li>Passwords are hashed using bcrypt with a salt factor of 10</li>
            <li>Passwords are never stored in plain text</li>
            <li>Password comparison is done using bcrypt.compare()</li>
          </ul>
        </li>
        <li>
          <p><strong>JWT Token Generation</strong>:</p>
          <ul>
            <li>Access tokens are signed with a secret key and expire after 15 minutes</li>
            <li>Refresh tokens are signed with a different secret key and expire after 7 days</li>
            <li>Tokens include user ID, roles, and permissions</li>
          </ul>
        </li>
        <li>
          <p><strong>Role-Based Access Control</strong>:</p>
          <ul>
            <li>Users have one or more roles (user, admin, moderator)</li>
            <li>Routes are protected based on required roles</li>
            <li>UI elements are conditionally rendered based on user permissions</li>
          </ul>
        </li>
        <li>
          <p><strong>Session Management</strong>:</p>
          <ul>
            <li>Each login creates a new session record</li>
            <li>Sessions include device info, IP address, and last activity</li>
            <li>Users can view and terminate specific sessions</li>
            <li>Sessions expire after 30 days of inactivity</li>
          </ul>
        </li>
      </ol>
      <h2>Security Considerations</h2>
      <ol>
        <li>
          <p><strong>Token Security</strong>:</p>
          <ul>
            <li>Access tokens are short-lived (15 minutes)</li>
            <li>Refresh tokens are stored in HTTP-only cookies</li>
            <li>CSRF protection is implemented for token endpoints</li>
            <li>Tokens are invalidated on logout</li>
          </ul>
        </li>
        <li>
          <p><strong>Account Protection</strong>:</p>
          <ul>
            <li>Rate limiting is applied to login attempts</li>
            <li>Account lockout after multiple failed attempts</li>
            <li>Email verification is required for new accounts</li>
            <li>Password strength requirements are enforced</li>
          </ul>
        </li>
        <li>
          <p><strong>Data Protection</strong>:</p>
          <ul>
            <li>Sensitive data is encrypted in the database</li>
            <li>PII is minimized and properly secured</li>
            <li>HTTPS is required for all authentication endpoints</li>
            <li>Security headers are implemented (CSP, HSTS, etc.)</li>
          </ul>
        </li>
      </ol>
      <h2>Testing</h2>
      <h3>Unit Tests</h3>
      <table>
        <thead>
          <tr>
            <th>Test File</th>
            <th>Path</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>auth.service.spec.ts</code></td>
            <td><code>/client-angular/src/app/core/services/auth.service.spec.ts</code></td>
            <td>Tests for auth service</td>
          </tr>
          <tr>
            <td><code>login.component.spec.ts</code></td>
            <td>
              <code>/client-angular/src/app/auth/components/login/login.component.spec.ts</code>
            </td>
            <td>Tests for login component</td>
          </tr>
          <tr>
            <td><code>register.component.spec.ts</code></td>
            <td>
              <code
                >/client-angular/src/app/auth/components/register/register.component.spec.ts</code
              >
            </td>
            <td>Tests for register component</td>
          </tr>
          <tr>
            <td><code>auth.guard.spec.ts</code></td>
            <td><code>/client-angular/src/app/core/guards/auth.guard.spec.ts</code></td>
            <td>Tests for auth guard</td>
          </tr>
        </tbody>
      </table>
      <h3>Integration Tests</h3>
      <table>
        <thead>
          <tr>
            <th>Test File</th>
            <th>Path</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>auth.controller.test.js</code></td>
            <td><code>/server/tests/integration/auth/auth.controller.test.js</code></td>
            <td>API integration tests</td>
          </tr>
          <tr>
            <td><code>auth.service.test.js</code></td>
            <td><code>/server/tests/integration/auth/auth.service.test.js</code></td>
            <td>Service integration tests</td>
          </tr>
        </tbody>
      </table>
      <h2>Configuration Options</h2>
      <p>The authentication system supports several configuration options:</p>
      <ul>
        <li><strong>JWT_SECRET</strong>: Secret key for signing JWT tokens</li>
        <li><strong>JWT_REFRESH_SECRET</strong>: Secret key for signing refresh tokens</li>
        <li><strong>JWT_EXPIRATION</strong>: Expiration time for access tokens (default: 15m)</li>
        <li>
          <strong>JWT_REFRESH_EXPIRATION</strong>: Expiration time for refresh tokens (default: 7d)
        </li>
        <li><strong>PASSWORD_SALT_ROUNDS</strong>: Number of bcrypt salt rounds (default: 10)</li>
        <li>
          <strong>EMAIL_VERIFICATION_REQUIRED</strong>: Whether email verification is required
          (default: true)
        </li>
        <li>
          <strong>ACCOUNT_LOCKOUT_THRESHOLD</strong>: Number of failed attempts before lockout
          (default: 5)
        </li>
        <li>
          <strong>ACCOUNT_LOCKOUT_DURATION</strong>: Duration of account lockout (default: 15m)
        </li>
        <li><strong>SESSION_EXPIRATION</strong>: Expiration time for sessions (default: 30d)</li>
      </ul>
      <h2>Known Limitations</h2>
      <ol>
        <li>
          <p><strong>Social Authentication</strong>:</p>
          <ul>
            <li>Limited to Google, Facebook, and Twitter</li>
            <li>Profile data synchronization may be incomplete</li>
            <li>Social account linking is not yet implemented</li>
          </ul>
        </li>
        <li>
          <p><strong>Multi-Factor Authentication</strong>:</p>
          <ul>
            <li>Currently limited to email verification</li>
            <li>TOTP/SMS-based 2FA is planned but not implemented</li>
          </ul>
        </li>
        <li>
          <p><strong>Session Management</strong>:</p>
          <ul>
            <li>Limited device fingerprinting</li>
            <li>No real-time session monitoring</li>
            <li>Session transfer between devices is not supported</li>
          </ul>
        </li>
      </ol>
      <h2>Future Enhancements</h2>
      <ol>
        <li>
          <p><strong>Advanced Authentication</strong>:</p>
          <ul>
            <li>Implement TOTP-based 2FA</li>
            <li>Add biometric authentication support</li>
            <li>Implement WebAuthn/FIDO2 passwordless login</li>
          </ul>
        </li>
        <li>
          <p><strong>Enhanced Security</strong>:</p>
          <ul>
            <li>Add anomaly detection for login attempts</li>
            <li>Implement risk-based authentication</li>
            <li>Add IP-based geolocation verification</li>
          </ul>
        </li>
        <li>
          <p><strong>User Management</strong>:</p>
          <ul>
            <li>Add self-service account deletion</li>
            <li>Implement account recovery options</li>
            <li>Add user impersonation for admins</li>
          </ul>
        </li>
        <li>
          <p><strong>Compliance</strong>:</p>
          <ul>
            <li>Enhance GDPR compliance features</li>
            <li>Add consent management</li>
            <li>Implement comprehensive audit logging</li>
          </ul>
        </li>
      </ol>
      <h2>Related Documentation</h2>
      <ul>
        <li><a href="/docs/SECURITY_BEST_PRACTICES.MD">SECURITY_BEST_PRACTICES.MD</a></li>
        <li><a href="/docs/AUTHENTICATION_FLOW.MD">AUTHENTICATION_FLOW.MD</a></li>
        <li><a href="/docs/DATA_PROTECTION.MD">DATA_PROTECTION.MD</a></li>
        <li><a href="/docs/API_DOCUMENTATION.MD">API_DOCUMENTATION.MD</a></li>
      </ul>
    </main>

    <footer>
      <div class="container">
        <p>&copy; 2025 Date Night App. All rights reserved.</p>
      </div>
    </footer>

    <script>
      // Add click handlers to function links
      document.addEventListener('DOMContentLoaded', function () {
        const functionLinks = document.querySelectorAll('.function-link');
        functionLinks.forEach((link) => {
          link.addEventListener('click', function (e) {
            const href = this.getAttribute('href');
            if (href) {
              window.location.href = href;
            }
          });
        });
      });
    </script>
  </body>
</html>
