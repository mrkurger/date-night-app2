<div class="ad-stats-container">
  <h2>Statistics for "{{ adTitle }}"</h2>

  <div *ngIf="loading" class="loading-spinner">
    <p-progressSpinner status="primary" size="large" ></p-progressSpinner>
  </div>

  <div *ngIf="!loading" class="stats-content">
    <p-card class="summary-card" >
      <p-card-header >
        <h5>Performance Summary (Last 7 Days)</h5>
      </ng-template>
      <p-card-body class="summary-metrics" >
        <div class="metric">
          <div class="metric-value">{{ getTotalViews(dataSource.slice(0, 7)) }}</div>
          <div class="metric-label">Total Views</div>
        </div>
        <div class="metric">
          <div class="metric-value">{{ getTotalClicks(dataSource.slice(0, 7)) }}</div>
          <div class="metric-label">Total Clicks</div>
        </div>
        <div class="metric">
          <div class="metric-value">{{ getTotalInquiries(dataSource.slice(0, 7)) }}</div>
          <div class="metric-label">Total Inquiries</div>
        </div>
        <div class="metric">
          <div class="metric-value">{{ getConversionRate(dataSource.slice(0, 7)) }}%</div>
          <div class="metric-label">Conversion Rate</div>
        </div>
      </ng-template>
    </p-card>

    <!-- Chart placeholders - in a real app, you would use a charting library like ngx-charts -->
    <div class="charts-container">
      <p-card class="chart-card" >
        <p-card-header >
          <h5>Daily Views</h5>
        </ng-template>
        <p-card-body class="chart-placeholder" >
          <div class="chart-bars">
            <div
              class="bar"
              *ngFor="let item of viewsData"
              [style.height]="getBarHeight(item, viewsData)"
              [title]="item.value"
            ></div>
          </div>
          <div class="chart-labels">
            <div *ngFor="let item of viewsData" class="chart-label">
              {{ item.name | date: 'MM/dd' }}
            </div>
          </div>
        </ng-template>
      </p-card>

      <p-card class="chart-card" >
        <p-card-header >
          <h5>Daily Clicks</h5>
        </ng-template>
        <p-card-body class="chart-placeholder" >
          <div class="chart-bars">
            <div
              class="bar"
              *ngFor="let item of clicksData"
              [style.height]="getBarHeight(item, clicksData)"
              [title]="item.value"
            ></div>
          </div>
          <div class="chart-labels">
            <div *ngFor="let item of clicksData" class="chart-label">
              {{ item.name | date: 'MM/dd' }}
            </div>
          </div>
        </ng-template>
      </p-card>
    </div>

    <!-- Detailed stats table -->
    <p-card class="table-card" >
      <p-card-header >
        <h5>Detailed Statistics</h5>
      </ng-template>
      <p-card-body >
        <div class="filter-field" class="p-field">
          <input nbInput (keyup)="applyFilter($event)" placeholder="Search by date" />
        </div>

        <div class="table-container">
          <table [nbTreeGrid]="dataSource">
            <!-- Date Column -->
            <tr nbTreeGridHeaderRow *nbTreeGridHeaderRowDef="displayedColumns"></tr>
            <tr nbTreeGridRow *nbTreeGridRowDef="let row; columns: displayedColumns"></tr>

            <ng-container nbTreeGridColumnDef="date">
              <th nbTreeGridHeaderCell *nbTreeGridHeaderCellDef nbSortHeader>Date</th>
              <td nbTreeGridCell *nbTreeGridCellDef="let row">{{ row.data?.date | date }}</td>
            </ng-container>

            <!-- Views Column -->
            <ng-container nbTreeGridColumnDef="views">
              <th nbTreeGridHeaderCell *nbTreeGridHeaderCellDef nbSortHeader>Views</th>
              <td nbTreeGridCell *nbTreeGridCellDef="let row">{{ row.data?.views }}</td>
            </ng-container>

            <!-- Clicks Column -->
            <ng-container nbTreeGridColumnDef="clicks">
              <th nbTreeGridHeaderCell *nbTreeGridHeaderCellDef nbSortHeader>Clicks</th>
              <td nbTreeGridCell *nbTreeGridCellDef="let row">{{ row.data?.clicks }}</td>
            </ng-container>

            <!-- Inquiries Column -->
            <ng-container nbTreeGridColumnDef="inquiries">
              <th nbTreeGridHeaderCell *nbTreeGridHeaderCellDef nbSortHeader>Inquiries</th>
              <td nbTreeGridCell *nbTreeGridCellDef="let row">{{ row.data?.inquiries }}</td>
            </ng-container>

            <!-- Conversion Rate Column -->
            <ng-container nbTreeGridColumnDef="conversionRate">
              <th nbTreeGridHeaderCell *nbTreeGridHeaderCellDef nbSortHeader>Conversion Rate</th>
              <td nbTreeGridCell *nbTreeGridCellDef="let row">{{ row.data?.conversionRate }}%</td>
            </ng-container>
          </table>

          <div class="pagination-container">
            <button
              nbButton
              ghost
              status="basic"
              [disabled]="currentPage === 1"
              (click)="onPageChange(currentPage - 1)"
            >
              <nb-icon icon="arrow-left"></nb-icon>
            </button>
            <span class="pagination-info"
              >Page {{ currentPage }} of {{ Math.ceil(totalItems / pageSize) }}</span
            >
            <button
              nbButton
              ghost
              status="basic"
              [disabled]="currentPage >= totalItems / pageSize"
              (click)="onPageChange(currentPage + 1)"
            >
              <nb-icon icon="arrow-right"></nb-icon>
            </button>
            <p-dropdown [(selected)]="pageSize" class="page-size-select" [options]="options" optionLabel="label" optionValue="value">
              <nb-option *ngFor="let size of pageSizes" [value]="size">{{ size }} items</nb-option>
            </p-dropdown>
          </div>
        </div>
      </ng-template>
    </p-card>
  </div>
</div>
