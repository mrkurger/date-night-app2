<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Validation Utils Glossary</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
      }
      h1,
      h2,
      h3 {
        color: #333;
      }
      .function-entry {
        margin-bottom: 30px;
        border-bottom: 1px solid #eee;
        padding-bottom: 20px;
      }
      .function-signature {
        background-color: #f6f8fa;
        padding: 10px;
        border-radius: 5px;
        font-family: monospace;
        overflow-x: auto;
      }
      .parameters {
        margin-left: 20px;
      }
      .parameter-name {
        font-weight: bold;
        color: #0366d6;
      }
      .parameter-type {
        color: #6f42c1;
      }
      .return-type {
        color: #d73a49;
      }
      nav {
        margin-bottom: 20px;
        padding: 10px;
        background-color: #f6f8fa;
        border-radius: 5px;
      }
      nav a {
        margin-right: 15px;
        text-decoration: none;
        color: #0366d6;
      }
      nav a:hover {
        text-decoration: underline;
      }
      .security-note {
        background-color: #fff8e1;
        border-left: 4px solid #ffc107;
        padding: 10px;
        margin: 10px 0;
      }
    </style>
  </head>
  <body>
    <nav>
      <a href="../../../_docs_index.html">Main Documentation</a>
      <a href="./CHANGELOG.html">Changelog</a>
      <a href="./AILESSONS.html">AI Lessons</a>
    </nav>

    <h1>Validation Utils Glossary</h1>

    <div class="function-entry" id="isValidEmail">
      <h2>isValidEmail</h2>
      <div class="function-signature">function isValidEmail(email: string): boolean</div>
      <p>Validates if a string is a valid email address using RFC 5322 compliant regex.</p>
      <h3>Parameters:</h3>
      <div class="parameters">
        <p>
          <span class="parameter-name">email</span> <span class="parameter-type">(string)</span>:
          The email address to validate
        </p>
      </div>
      <h3>Returns:</h3>
      <p><span class="return-type">boolean</span>: Boolean indicating if the email is valid</p>
      <h3>Example:</h3>
      <pre>
if (isValidEmail(userInput.email)) {
  // proceed with valid email
} else {
  // show error message
}
        </pre
      >
    </div>

    <div class="function-entry" id="isValidUrl">
      <h2>isValidUrl</h2>
      <div class="function-signature">function isValidUrl(url: string): boolean</div>
      <p>
        Validates if a string is a valid URL, with security checks for potentially dangerous
        protocols.
      </p>
      <div class="security-note">
        <p>
          <strong>Security Note:</strong> This function blocks potentially dangerous URL protocols
          that could lead to XSS attacks, including javascript:, data:, vbscript:, and others.
        </p>
      </div>
      <h3>Parameters:</h3>
      <div class="parameters">
        <p>
          <span class="parameter-name">url</span> <span class="parameter-type">(string)</span>: The
          URL to validate
        </p>
      </div>
      <h3>Returns:</h3>
      <p>
        <span class="return-type">boolean</span>: Boolean indicating if the URL is valid and safe
      </p>
      <h3>Example:</h3>
      <pre>
if (isValidUrl(userInput.website)) {
  // proceed with valid URL
} else {
  // show error message
}
        </pre
      >
    </div>

    <div class="function-entry" id="isValidNorwegianPhone">
      <h2>isValidNorwegianPhone</h2>
      <div class="function-signature">function isValidNorwegianPhone(phone: string): boolean</div>
      <p>Validates if a string is a valid Norwegian phone number.</p>
      <h3>Parameters:</h3>
      <div class="parameters">
        <p>
          <span class="parameter-name">phone</span> <span class="parameter-type">(string)</span>:
          The phone number to validate
        </p>
      </div>
      <h3>Returns:</h3>
      <p>
        <span class="return-type">boolean</span>: Boolean indicating if the phone number is valid
      </p>
      <h3>Example:</h3>
      <pre>
if (isValidNorwegianPhone(userInput.phoneNumber)) {
  // proceed with valid phone number
} else {
  // show error message
}
        </pre
      >
    </div>

    <div class="function-entry" id="isValidPassword">
      <h2>isValidPassword</h2>
      <div class="function-signature">
        function isValidPassword(password: string, options?: object): boolean
      </div>
      <p>Validates if a string is a valid password based on configurable strength requirements.</p>
      <h3>Parameters:</h3>
      <div class="parameters">
        <p>
          <span class="parameter-name">password</span> <span class="parameter-type">(string)</span>:
          The password to validate
        </p>
        <p>
          <span class="parameter-name">options</span>
          <span class="parameter-type">(object, optional)</span>: Configuration options
        </p>
        <ul>
          <li>
            <span class="parameter-name">minLength</span>
            <span class="parameter-type">(number, default: 8)</span>: Minimum password length
          </li>
          <li>
            <span class="parameter-name">requireUppercase</span>
            <span class="parameter-type">(boolean, default: true)</span>: Require uppercase letters
          </li>
          <li>
            <span class="parameter-name">requireLowercase</span>
            <span class="parameter-type">(boolean, default: true)</span>: Require lowercase letters
          </li>
          <li>
            <span class="parameter-name">requireNumbers</span>
            <span class="parameter-type">(boolean, default: true)</span>: Require numbers
          </li>
          <li>
            <span class="parameter-name">requireSpecialChars</span>
            <span class="parameter-type">(boolean, default: true)</span>: Require special characters
          </li>
        </ul>
      </div>
      <h3>Returns:</h3>
      <p>
        <span class="return-type">boolean</span>: Boolean indicating if the password meets the
        requirements
      </p>
      <h3>Example:</h3>
      <pre>
if (isValidPassword(userInput.password, { minLength: 10 })) {
  // proceed with valid password
} else {
  // show error message
}
        </pre
      >
    </div>

    <div class="function-entry" id="matchingFieldsValidator">
      <h2>matchingFieldsValidator</h2>
      <div class="function-signature">
        function matchingFieldsValidator(controlName: string, matchingControlName: string,
        errorKey?: string): ValidatorFn
      </div>
      <p>Creates a validator function to check if two form fields match.</p>
      <h3>Parameters:</h3>
      <div class="parameters">
        <p>
          <span class="parameter-name">controlName</span>
          <span class="parameter-type">(string)</span>: The name of the first control
        </p>
        <p>
          <span class="parameter-name">matchingControlName</span>
          <span class="parameter-type">(string)</span>: The name of the control that should match
        </p>
        <p>
          <span class="parameter-name">errorKey</span>
          <span class="parameter-type">(string, default: 'fieldsMismatch')</span>: The error key to
          use when validation fails
        </p>
      </div>
      <h3>Returns:</h3>
      <p>
        <span class="return-type">ValidatorFn</span>: A validator function that can be used in form
        validation
      </p>
      <h3>Example:</h3>
      <pre>
this.form = this.formBuilder.group({
  email: ['', [Validators.required, Validators.email]],
  confirmEmail: ['', Validators.required]
}, {
  validators: matchingFieldsValidator('email', 'confirmEmail', 'emailMismatch')
});
        </pre
      >
    </div>

    <div class="function-entry" id="passwordMatchValidator">
      <h2>passwordMatchValidator</h2>
      <div class="function-signature">
        function passwordMatchValidator(passwordControlName?: string, confirmPasswordControlName?:
        string): ValidatorFn
      </div>
      <p>Creates a validator function specifically for password matching.</p>
      <h3>Parameters:</h3>
      <div class="parameters">
        <p>
          <span class="parameter-name">passwordControlName</span>
          <span class="parameter-type">(string, default: 'password')</span>: The name of the
          password control
        </p>
        <p>
          <span class="parameter-name">confirmPasswordControlName</span>
          <span class="parameter-type">(string, default: 'confirmPassword')</span>: The name of the
          confirm password control
        </p>
      </div>
      <h3>Returns:</h3>
      <p>
        <span class="return-type">ValidatorFn</span>: A validator function that can be used in form
        validation
      </p>
      <h3>Example:</h3>
      <pre>
this.form = this.formBuilder.group({
  password: ['', [Validators.required, Validators.minLength(8)]],
  confirmPassword: ['', Validators.required]
}, {
  validators: passwordMatchValidator()
});
        </pre
      >
    </div>

    <div class="function-entry" id="isValidNorwegianPostalCode">
      <h2>isValidNorwegianPostalCode</h2>
      <div class="function-signature">
        function isValidNorwegianPostalCode(postalCode: string): boolean
      </div>
      <p>Validates if a string is a valid Norwegian postal code.</p>
      <h3>Parameters:</h3>
      <div class="parameters">
        <p>
          <span class="parameter-name">postalCode</span>
          <span class="parameter-type">(string)</span>: The postal code to validate
        </p>
      </div>
      <h3>Returns:</h3>
      <p>
        <span class="return-type">boolean</span>: Boolean indicating if the postal code is valid
      </p>
      <h3>Example:</h3>
      <pre>
if (isValidNorwegianPostalCode(userInput.postalCode)) {
  // proceed with valid postal code
} else {
  // show error message
}
        </pre
      >
    </div>

    <div class="function-entry" id="isValidISODate">
      <h2>isValidISODate</h2>
      <div class="function-signature">function isValidISODate(dateString: string): boolean</div>
      <p>Validates if a string is a valid date in ISO format (YYYY-MM-DD).</p>
      <h3>Parameters:</h3>
      <div class="parameters">
        <p>
          <span class="parameter-name">dateString</span>
          <span class="parameter-type">(string)</span>: The date string to validate
        </p>
      </div>
      <h3>Returns:</h3>
      <p><span class="return-type">boolean</span>: Boolean indicating if the date is valid</p>
      <h3>Example:</h3>
      <pre>
if (isValidISODate(userInput.birthDate)) {
  // proceed with valid date
} else {
  // show error message
}
        </pre
      >
    </div>

    <div class="function-entry" id="isInRange">
      <h2>isInRange</h2>
      <div class="function-signature">
        function isInRange(value: number, min: number, max: number): boolean
      </div>
      <p>Validates if a number is within a specified range.</p>
      <h3>Parameters:</h3>
      <div class="parameters">
        <p>
          <span class="parameter-name">value</span> <span class="parameter-type">(number)</span>:
          The number to validate
        </p>
        <p>
          <span class="parameter-name">min</span> <span class="parameter-type">(number)</span>: The
          minimum allowed value
        </p>
        <p>
          <span class="parameter-name">max</span> <span class="parameter-type">(number)</span>: The
          maximum allowed value
        </p>
      </div>
      <h3>Returns:</h3>
      <p>
        <span class="return-type">boolean</span>: Boolean indicating if the number is within range
      </p>
      <h3>Example:</h3>
      <pre>
if (isInRange(userInput.age, 18, 65)) {
  // proceed with valid age
} else {
  // show error message
}
        </pre
      >
    </div>

    <div class="function-entry" id="isAlphanumeric">
      <h2>isAlphanumeric</h2>
      <div class="function-signature">function isAlphanumeric(value: string): boolean</div>
      <p>Validates if a string contains only alphanumeric characters.</p>
      <h3>Parameters:</h3>
      <div class="parameters">
        <p>
          <span class="parameter-name">value</span> <span class="parameter-type">(string)</span>:
          The string to validate
        </p>
      </div>
      <h3>Returns:</h3>
      <p>
        <span class="return-type">boolean</span>: Boolean indicating if the string is alphanumeric
      </p>
      <h3>Example:</h3>
      <pre>
if (isAlphanumeric(userInput.username)) {
  // proceed with valid username
} else {
  // show error message
}
        </pre
      >
    </div>

    <div class="function-entry" id="isValidCreditCard">
      <h2>isValidCreditCard</h2>
      <div class="function-signature">function isValidCreditCard(cardNumber: string): boolean</div>
      <p>Validates if a string is a valid credit card number using the Luhn algorithm.</p>
      <h3>Parameters:</h3>
      <div class="parameters">
        <p>
          <span class="parameter-name">cardNumber</span>
          <span class="parameter-type">(string)</span>: The credit card number to validate
        </p>
      </div>
      <h3>Returns:</h3>
      <p>
        <span class="return-type">boolean</span>: Boolean indicating if the credit card number is
        valid
      </p>
      <h3>Example:</h3>
      <pre>
if (isValidCreditCard(userInput.cardNumber)) {
  // proceed with valid credit card
} else {
  // show error message
}
        </pre
      >
    </div>
  </body>
</html>
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Validation Utils Glossary</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
      }
      h1,
      h2,
      h3 {
        color: #333;
      }
      .function-entry {
        margin-bottom: 30px;
        border-bottom: 1px solid #eee;
        padding-bottom: 20px;
      }
      .function-name {
        font-weight: bold;
        color: #0366d6;
      }
      .function-signature {
        background-color: #f6f8fa;
        padding: 10px;
        border-radius: 5px;
        font-family: monospace;
        overflow-x: auto;
        margin: 10px 0;
      }
      .parameter {
        margin-left: 20px;
      }
      .parameter-name {
        font-weight: bold;
      }
      .return-value {
        margin-top: 10px;
      }
      .return-type {
        font-weight: bold;
      }
      code {
        background-color: #f6f8fa;
        padding: 2px 4px;
        border-radius: 3px;
        font-family: monospace;
      }
      nav {
        margin-bottom: 20px;
        padding: 10px;
        background-color: #f6f8fa;
        border-radius: 5px;
      }
      nav a {
        margin-right: 15px;
        text-decoration: none;
        color: #0366d6;
      }
      nav a:hover {
        text-decoration: underline;
      }
      .example {
        background-color: #f8f8f8;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
      }
    </style>
  </head>
  <body>
    <nav>
      <a href="../../../_docs_index.html">Documentation Index</a>
      <a href="./CHANGELOG.html">Changelog</a>
      <a href="./AILESSONS.html">AI Lessons</a>
    </nav>

    <h1>Validation Utils Glossary</h1>

    <div class="function-entry" id="isValidEmail">
      <h2 class="function-name">isValidEmail</h2>
      <div class="function-signature">function isValidEmail(email: string): boolean</div>
      <p>Validates if a string is a valid email address using RFC 5322 compliant regex.</p>

      <div class="parameter">
        <span class="parameter-name">email:</span> The email address to validate
      </div>

      <div class="return-value">
        <span class="return-type">Returns:</span> Boolean indicating if the email is valid
      </div>

      <div class="example">
        <strong>Example:</strong>
        <pre>
isValidEmail('user@example.com'); // true
isValidEmail('invalid-email'); // false</pre
        >
      </div>
    </div>

    <div class="function-entry" id="isValidUrl">
      <h2 class="function-name">isValidUrl</h2>
      <div class="function-signature">function isValidUrl(url: string): boolean</div>
      <p>
        Validates if a string is a valid URL. Accepts relative URLs starting with '/' and rejects
        potentially dangerous protocols.
      </p>

      <div class="parameter"><span class="parameter-name">url:</span> The URL to validate</div>

      <div class="return-value">
        <span class="return-type">Returns:</span> Boolean indicating if the URL is valid
      </div>

      <div class="example">
        <strong>Example:</strong>
        <pre>
isValidUrl('https://example.com'); // true
isValidUrl('/relative/path'); // true
isValidUrl('javascript:alert(1)'); // false</pre
        >
      </div>
    </div>

    <div class="function-entry" id="isValidNorwegianPhone">
      <h2 class="function-name">isValidNorwegianPhone</h2>
      <div class="function-signature">function isValidNorwegianPhone(phone: string): boolean</div>
      <p>
        Validates if a string is a valid Norwegian phone number. Norwegian phone numbers are 8
        digits, optionally with country code.
      </p>

      <div class="parameter">
        <span class="parameter-name">phone:</span> The phone number to validate
      </div>

      <div class="return-value">
        <span class="return-type">Returns:</span> Boolean indicating if the phone number is valid
      </div>

      <div class="example">
        <strong>Example:</strong>
        <pre>
isValidNorwegianPhone('12345678'); // true
isValidNorwegianPhone('+47 12345678'); // true
isValidNorwegianPhone('123456'); // false</pre
        >
      </div>
    </div>

    <div class="function-entry" id="isValidPassword">
      <h2 class="function-name">isValidPassword</h2>
      <div class="function-signature">
        function isValidPassword( password: string, options: { minLength?: number;
        requireUppercase?: boolean; requireLowercase?: boolean; requireNumbers?: boolean;
        requireSpecialChars?: boolean; } = {}, ): boolean
      </div>
      <p>Validates if a string is a valid password based on strength requirements.</p>

      <div class="parameter">
        <span class="parameter-name">password:</span> The password to validate
      </div>
      <div class="parameter">
        <span class="parameter-name">options:</span> Optional configuration for password
        requirements
        <ul>
          <li><code>minLength</code>: Minimum password length (default: 8)</li>
          <li>
            <code>requireUppercase</code>: Require at least one uppercase letter (default: true)
          </li>
          <li>
            <code>requireLowercase</code>: Require at least one lowercase letter (default: true)
          </li>
          <li><code>requireNumbers</code>: Require at least one number (default: true)</li>
          <li>
            <code>requireSpecialChars</code>: Require at least one special character (default: true)
          </li>
        </ul>
      </div>

      <div class="return-value">
        <span class="return-type">Returns:</span> Boolean indicating if the password meets the
        requirements
      </div>

      <div class="example">
        <strong>Example:</strong>
        <pre>
isValidPassword('Passw0rd!'); // true
isValidPassword('password', { requireUppercase: false, requireNumbers: false, requireSpecialChars: false }); // true
isValidPassword('weak'); // false</pre
        >
      </div>
    </div>

    <div class="function-entry" id="matchingFieldsValidator">
      <h2 class="function-name">matchingFieldsValidator</h2>
      <div class="function-signature">
        function matchingFieldsValidator( controlName: string, matchingControlName: string, errorKey
        = 'fieldsMismatch', ): ValidatorFn
      </div>
      <p>Creates a validator function to check if two fields match.</p>

      <div class="parameter">
        <span class="parameter-name">controlName:</span> The name of the first control
      </div>
      <div class="parameter">
        <span class="parameter-name">matchingControlName:</span> The name of the control that should
        match
      </div>
      <div class="parameter">
        <span class="parameter-name">errorKey:</span> The error key to use when validation fails
        (default: 'fieldsMismatch')
      </div>

      <div class="return-value">
        <span class="return-type">Returns:</span> A validator function that can be used in form
        validation
      </div>

      <div class="example">
        <strong>Example:</strong>
        <pre>
// In component class:
this.form = this.formBuilder.group({
  email: ['', Validators.required],
  confirmEmail: ['']
}, {
  validators: matchingFieldsValidator('email', 'confirmEmail', 'emailMismatch')
});</pre
        >
      </div>
    </div>

    <div class="function-entry" id="passwordMatchValidator">
      <h2 class="function-name">passwordMatchValidator</h2>
      <div class="function-signature">
        function passwordMatchValidator( passwordControlName = 'password',
        confirmPasswordControlName = 'confirmPassword', ): ValidatorFn
      </div>
      <p>Creates a validator function specifically for password matching.</p>

      <div class="parameter">
        <span class="parameter-name">passwordControlName:</span> The name of the password control
        (default: 'password')
      </div>
      <div class="parameter">
        <span class="parameter-name">confirmPasswordControlName:</span> The name of the confirm
        password control (default: 'confirmPassword')
      </div>

      <div class="return-value">
        <span class="return-type">Returns:</span> A validator function that can be used in form
        validation
      </div>

      <div class="example">
        <strong>Example:</strong>
        <pre>
// In component class:
this.form = this.formBuilder.group({
  password: ['', Validators.required],
  confirmPassword: ['']
}, {
  validators: passwordMatchValidator()
});</pre
        >
      </div>
    </div>

    <div class="function-entry" id="isValidNorwegianPostalCode">
      <h2 class="function-name">isValidNorwegianPostalCode</h2>
      <div class="function-signature">
        function isValidNorwegianPostalCode(postalCode: string): boolean
      </div>
      <p>
        Validates if a string is a valid Norwegian postal code. Norwegian postal codes are 4 digits.
      </p>

      <div class="parameter">
        <span class="parameter-name">postalCode:</span> The postal code to validate
      </div>

      <div class="return-value">
        <span class="return-type">Returns:</span> Boolean indicating if the postal code is valid
      </div>

      <div class="example">
        <strong>Example:</strong>
        <pre>
isValidNorwegianPostalCode('0123'); // true
isValidNorwegianPostalCode('12345'); // false</pre
        >
      </div>
    </div>

    <div class="function-entry" id="isValidISODate">
      <h2 class="function-name">isValidISODate</h2>
      <div class="function-signature">function isValidISODate(dateString: string): boolean</div>
      <p>Validates if a string is a valid date in ISO format (YYYY-MM-DD).</p>

      <div class="parameter">
        <span class="parameter-name">dateString:</span> The date string to validate
      </div>

      <div class="return-value">
        <span class="return-type">Returns:</span> Boolean indicating if the date is valid
      </div>

      <div class="example">
        <strong>Example:</strong>
        <pre>
isValidISODate('2023-01-01'); // true
isValidISODate('2023-02-30'); // false (February doesn't have 30 days)
isValidISODate('01-01-2023'); // false (wrong format)</pre
        >
      </div>
    </div>

    <div class="function-entry" id="isInRange">
      <h2 class="function-name">isInRange</h2>
      <div class="function-signature">
        function isInRange(value: number, min: number, max: number): boolean
      </div>
      <p>Validates if a number is within a specified range.</p>

      <div class="parameter"><span class="parameter-name">value:</span> The number to validate</div>
      <div class="parameter">
        <span class="parameter-name">min:</span> The minimum allowed value
      </div>
      <div class="parameter">
        <span class="parameter-name">max:</span> The maximum allowed value
      </div>

      <div class="return-value">
        <span class="return-type">Returns:</span> Boolean indicating if the number is within range
      </div>

      <div class="example">
        <strong>Example:</strong>
        <pre>
isInRange(5, 1, 10); // true
isInRange(0, 1, 10); // false</pre
        >
      </div>
    </div>

    <div class="function-entry" id="isAlphanumeric">
      <h2 class="function-name">isAlphanumeric</h2>
      <div class="function-signature">function isAlphanumeric(value: string): boolean</div>
      <p>Validates if a string contains only alphanumeric characters.</p>

      <div class="parameter"><span class="parameter-name">value:</span> The string to validate</div>

      <div class="return-value">
        <span class="return-type">Returns:</span> Boolean indicating if the string is alphanumeric
      </div>

      <div class="example">
        <strong>Example:</strong>
        <pre>
isAlphanumeric('abc123'); // true
isAlphanumeric('abc-123'); // false</pre
        >
      </div>
    </div>

    <div class="function-entry" id="isValidCreditCard">
      <h2 class="function-name">isValidCreditCard</h2>
      <div class="function-signature">function isValidCreditCard(cardNumber: string): boolean</div>
      <p>Validates if a string is a valid credit card number using Luhn algorithm.</p>

      <div class="parameter">
        <span class="parameter-name">cardNumber:</span> The credit card number to validate
      </div>

      <div class="return-value">
        <span class="return-type">Returns:</span> Boolean indicating if the credit card number is
        valid
      </div>

      <div class="example">
        <strong>Example:</strong>
        <pre>
isValidCreditCard('4111 1111 1111 1111'); // true (valid test Visa number)
isValidCreditCard('1234 5678 9012 3456'); // false</pre
        >
      </div>
    </div>
  </body>
</html>
