<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AI Lessons - Core Services</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    h1, h2, h3 {
      color: #2c3e50;
    }
    h1 {
      border-bottom: 2px solid #3498db;
      padding-bottom: 10px;
    }
    h2 {
      margin-top: 30px;
      border-bottom: 1px solid #ddd;
      padding-bottom: 5px;
    }
    code {
      background-color: #f8f8f8;
      padding: 2px 5px;
      border-radius: 3px;
      font-family: 'Courier New', Courier, monospace;
      font-size: 0.9em;
    }
    pre {
      background-color: #f8f8f8;
      padding: 15px;
      border-radius: 5px;
      overflow-x: auto;
      border: 1px solid #ddd;
    }
    pre code {
      background-color: transparent;
      padding: 0;
    }
    .note {
      background-color: #fffacd;
      padding: 15px;
      border-left: 4px solid #ffd700;
      margin: 20px 0;
    }
    .warning {
      background-color: #ffebee;
      padding: 15px;
      border-left: 4px solid #f44336;
      margin: 20px 0;
    }
    table {
      border-collapse: collapse;
      width: 100%;
      margin: 20px 0;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 8px 12px;
      text-align: left;
    }
    th {
      background-color: #f2f2f2;
    }
    .service-section {
      margin-bottom: 40px;
      padding: 20px;
      background-color: #f9f9f9;
      border-radius: 5px;
    }
  </style>
</head>
<body>
  <h1>AI Lessons - Core Services</h1>
  
  <div class="service-section">
    <h2>File Encryption Service</h2>
    <p>The File Encryption Service provides methods for encrypting and decrypting files using the Web Crypto API.</p>
    
    <h3>Implementation</h3>
    <pre><code>
import { Injectable } from '@angular/core';
import { EncryptionService } from './encryption.service';

@Injectable({
  providedIn: 'root'
})
export class FileEncryptionService {
  constructor(private encryptionService: EncryptionService) {}

  async encryptFile(file: File): Promise<{ encryptedData: ArrayBuffer; iv: Uint8Array }> {
    // Convert file to ArrayBuffer
    const fileData = await file.arrayBuffer();
    
    // Generate a random IV
    const iv = crypto.getRandomValues(new Uint8Array(16));
    
    // Encrypt the file data
    const encryptedData = await this.encryptionService.encrypt(fileData, iv);
    
    return { encryptedData, iv };
  }

  async decryptFile(encryptedData: ArrayBuffer, iv: Uint8Array): Promise<ArrayBuffer> {
    return this.encryptionService.decrypt(encryptedData, iv);
  }
}
    </code></pre>
    
    <h3>Key Learnings</h3>
    <ul>
      <li>Use <code>File.arrayBuffer()</code> to efficiently convert files to binary data</li>
      <li>Generate cryptographically secure random values for the initialization vector (IV)</li>
      <li>Separate file-specific encryption logic from the core encryption service</li>
      <li>Return both the encrypted data and the IV, as both are needed for decryption</li>
      <li>Use async/await for cleaner handling of Promise-based crypto operations</li>
    </ul>
  </div>
  
  <div class="service-section">
    <h2>Encryption Service</h2>
    <p>The Encryption Service provides low-level encryption and decryption methods using the Web Crypto API.</p>
    
    <h3>Implementation</h3>
    <pre><code>
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class EncryptionService {
  private readonly algorithm = 'AES-GCM';
  private readonly keyUsages: KeyUsage[] = ['encrypt', 'decrypt'];
  private encryptionKey: CryptoKey | null = null;

  constructor() {
    this.initializeEncryptionKey();
  }

  private async initializeEncryptionKey(): Promise<void> {
    // In a real app, you might retrieve this from a secure storage
    const keyMaterial = new TextEncoder().encode('your-secure-key-material');
    
    // Derive a key using PBKDF2
    const salt = new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8]);
    const importedKey = await crypto.subtle.importKey(
      'raw',
      keyMaterial,
      'PBKDF2',
      false,
      ['deriveKey']
    );
    
    this.encryptionKey = await crypto.subtle.deriveKey(
      {
        name: 'PBKDF2',
        salt,
        iterations: 100000,
        hash: 'SHA-256'
      },
      importedKey,
      { name: this.algorithm, length: 256 },
      false,
      this.keyUsages
    );
  }

  async encrypt(data: ArrayBuffer, iv: Uint8Array): Promise<ArrayBuffer> {
    if (!this.encryptionKey) {
      await this.initializeEncryptionKey();
    }
    
    return crypto.subtle.encrypt(
      {
        name: this.algorithm,
        iv
      },
      this.encryptionKey!,
      data
    );
  }

  async decrypt(encryptedData: ArrayBuffer, iv: Uint8Array): Promise<ArrayBuffer> {
    if (!this.encryptionKey) {
      await this.initializeEncryptionKey();
    }
    
    return crypto.subtle.decrypt(
      {
        name: this.algorithm,
        iv
      },
      this.encryptionKey!,
      encryptedData
    );
  }
}
    </code></pre>
    
    <h3>Key Learnings</h3>
    <ul>
      <li>Use AES-GCM for authenticated encryption</li>
      <li>Derive encryption keys using PBKDF2 with sufficient iterations</li>
      <li>Store the encryption key securely</li>
      <li>Use the Web Crypto API for cryptographic operations</li>
      <li>Handle asynchronous crypto operations properly</li>
    </ul>
    
    <div class="warning">
      <strong>Security Warning:</strong> In a production application, never hardcode encryption keys. Use a secure key management system or derive keys from user credentials.
    </div>
  </div>
  
  <!-- Add more service sections as needed -->
  
</body>
</html>