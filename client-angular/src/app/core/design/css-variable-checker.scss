/**
 * CSS Variable Checker
 * 
 * This utility helps identify hardcoded values in components that should be using design tokens.
 * Import this file in your component's SCSS file to check for common hardcoded values.
 * 
 * Usage:
 * @use 'path/to/css-variable-checker' as checker;
 * 
 * Then use the mixins:
 * @include checker.check-colors();
 * @include checker.check-spacing();
 * @include checker.check-typography();
 */

@use 'design-tokens' as tokens;
@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';

// Color values that should be using design tokens
$hardcoded-colors: (
  '#ffffff': 'var(--color-white)',
  '#fff': 'var(--color-white)',
  '#000000': 'var(--color-black)',
  '#000': 'var(--color-black)',
  '#f5f5f5': 'var(--color-light-gray-1)',
  '#e0e0e0': 'var(--color-light-gray-2)',
  '#cccccc': 'var(--color-medium-gray-1)',
  '#999999': 'var(--color-medium-gray-2)',
  '#666666': 'var(--color-dark-gray-1)',
  '#333333': 'var(--color-dark-gray-2)',
  '#222222': 'var(--color-dark-gray-3)',
  '#ff6b93': 'var(--color-primary)',
  '#ff8fab': 'var(--color-primary-light)',
  '#e6365f': 'var(--color-primary-dark)',
  '#4caf50': 'var(--color-success)',
  '#f44336': 'var(--color-error)',
  '#ff9800': 'var(--color-warning)',
  '#2196f3': 'var(--color-info)',
);

// Spacing values that should be using design tokens
$hardcoded-spacing: (
  '0.25rem': 'var(--spacing-1)',
  '0.5rem': 'var(--spacing-2)',
  '0.75rem': 'var(--spacing-3)',
  '1rem': 'var(--spacing-4)',
  '1.25rem': 'var(--spacing-5)',
  '1.5rem': 'var(--spacing-6)',
  '2rem': 'var(--spacing-8)',
  '2.5rem': 'var(--spacing-10)',
  '3rem': 'var(--spacing-12)',
  '4px': 'var(--spacing-1)',
  '8px': 'var(--spacing-2)',
  '12px': 'var(--spacing-3)',
  '16px': 'var(--spacing-4)',
  '20px': 'var(--spacing-5)',
  '24px': 'var(--spacing-6)',
  '32px': 'var(--spacing-8)',
  '40px': 'var(--spacing-10)',
  '48px': 'var(--spacing-12)',
);

// Typography values that should be using design tokens
$hardcoded-typography: (
  'Inter': 'var(--font-family-base)',
  'Poppins': 'var(--font-family-heading)',
  'Roboto Mono': 'var(--font-family-mono)',
  '0.75rem': 'var(--font-size-xs)',
  '0.875rem': 'var(--font-size-sm)',
  '1rem': 'var(--font-size-base)',
  '1.125rem': 'var(--font-size-lg)',
  '1.25rem': 'var(--font-size-xl)',
  '1.5rem': 'var(--font-size-2xl)',
  '1.875rem': 'var(--font-size-3xl)',
  '2.25rem': 'var(--font-size-4xl)',
  '3rem': 'var(--font-size-5xl)',
  '12px': 'var(--font-size-xs)',
  '14px': 'var(--font-size-sm)',
  '16px': 'var(--font-size-base)',
  '18px': 'var(--font-size-lg)',
  '20px': 'var(--font-size-xl)',
  '24px': 'var(--font-size-2xl)',
  '30px': 'var(--font-size-3xl)',
  '36px': 'var(--font-size-4xl)',
  '48px': 'var(--font-size-5xl)',
  '300': 'var(--font-weight-light)',
  '400': 'var(--font-weight-regular)',
  '500': 'var(--font-weight-medium)',
  '600': 'var(--font-weight-semibold)',
  '700': 'var(--font-weight-bold)',
);

// Mixin to check for hardcoded color values
@mixin check-colors() {
  @each $hardcoded, $token in $hardcoded-colors {
    @warn 'Check for hardcoded color value: #{$hardcoded}, use #{$token} instead';
  }
}

// Mixin to check for hardcoded spacing values
@mixin check-spacing() {
  @each $hardcoded, $token in $hardcoded-spacing {
    @warn 'Check for hardcoded spacing value: #{$hardcoded}, use #{$token} instead';
  }
}

// Mixin to check for hardcoded typography values
@mixin check-typography() {
  @each $hardcoded, $token in $hardcoded-typography {
    @warn 'Check for hardcoded typography value: #{$hardcoded}, use #{$token} instead';
  }
}

// Mixin to check all hardcoded values
@mixin check-all() {
  @include check-colors();
  @include check-spacing();
  @include check-typography();
}
