@use 'sass:math';
@use 'sass:color';

/* ===================================================
 * CORE DESIGN SYSTEM
 * ===================================================
 * This file contains global styles and imports all design system files.
 * It is forwarded by the main design system entry point.
 *
 * IMPORT HIERARCHY:
 * 1. This file imports design-tokens.scss and components.scss
 * 2. It is forwarded by /styles/design-system/index.scss
 * 3. Application code should import from /styles/design-system/index.scss
 *
 * IMPORTANT:
 * - DO NOT import design-tokens.scss directly in application code
 * - Always use @forward instead of @import when creating entry points
 * - Use @use for importing in component styles
 * =================================================== */

/* Import design tokens - this is the ONLY place that should directly import design-tokens.scss */

@forward 'variables';
@forward 'components';

/* Prevent duplicate variable definitions by using 'hide' to hide conflicting variables */
@forward 'typography-mixins';

/* Forward spacing utilities */
@forward 'spacing-utilities';

/* Forward design utilities */
@forward 'bem-utilities';
@forward 'responsive-utilities' hide dark-mode;
@forward 'accessibility-utilities';
@forward 'css-variable-checker';
@forward 'animation-utilities';
@forward 'micro-interactions';
@forward 'dark-mode';

/* Nebular UI integration is handled through the theme module */

/* Reset and base styles */
*,
*::before,
*::after {
  box-sizing: border-box;
}

html {
  font-family: var(--font-family-base);
  line-height: var(--line-height-normal);
  text-size-adjust: 100%;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  scroll-behavior: smooth;
}

body {
  margin: 0;
  font-family: var(--font-family-base);
  font-size: var(--font-size-base);
  font-weight: var(--font-weight-regular);
  line-height: var(--line-height-normal);
  color: var(--color-dark-gray-2);
  background-color: var(--color-light-gray-1);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Typography */
h1,
h2,
h3,
h4,
h5,
h6 {
  margin-top: 0;
  margin-bottom: var(--spacing-3);
  font-family: var(--font-family-heading);
  font-weight: var(--font-weight-semibold);
  line-height: var(--line-height-tight);
  color: var(--color-dark-gray-3);
}

h1 {
  font-size: var(--font-size-4xl);
  font-weight: var(--font-weight-bold);

  @media (max-width: var(--breakpoint-tablet)) {
    font-size: var(--font-size-3xl);
  }
}

h2 {
  font-size: var(--font-size-3xl);
  font-weight: var(--font-weight-bold);

  @media (max-width: var(--breakpoint-tablet)) {
    font-size: var(--font-size-2xl);
  }
}

h3 {
  font-size: var(--font-size-2xl);

  @media (max-width: var(--breakpoint-tablet)) {
    font-size: var(--font-size-xl);
  }
}

h4 {
  font-size: var(--font-size-xl);

  @media (max-width: var(--breakpoint-tablet)) {
    font-size: var(--font-size-lg);
  }
}

h5 {
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-medium);

  @media (max-width: var(--breakpoint-tablet)) {
    font-size: var(--font-size-base);
  }
}

h6 {
  font-size: var(--font-size-base);
  font-weight: var(--font-weight-medium);

  @media (max-width: var(--breakpoint-tablet)) {
    font-size: var(--font-size-sm);
  }
}

p {
  margin-top: 0;
  margin-bottom: var(--spacing-4);
}

a {
  color: var(--color-primary);
  text-decoration: none;
  background-color: transparent;
  transition: color var(--transition-normal) var(--transition-timing-default);

  &:hover {
    color: var(--color-primary-dark);
    text-decoration: underline;
  }

  &:focus-visible {
    outline: 2px solid rgba(var(--color-primary), 0.5);
    outline-offset: 2px;
  }
}

/* Lists */
ul,
ol {
  padding-left: var(--spacing-5);
  margin-top: 0;
  margin-bottom: var(--spacing-4);
}

/* Code */
code,
pre {
  font-family: 'Roboto Mono', monospace;
  font-size: var(--font-size-sm);
}

code {
  color: var(--color-primary-dark);
  word-wrap: break-word;
}

pre {
  display: block;
  margin-top: 0;
  margin-bottom: var(--spacing-4) /* TODO: Verify correct CSS variable */;
  overflow: auto;
  font-size: var(--font-size-sm) /* TODO: Verify correct CSS variable */;
  color: var(--color-dark-gray-2) /* TODO: Verify correct CSS variable */;
  background-color: var(--color-light-gray-2) /* TODO: Verify correct CSS variable */;
  border-radius: var(--border-radius-md) /* TODO: Verify correct CSS variable */;
  padding: var(--spacing-3) /* TODO: Verify correct CSS variable */;
}

// Images
img {
  vertical-align: middle;
  border-style: none;
  max-width: 100%;
  height: auto;
}

// Tables
table {
  width: 100%;
  margin-bottom: var(--spacing-4) /* TODO: Verify correct CSS variable */;
  color: var(--color-dark-gray-2) /* TODO: Verify correct CSS variable */;
  border-collapse: collapse;
}

th {
  text-align: inherit;
  padding: var(--spacing-3) /* TODO: Verify correct CSS variable */;
  vertical-align: bottom;
  border-bottom: 2px solid var(--color-light-gray-2) /* TODO: Verify correct CSS variable */;
  font-weight: var(--font-weight-semibold) /* TODO: Verify correct CSS variable */;
}

td {
  padding: var(--spacing-3) /* TODO: Verify correct CSS variable */;
  vertical-align: top;
  border-top: 1px solid var(--color-light-gray-2) /* TODO: Verify correct CSS variable */;
}

// Container
.container {
  width: 100%;
  padding-right: var(--spacing-4) /* TODO: Verify correct CSS variable */;
  padding-left: var(--spacing-4) /* TODO: Verify correct CSS variable */;
  margin-right: auto;
  margin-left: auto;

  @media (min-width: var(--breakpoint-mobile) /* TODO: Verify correct CSS variable */) {
    max-width: var(--container-sm) /* TODO: Verify correct CSS variable */;
  }

  @media (min-width: var(--breakpoint-tablet) /* TODO: Verify correct CSS variable */) {
    max-width: var(--container-md) /* TODO: Verify correct CSS variable */;
  }

  @media (min-width: var(--breakpoint-desktop) /* TODO: Verify correct CSS variable */) {
    max-width: var(--container-lg) /* TODO: Verify correct CSS variable */;
  }

  @media (min-width: var(--breakpoint-desktop-large) /* TODO: Verify correct CSS variable */) {
    max-width: var(--container-xl) /* TODO: Verify correct CSS variable */;
  }

  @media (min-width: var(--breakpoint-desktop-xl) /* TODO: Verify correct CSS variable */) {
    max-width: var(--container-2xl) /* TODO: Verify correct CSS variable */;
  }
}

.container-fluid {
  width: 100%;
  padding-right: var(--spacing-4) /* TODO: Verify correct CSS variable */;
  padding-left: var(--spacing-4) /* TODO: Verify correct CSS variable */;
  margin-right: auto;
  margin-left: auto;
}

// Grid system
.row {
  display: flex;
  flex-wrap: wrap;
  margin-right: calc(-1 * var(--grid-gutter-width) /* TODO: Verify correct CSS variable */ / 2);
  margin-left: calc(-1 * var(--grid-gutter-width) /* TODO: Verify correct CSS variable */ / 2);
}

$grid-columns: 12 !default;

.col {
  flex-basis: 0;
  flex-grow: 1;
  max-width: 100%;
  padding-right: calc(var(--grid-gutter-width) /* TODO: Verify correct CSS variable */ / 2);
  padding-left: calc(var(--grid-gutter-width) /* TODO: Verify correct CSS variable */ / 2);
}

@for $i from 1 through $grid-columns {
  .col-#{$i} {
    flex: 0 0 calc(($i / $grid-columns) * 100%);
    max-width: calc(($i / $grid-columns) * 100%);
    padding-right: calc(var(--grid-gutter-width) / 2);
    padding-left: calc(var(--grid-gutter-width) / 2);
  }
}

@media (min-width: var(--breakpoint-mobile)) {
  @for $i from 1 through $grid-columns {
    .col-sm-#{$i} {
      flex: 0 0 calc(($i / $grid-columns) * 100%);
      max-width: calc(($i / $grid-columns) * 100%);
    }
  }
}

@media (min-width: var(--breakpoint-tablet)) {
  @for $i from 1 through $grid-columns {
    .col-md-#{$i} {
      flex: 0 0 calc(($i / $grid-columns) * 100%);
      max-width: calc(($i / $grid-columns) * 100%);
    }
  }
}

@media (min-width: var(--breakpoint-desktop)) {
  @for $i from 1 through $grid-columns {
    .col-lg-#{$i} {
      flex: 0 0 calc(($i / $grid-columns) * 100%);
      max-width: calc(($i / $grid-columns) * 100%);
    }
  }
}

@media (min-width: var(--breakpoint-desktop-large)) {
  @for $i from 1 through $grid-columns {
    .col-xl-#{$i} {
      flex: 0 0 calc(($i / $grid-columns) * 100%);
      max-width: calc(($i / $grid-columns) * 100%);
    }
  }
}

// Responsive utilities
.d-none {
  display: none !important;
}

.d-block {
  display: block !important;
}

.d-flex {
  display: flex !important;
}

.d-inline-flex {
  display: inline-flex !important;
}

.d-grid {
  display: grid !important;
}

@media (min-width: var(--breakpoint-mobile)) {
  .d-sm-none {
    display: none !important;
  }
  .d-sm-block {
    display: block !important;
  }
  .d-sm-flex {
    display: flex !important;
  }
  .d-sm-inline-flex {
    display: inline-flex !important;
  }
  .d-sm-grid {
    display: grid !important;
  }
}

@media (min-width: var(--breakpoint-tablet)) {
  .d-md-none {
    display: none !important;
  }
  .d-md-block {
    display: block !important;
  }
  .d-md-flex {
    display: flex !important;
  }
  .d-md-inline-flex {
    display: inline-flex !important;
  }
  .d-md-grid {
    display: grid !important;
  }
}

@media (min-width: var(--breakpoint-desktop)) {
  .d-lg-none {
    display: none !important;
  }
  .d-lg-block {
    display: block !important;
  }
  .d-lg-flex {
    display: flex !important;
  }
  .d-lg-inline-flex {
    display: inline-flex !important;
  }
  .d-lg-grid {
    display: grid !important;
  }
}

@media (min-width: var(--breakpoint-desktop-large)) {
  .d-xl-none {
    display: none !important;
  }
  .d-xl-block {
    display: block !important;
  }
  .d-xl-flex {
    display: flex !important;
  }
  .d-xl-inline-flex {
    display: inline-flex !important;
  }
  .d-xl-grid {
    display: grid !important;
  }
}

// Flex utilities
.flex-row {
  flex-direction: row !important;
}

.flex-column {
  flex-direction: column !important;
}

.flex-wrap {
  flex-wrap: wrap !important;
}

.flex-nowrap {
  flex-wrap: nowrap !important;
}

.justify-content-start {
  justify-content: flex-start !important;
}

.justify-content-end {
  justify-content: flex-end !important;
}

.justify-content-center {
  justify-content: center !important;
}

.justify-content-between {
  justify-content: space-between !important;
}

.justify-content-around {
  justify-content: space-around !important;
}

.align-items-start {
  align-items: flex-start !important;
}

.align-items-end {
  align-items: flex-end !important;
}

.align-items-center {
  align-items: center !important;
}

.align-items-baseline {
  align-items: baseline !important;
}

.align-items-stretch {
  align-items: stretch !important;
}

// Animations
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideInUp {
  from {
    transform: translate3d(0, 100%, 0);
    visibility: visible;
  }
  to {
    transform: translate3d(0, 0, 0);
  }
}

@keyframes slideInDown {
  from {
    transform: translate3d(0, -100%, 0);
    visibility: visible;
  }
  to {
    transform: translate3d(0, 0, 0);
  }
}

@keyframes slideInLeft {
  from {
    transform: translate3d(-100%, 0, 0);
    visibility: visible;
  }
  to {
    transform: translate3d(0, 0, 0);
  }
}

@keyframes slideInRight {
  from {
    transform: translate3d(100%, 0, 0);
    visibility: visible;
  }
  to {
    transform: translate3d(0, 0, 0);
  }
}

.animate-fade-in {
  animation-name: fadeIn;
  animation-duration: var(--animation-duration-normal) /* TODO: Verify correct CSS variable */;
  animation-timing-function: var(--transition-timing-default)
    /* TODO: Verify correct CSS variable */;
}

.animate-slide-up {
  animation-name: slideInUp;
  animation-duration: var(--animation-duration-normal) /* TODO: Verify correct CSS variable */;
  animation-timing-function: var(--transition-timing-default)
    /* TODO: Verify correct CSS variable */;
}

.animate-slide-down {
  animation-name: slideInDown;
  animation-duration: var(--animation-duration-normal) /* TODO: Verify correct CSS variable */;
  animation-timing-function: var(--transition-timing-default)
    /* TODO: Verify correct CSS variable */;
}

.animate-slide-left {
  animation-name: slideInLeft;
  animation-duration: var(--animation-duration-normal) /* TODO: Verify correct CSS variable */;
  animation-timing-function: var(--transition-timing-default)
    /* TODO: Verify correct CSS variable */;
}

.animate-slide-right {
  animation-name: slideInRight;
  animation-duration: var(--animation-duration-normal) /* TODO: Verify correct CSS variable */;
  animation-timing-function: var(--transition-timing-default)
    /* TODO: Verify correct CSS variable */;
}

// App-specific global styles
.app-container {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

.main-content {
  flex: 1;
  padding: var(--spacing-6) /* TODO: Verify correct CSS variable */ 0;
}

.section-title {
  margin-bottom: var(--spacing-6) /* TODO: Verify correct CSS variable */;
  position: relative;

  &:after {
    content: '';
    position: absolute;
    bottom: -var(--spacing-3) /* TODO: Verify correct CSS variable */;
    left: 0;
    width: 60px;
    height: 4px;
    background-color: var(--color-primary);
    border-radius: var(--border-radius-full) /* TODO: Verify correct CSS variable */;
  }
}

// Accessibility
.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Focus styles for keyboard navigation
:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

// Width and height utilities
.w-100 {
  width: 100% !important;
}

.h-100 {
  height: 100% !important;
}

.mw-100 {
  max-width: 100% !important;
}

.mh-100 {
  max-height: 100% !important;
}

// Text utilities
.text-center {
  text-align: center !important;
}

.text-left {
  text-align: left !important;
}

.text-right {
  text-align: right !important;
}

.text-justify {
  text-align: justify !important;
}

.text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.text-nowrap {
  white-space: nowrap !important;
}

.text-lowercase {
  text-transform: lowercase !important;
}

.text-uppercase {
  text-transform: uppercase !important;
}

.text-capitalize {
  text-transform: capitalize !important;
}

// Text colors
.text-primary {
  color: var(--color-primary) !important;
}

.text-secondary {
  color: var(--color-secondary) /* TODO: Verify correct CSS variable */ !important;
}

.text-success {
  color: var(--color-success) /* TODO: Verify correct CSS variable */ !important;
}

.text-warning {
  color: var(--color-warning) /* TODO: Verify correct CSS variable */ !important;
}

.text-danger {
  color: var(--color-error) /* TODO: Verify correct CSS variable */ !important;
}

.text-info {
  color: var(--color-info) /* TODO: Verify correct CSS variable */ !important;
}

.text-light {
  color: var(--color-light-gray-1) /* TODO: Verify correct CSS variable */ !important;
}

.text-dark {
  color: var(--color-dark-gray-3) /* TODO: Verify correct CSS variable */ !important;
}

.text-muted {
  color: var(--color-dark-gray-1) /* TODO: Verify correct CSS variable */ !important;
}

.text-white {
  color: var(--color-white) /* TODO: Verify correct CSS variable */ !important;
}

// Background colors
.bg-primary {
  background-color: var(--color-primary) !important;
}

.bg-secondary {
  background-color: var(--color-secondary) /* TODO: Verify correct CSS variable */ !important;
}

.bg-success {
  background-color: var(--color-success) /* TODO: Verify correct CSS variable */ !important;
}

.bg-warning {
  background-color: var(--color-warning) /* TODO: Verify correct CSS variable */ !important;
}

.bg-danger {
  background-color: var(--color-error) /* TODO: Verify correct CSS variable */ !important;
}

.bg-info {
  background-color: var(--color-info) /* TODO: Verify correct CSS variable */ !important;
}

.bg-light {
  background-color: var(--color-light-gray-1) /* TODO: Verify correct CSS variable */ !important;
}

.bg-dark {
  background-color: var(--color-dark-gray-3) /* TODO: Verify correct CSS variable */ !important;
}

.bg-white {
  background-color: var(--color-white) /* TODO: Verify correct CSS variable */ !important;
}

// Border utilities
.border {
  border: 1px solid var(--color-light-gray-2) /* TODO: Verify correct CSS variable */ !important;
}

.border-top {
  border-top: 1px solid var(--color-light-gray-2) /* TODO: Verify correct CSS variable */ !important;
}

.border-right {
  border-right: 1px solid var(--color-light-gray-2) /* TODO: Verify correct CSS variable */ !important;
}

.border-bottom {
  border-bottom: 1px solid var(--color-light-gray-2) /* TODO: Verify correct CSS variable */ !important;
}

.border-left {
  border-left: 1px solid var(--color-light-gray-2) /* TODO: Verify correct CSS variable */ !important;
}

.border-0 {
  border: 0 !important;
}

.rounded {
  border-radius: var(--border-radius-md) /* TODO: Verify correct CSS variable */ !important;
}

.rounded-sm {
  border-radius: var(--border-radius-sm) /* TODO: Verify correct CSS variable */ !important;
}

.rounded-lg {
  border-radius: var(--border-radius-lg) /* TODO: Verify correct CSS variable */ !important;
}

.rounded-circle {
  border-radius: 50% !important;
}

.rounded-pill {
  border-radius: var(--border-radius-full) /* TODO: Verify correct CSS variable */ !important;
}

// Shadow utilities
.shadow-none {
  box-shadow: none !important;
}

.shadow-sm {
  box-shadow: var(--shadow-sm) /* TODO: Verify correct CSS variable */ !important;
}

.shadow {
  box-shadow: var(--shadow-md) /* TODO: Verify correct CSS variable */ !important;
}

.shadow-lg {
  box-shadow: var(--shadow-lg) /* TODO: Verify correct CSS variable */ !important;
}

// Dark mode support
@media (prefers-color-scheme: dark) {
  body.dark-mode-enabled {
    color: var(--color-light-gray-1) /* TODO: Verify correct CSS variable */;
    background-color: var(--color-dark-gray-3) /* TODO: Verify correct CSS variable */;

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      color: var(--color-white) /* TODO: Verify correct CSS variable */;
    }

    a {
      color: var(--color-primary-light); // TODO: Set a valid dark mode link color

      &:hover {
        // TODO: Set a valid hover color for links in dark mode
        // color: var(--color-primary-lighter);
      }
    }

    .card {
      background-color: var(--color-dark-gray-2) /* TODO: Verify correct CSS variable */;
      border-color: var(--color-dark-gray-1) /* TODO: Verify correct CSS variable */;

      .card-header,
      .card-footer {
        background-color: var(--color-dark-gray-2) /* TODO: Verify correct CSS variable */;
        border-color: var(--color-dark-gray-1) /* TODO: Verify correct CSS variable */;
      }
    }

    .form-control {
      color: var(--color-light-gray-1) /* TODO: Verify correct CSS variable */;
      background-color: var(--color-dark-gray-2) /* TODO: Verify correct CSS variable */;
      border-color: var(--color-dark-gray-1) /* TODO: Verify correct CSS variable */;

      &:focus {
        color: var(--color-white) /* TODO: Verify correct CSS variable */;
        background-color: var(--color-dark-gray-2) /* TODO: Verify correct CSS variable */;
      }

      &::placeholder {
        color: var(--color-medium-gray-2) /* TODO: Verify correct CSS variable */;
      }
    }

    .modal-content {
      background-color: var(--color-dark-gray-2) /* TODO: Verify correct CSS variable */;
      border-color: var(--color-dark-gray-1) /* TODO: Verify correct CSS variable */;
    }

    .modal-header,
    .modal-footer {
      border-color: var(--color-dark-gray-1) /* TODO: Verify correct CSS variable */;
    }

    .table {
      color: var(--color-light-gray-1) /* TODO: Verify correct CSS variable */;

      th,
      td {
        border-color: var(--color-dark-gray-1) /* TODO: Verify correct CSS variable */;
      }
    }

    .text-muted {
      color: var(--color-medium-gray-2) /* TODO: Verify correct CSS variable */ !important;
    }

    .border {
      border-color: var(--color-dark-gray-1) /* TODO: Verify correct CSS variable */ !important;
    }

    .border-top {
      border-top-color: var(--color-dark-gray-1) /* TODO: Verify correct CSS variable */ !important;
    }

    .border-right {
      border-right-color: var(--color-dark-gray-1) /* TODO: Verify correct CSS variable */ !important;
    }

    .border-bottom {
      border-bottom-color: var(--color-dark-gray-1) /* TODO: Verify correct CSS variable */ !important;
    }

    .border-left {
      border-left-color: var(--color-dark-gray-1) /* TODO: Verify correct CSS variable */ !important;
    }
  }
}
