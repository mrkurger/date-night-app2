/**
 * Accessibility Utilities
 * 
 * This file provides mixins and functions to help implement accessible design.
 * It follows WCAG 2.1 AA standards.
 * 
 * Usage:
 * @use 'path/to/accessibility-utilities' as a11y;
 * 
 * .element {
 *   @include a11y.visually-hidden;
 * }
 * 
 * .link {
 *   @include a11y.focus-visible;
 * }
 */

/// Visually hidden
/// Hides content visually but keeps it accessible to screen readers
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/// Focus visible
/// Adds a focus outline that is only visible when using keyboard navigation
@mixin focus-visible {
  &:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
    box-shadow: 0 0 0 4px rgba(var(--color-primary), 0.3);
  }
}

/// Skip link
/// Creates a skip link that is only visible when focused
@mixin skip-link {
  position: absolute;
  top: -40px;
  left: 0;
  background: var(--color-white);
  color: var(--color-primary);
  padding: 8px;
  z-index: 100;

  &:focus {
    top: 0;
  }
}

/// Screen reader only
/// Alternative to visually-hidden
@mixin sr-only {
  @include visually-hidden;
}

/// Not for screen readers
/// Hides content from screen readers but keeps it visually visible
@mixin not-sr-only {
  position: static;
  width: auto;
  height: auto;
  padding: 0;
  margin: 0;
  overflow: visible;
  clip: auto;
  white-space: normal;
}

/// High contrast mode
/// Adds styles for Windows high contrast mode
@mixin high-contrast-mode {
  @media (forced-colors: active) {
    @content;
  }
}

/// Reduced motion (moved to responsive-utilities.scss)
/// This mixin has been moved to responsive-utilities.scss to avoid duplication
/// @deprecated Use the mixin from responsive-utilities.scss instead

/// Contrast checker
/// Checks if the contrast ratio between two colors meets WCAG AA standards
/// @param {Color} $foreground - Foreground color (SCSS variable)
/// @param {Color} $background - Background color (SCSS variable)
/// @return {Boolean} Whether the contrast ratio meets WCAG AA standards
@function meets-contrast($foreground, $background) {
  $luminance1: luminance($foreground);
  $luminance2: luminance($background);
  $ratio: ($luminance1 + 0.05) / ($luminance2 + 0.05);

  @if $luminance2 > $luminance1 {
    $ratio: 1 / $ratio;
  }

  @return $ratio >= 4.5;
}

/// Luminance
/// Calculates the relative luminance of a color
/// @param {Color} $color - Color (SCSS variable)
/// @return {Number} Relative luminance
@function luminance($color) {
  $r: red($color) / 255;
  $g: green($color) / 255;
  $b: blue($color) / 255;
  $r: if($r <= 0.03928, $r / 12.92, pow(($r + 0.055) / 1.055, 2.4));
  $g: if($g <= 0.03928, $g / 12.92, pow(($g + 0.055) / 1.055, 2.4));
  $b: if($b <= 0.03928, $b / 12.92, pow(($b + 0.055) / 1.055, 2.4));
  @return 0.2126 * $r + 0.7152 * $g + 0.0722 * $b;
}

/// Power function
/// @param {Number} $base - Base
/// @param {Number} $exponent - Exponent
/// @return {Number} Result
@function pow($base, $exponent) {
  @if $exponent == 0 {
    @return 1;
  }
  $result: 1;
  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $result: $result * $base;
    }
  } @else {
    @for $i from 1 through abs($exponent) {
      $result: $result / $base;
    }
  }
  @return $result;
}
