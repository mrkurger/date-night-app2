/**
 * Dark Mode Utilities
 * 
 * This file provides mixins and functions to help implement dark mode.
 * It uses the design tokens defined in the design system.
 * 
 * Usage:
 * @use 'path/to/dark-mode' as dark;
 * 
 * .element {
 *   color: var(--color-dark-gray-3);
 *   background-color: var(--color-white);
 *   
 *   @include dark.mode {
 *     color: var(--color-light-gray-1);
 *     background-color: var(--color-dark-gray-3);
 *   }
 * }
 */

@use 'sass:color';
@use 'sass:map';
@use '@nebular/theme/styles/theming' as *;

// Dark mode utilities using Nebular theme variables
$color-map: (
  // Background colors
  '--color-white': var(--color-dark-gray-3),
  '--color-light-gray-1': var(--color-dark-gray-2),
  '--color-light-gray-2': var(--color-dark-gray-1),
  // Text colors
  '--color-dark-gray-3': var(--color-light-gray-1),
  '--color-dark-gray-2': var(--color-light-gray-2),
  '--color-dark-gray-1': var(--color-medium-gray-1),
  // Border colors
  '--color-medium-gray-1': var(--color-dark-gray-2),
  // Shadows
  '--shadow-sm': var(--shadow-dark-sm),
  '--shadow-md': var(--shadow-dark-md),
  '--shadow-lg': var(--shadow-dark-lg)
);

// Dark mode mixin
@mixin dark-mode {
  .dark-mode & {
    @content;
  }

  @media (prefers-color-scheme: dark) {
    body:not(.light-mode) & {
      @content;
    }
  }
}

// Light mode mixin
// Applies styles when light mode is active
// Renamed to avoid conflict with responsive-utilities.scss
@mixin light-theme {
  body:not(.dark-mode) & {
    @content;
  }

  @media (prefers-color-scheme: light) {
    body:not(.dark-mode) & {
      @content;
    }
  }
}

// Get dark mode color
// Returns the dark mode equivalent of a light mode color
@function color($light-color) {
  @if map.has-key($color-map, $light-color) {
    @return map.get($color-map, $light-color);
  } @else {
    @return $light-color;
  }
}

// Dark mode color mixin
// Applies a color property in light mode and its dark mode equivalent in dark mode
@mixin color-mode($property, $light-color) {
  & {
    #{$property}: $light-color;
  }

  @include dark-mode {
    #{$property}: color($light-color);
  }
}

// Dark mode background mixin
// Applies a background-color in light mode and its dark mode equivalent in dark mode
@mixin background($light-color) {
  @include color-mode('background-color', $light-color);
}

// Dark mode text mixin
// Applies a color in light mode and its dark mode equivalent in dark mode
@mixin text($light-color) {
  @include color-mode('color', $light-color);
}

// Dark mode border mixin
// Applies a border-color in light mode and its dark mode equivalent in dark mode
@mixin border($light-color) {
  @include color-mode('border-color', $light-color);
}

// Dark mode shadow mixin
// Applies a box-shadow in light mode and a darker shadow in dark mode
@mixin shadow($shadow) {
  & {
    box-shadow: $shadow;
  }

  @include dark-mode {
    box-shadow: 0 0 0 1px rgba(var(--color-white), 0.1);
  }
}

// Dark mode root variables
// Sets CSS variables for dark mode
@mixin root-variables {
  :root {
    // Light mode variables
    --color-bg-primary: var(--color-white);
    --color-bg-secondary: var(--color-light-gray-1);
    --color-bg-tertiary: var(--color-light-gray-2);
    --color-text-primary: var(--color-dark-gray-3);
    --color-text-secondary: var(--color-dark-gray-2);
    --color-text-tertiary: var(--color-dark-gray-1);
    --color-border-primary: var(--color-light-gray-2);
    --color-border-secondary: var(--color-medium-gray-1);
    --shadow-card: var(--shadow-sm);
    --shadow-dropdown: var(--shadow-md);
    --shadow-modal: var(--shadow-lg);
  }

  .dark-mode {
    // Dark mode variables
    --color-bg-primary: var(--color-dark-gray-3);
    --color-bg-secondary: var(--color-dark-gray-2);
    --color-bg-tertiary: var(--color-dark-gray-1);
    --color-text-primary: var(--color-light-gray-1);
    --color-text-secondary: var(--color-light-gray-2);
    --color-text-tertiary: var(--color-medium-gray-1);
    --color-border-primary: var(--color-dark-gray-1);
    --color-border-secondary: var(--color-dark-gray-2);
    --shadow-card: 0 0 0 1px rgba(255, 255, 255, 0.1);
    --shadow-dropdown: 0 0 0 1px rgba(255, 255, 255, 0.1), 0 4px 6px rgba(0, 0, 0, 0.3);
    --shadow-modal: 0 0 0 1px rgba(255, 255, 255, 0.1), 0 10px 15px rgba(0, 0, 0, 0.3);
  }

  @media (prefers-color-scheme: dark) {
    body:not(.light-mode) {
      // Dark mode variables
      --color-bg-primary: var(--color-dark-gray-3);
      --color-bg-secondary: var(--color-dark-gray-2);
      --color-bg-tertiary: var(--color-dark-gray-1);
      --color-text-primary: var(--color-light-gray-1);
      --color-text-secondary: var(--color-light-gray-2);
      --color-text-tertiary: var(--color-medium-gray-1);
      --color-border-primary: var(--color-dark-gray-1);
      --color-border-secondary: var(--color-dark-gray-2);
      --shadow-card: 0 0 0 1px rgba(255, 255, 255, 0.1);
      --shadow-dropdown: 0 0 0 1px rgba(255, 255, 255, 0.1), 0 4px 6px rgba(0, 0, 0, 0.3);
      --shadow-modal: 0 0 0 1px rgba(255, 255, 255, 0.1), 0 10px 15px rgba(0, 0, 0, 0.3);
    }
  }
}

// Dark mode specific styles
[data-theme='dark'] {
  // Background colors
  .nb-bg-dark {
    background-color: nb-theme(background-basic-color-1);
  }

  .nb-bg-dark-accent {
    background-color: nb-theme(background-basic-color-2);
  }

  // Text colors
  .nb-text-dark {
    color: nb-theme(text-basic-color);
  }

  .nb-text-dark-hint {
    color: nb-theme(text-hint-color);
  }

  // Border colors
  .nb-border-dark {
    border-color: nb-theme(border-basic-color-3);
  }

  // Card styles
  nb-card {
    background-color: nb-theme(card-background-color);
    border-color: nb-theme(card-border-color);
  }

  // Button styles
  [nbButton] {
    &.appearance-filled {
      background-color: nb-theme(button-filled-background-color);
      border-color: nb-theme(button-filled-border-color);
      color: nb-theme(button-filled-text-color);

      &:hover {
        background-color: nb-theme(button-filled-hover-background-color);
        border-color: nb-theme(button-filled-hover-border-color);
      }
    }

    &.appearance-outline {
      background-color: nb-theme(button-outline-background-color);
      border-color: nb-theme(button-outline-border-color);
      color: nb-theme(button-outline-text-color);

      &:hover {
        background-color: nb-theme(button-outline-hover-background-color);
        border-color: nb-theme(button-outline-hover-border-color);
      }
    }
  }

  // Form styles
  nb-form-field {
    input,
    textarea,
    select {
      background-color: nb-theme(input-basic-background-color);
      border-color: nb-theme(input-basic-border-color);
      color: nb-theme(input-basic-text-color);

      &:focus {
        border-color: nb-theme(input-basic-focus-border-color);
      }
    }
  }

  // Icon colors
  nb-icon {
    color: nb-theme(text-basic-color);
  }
}

// Theme transition
.nb-theme-transition {
  transition:
    background-color 0.2s ease-in-out,
    color 0.2s ease-in-out,
    border-color 0.2s ease-in-out,
    box-shadow 0.2s ease-in-out;
}
