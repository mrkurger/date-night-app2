/**
 * Micro-Interactions Utilities
 * 
 * This file provides mixins and functions to help implement micro-interactions.
 * Micro-interactions are small animations that provide feedback to the user.
 * 
 * Usage:
 * @use 'src/app/core/design/main' as ds;
 * 
 * .button {
 *   @include ds.hover-scale;
 * }
 * 
 * .card {
 *   @include ds.hover-lift;
 * }
 * 
 * .form-field {
 *   @include ds.focus-highlight;
 * }
 * 
 * .loading-button {
 *   @include ds.loading-button;
 * }
 * 
 * .page-transition {
 *   @include ds.page-transition;
 * }
 * 
 * Note: All micro-interactions respect the user's prefers-reduced-motion setting.
 */


@use 'animation-utilities' as animation;

// Hover scale
// Scales an element slightly on hover
@mixin hover-scale(var(--scale) /* TODO: Verify correct CSS variable */: 1.05, var(--duration) /* TODO: Verify correct CSS variable */: var(--transition-fast)) {
  & {
    transition: transform var(--duration) /* TODO: Verify correct CSS variable */ var(--transition-timing-default);
  }

  &:hover {
    transform: scale(var(--scale) /* TODO: Verify correct CSS variable */);
  }

  @include animation.respect-reduced-motion;
}

// Hover lift
// Lifts an element slightly and adds a shadow on hover
@mixin hover-lift(var(--y) /* TODO: Verify correct CSS variable */: -4px, var(--shadow) /* TODO: Verify correct CSS variable */: var(--shadow-md), var(--duration) /* TODO: Verify correct CSS variable */: var(--transition-fast)) {
  transition:
    transform var(--duration) /* TODO: Verify correct CSS variable */ var(--transition-timing-default),
    box-shadow var(--duration) /* TODO: Verify correct CSS variable */ var(--transition-timing-default);

  &:hover {
    transform: translateY(var(--y) /* TODO: Verify correct CSS variable */);
    box-shadow: var(--shadow) /* TODO: Verify correct CSS variable */;
  }

  @include animation.respect-reduced-motion;
}

// Hover color shift
// Changes the color of an element on hover
@mixin hover-color-shift(
) {
  & {
    #{var(--property) /* TODO: Verify correct CSS variable */}: var(--from) /* TODO: Verify correct CSS variable */;
    transition: #{var(--property) /* TODO: Verify correct CSS variable */} var(--duration) /* TODO: Verify correct CSS variable */ var(--transition-timing-default);
  }

  &:hover {
    #{var(--property) /* TODO: Verify correct CSS variable */}: var(--to) /* TODO: Verify correct CSS variable */;
  }

  @include animation.respect-reduced-motion;
}

// Click ripple
// Adds a ripple effect on click
@mixin click-ripple(var(--color) /* TODO: Verify correct CSS variable */: var(--color-primary), var(--duration) /* TODO: Verify correct CSS variable */: var(--transition-normal)) {
  & {
    position: relative;
    overflow: hidden;
  }

  &::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 5px;
    height: 5px;
    background: rgba(var(--color) /* TODO: Verify correct CSS variable */, 0.3);
    opacity: 0;
    border-radius: 100%;
    transform: scale(1, 1) translate(-50%, -50%);
    transform-origin: 50% 50%;
  }

  &:active::after {
    animation: ripple var(--duration) /* TODO: Verify correct CSS variable */ ease-out;
  }

  @include animation.respect-reduced-motion;
}

// Focus highlight
// Adds a highlight effect on focus
@mixin focus-highlight(var(--color) /* TODO: Verify correct CSS variable */: var(--color-primary), var(--duration) /* TODO: Verify correct CSS variable */: var(--transition-fast)) {
  transition: box-shadow var(--duration) /* TODO: Verify correct CSS variable */ var(--transition-timing-default);

  &:focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px rgba(var(--color) /* TODO: Verify correct CSS variable */, 0.5);
  }

  @include animation.respect-reduced-motion;
}

// Loading spinner
// Adds a loading spinner
@mixin loading-spinner(
) {
  &::before {
    content: '';
    box-sizing: border-box;
    position: absolute;
    top: 50%;
    left: 50%;
    width: var(--size) /* TODO: Verify correct CSS variable */;
    height: var(--size) /* TODO: Verify correct CSS variable */;
    margin-top: -var(--size) /* TODO: Verify correct CSS variable */ / 2;
    margin-left: -var(--size) /* TODO: Verify correct CSS variable */ / 2;
    border-radius: 50%;
    border: var(--border-width) /* TODO: Verify correct CSS variable */ solid transparent;
    border-top-color: var(--color) /* TODO: Verify correct CSS variable */;
    animation: spinner var(--duration) /* TODO: Verify correct CSS variable */ linear infinite;
  }

  @include animation.respect-reduced-motion;
}

// Success checkmark
// Adds a success checkmark animation
@mixin success-checkmark(
) {
  position: relative;

  &::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: var(--size) /* TODO: Verify correct CSS variable */;
    height: var(--size) /* TODO: Verify correct CSS variable */ / 2;
    margin-top: -var(--size) /* TODO: Verify correct CSS variable */ / 4;
    margin-left: -var(--size) /* TODO: Verify correct CSS variable */ / 4;
    border-right: 2px solid var(--color) /* TODO: Verify correct CSS variable */;
    border-bottom: 2px solid var(--color) /* TODO: Verify correct CSS variable */;
    transform: rotate(45deg) scale(0);
    animation: checkmark var(--duration) /* TODO: Verify correct CSS variable */ var(--transition-timing-default) forwards;
  }

  @include animation.respect-reduced-motion;
}

// Error shake
// Adds a shake animation for error states
@mixin error-shake(var(--duration) /* TODO: Verify correct CSS variable */: 0.4s) {
  animation: shake var(--duration) /* TODO: Verify correct CSS variable */ var(--transition-timing-default);

  @include animation.respect-reduced-motion;
}

// Notification badge
// Adds a pulsing notification badge
@mixin notification-badge(var(--size) /* TODO: Verify correct CSS variable */: 8px, var(--color) /* TODO: Verify correct CSS variable */: var(--color-error), var(--duration) /* TODO: Verify correct CSS variable */: 1.5s) {
  position: relative;

  &::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: var(--size) /* TODO: Verify correct CSS variable */;
    height: var(--size) /* TODO: Verify correct CSS variable */;
    background-color: var(--color) /* TODO: Verify correct CSS variable */;
    border-radius: 50%;
    animation: pulse-effect var(--duration) /* TODO: Verify correct CSS variable */ var(--transition-timing-default) infinite;
  }

  @include animation.respect-reduced-motion;
}

// Typing indicator
// Adds a typing indicator animation
@mixin typing-indicator(var(--color) /* TODO: Verify correct CSS variable */: var(--color-primary), var(--duration) /* TODO: Verify correct CSS variable */: 1s) {
  display: inline-flex;
  align-items: center;

  &::before {
    content: '';
    width: 4px;
    height: 4px;
    border-radius: 50%;
    background-color: var(--color) /* TODO: Verify correct CSS variable */;
    animation: typing-dot var(--duration) /* TODO: Verify correct CSS variable */ infinite;
    margin-right: 4px;
  }

  &::after {
    content: '';
    width: 4px;
    height: 4px;
    border-radius: 50%;
    background-color: var(--color) /* TODO: Verify correct CSS variable */;
    animation: typing-dot var(--duration) /* TODO: Verify correct CSS variable */ infinite;
    animation-delay: 0.3s;
  }

  @include animation.respect-reduced-motion;
}

// Loading button
// Adds a loading state to a button with spinner
// Usage: Add a .loading class to the button when loading
@mixin loading-button(var(--spinner-size) /* TODO: Verify correct CSS variable */: 16px, var(--spinner-color) /* TODO: Verify correct CSS variable */: var(--color-white)) {
  position: relative;

  &.loading {
    pointer-events: none;
    opacity: 0.8;

    .button-text {
      visibility: hidden;
    }

    &::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: var(--spinner-size) /* TODO: Verify correct CSS variable */;
      height: var(--spinner-size) /* TODO: Verify correct CSS variable */;
      margin-top: -var(--spinner-size) /* TODO: Verify correct CSS variable */ / 2;
      margin-left: -var(--spinner-size) /* TODO: Verify correct CSS variable */ / 2;
      border: 2px solid rgba(var(--spinner-color) /* TODO: Verify correct CSS variable */, 0.3);
      border-radius: 50%;
      border-top-color: var(--spinner-color) /* TODO: Verify correct CSS variable */;
      animation: spinner 1s ease-in-out infinite;
    }
  }

  &.success {
    background-color: var(--color-success) !important;
    transition: background-color var(--transition-fast) var(--transition-timing-default);
  }

  &.error {
    background-color: var(--color-error) !important;
    transition: background-color var(--transition-fast) var(--transition-timing-default);
  }

  @include animation.respect-reduced-motion;
}

// Skeleton loading
// Creates a skeleton loading effect for content placeholders
@mixin skeleton-loading(
) {
  background: linear-gradient(90deg, var(--bg-color-start) /* TODO: Verify correct CSS variable */ 25%, var(--bg-color-mid) /* TODO: Verify correct CSS variable */ 50%, var(--bg-color-start) /* TODO: Verify correct CSS variable */ 75%);
  background-size: 200% 100%;
  border-radius: var(--border-radius-sm);
  animation: skeleton-loading 1.5s infinite;

  @include animation.respect-reduced-motion;
}

// Page transition
// Adds a smooth transition when navigating between pages
@mixin page-transition(var(--duration) /* TODO: Verify correct CSS variable */: var(--transition-normal), var(--y-offset) /* TODO: Verify correct CSS variable */: 10px) {
  opacity: 0;
  transform: translateY(var(--y-offset) /* TODO: Verify correct CSS variable */);
  animation: page-enter var(--duration) /* TODO: Verify correct CSS variable */ forwards;

  @include animation.respect-reduced-motion;
}

// Hover border
// Adds a colored border or underline effect on hover
@mixin hover-border(
) {
  position: relative;

  &::after {
    content: '';
    position: absolute;
    #{var(--position) /* TODO: Verify correct CSS variable */}: 0;
    left: 0;
    width: 0;
    height: var(--width) /* TODO: Verify correct CSS variable */;
    background-color: var(--color) /* TODO: Verify correct CSS variable */;
    transition: width var(--duration) /* TODO: Verify correct CSS variable */ var(--transition-timing-default);
  }

  &:hover::after {
    width: 100%;
  }

  @include animation.respect-reduced-motion;
}

// Pulse animation (renamed to avoid conflict with animation-utilities)
// Adds a pulsing effect to an element
@mixin pulse-effect(var(--scale) /* TODO: Verify correct CSS variable */: 1.05, var(--duration) /* TODO: Verify correct CSS variable */: 1.5s, var(--color) /* TODO: Verify correct CSS variable */: var(--color-primary)) {
  animation: pulse var(--duration) /* TODO: Verify correct CSS variable */ var(--transition-timing-default) infinite;

  @include animation.respect-reduced-motion;
}

// Progress bar
// Creates an animated progress bar
@mixin progress-bar(
) {
  position: relative;
  height: var(--height) /* TODO: Verify correct CSS variable */;
  background-color: var(--bg-color) /* TODO: Verify correct CSS variable */;
  border-radius: var(--border-radius-full);
  overflow: hidden;

  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 30%;
    background-color: var(--color) /* TODO: Verify correct CSS variable */;
    border-radius: var(--border-radius-full);
    animation: progress var(--duration) /* TODO: Verify correct CSS variable */ infinite;
  }

  @include animation.respect-reduced-motion;
}

// Animation keyframes
@keyframes ripple {
  0% {
    transform: scale(0, 0);
    opacity: 0.5;
  }
  20% {
    transform: scale(25, 25);
    opacity: 0.3;
  }
  100% {
    opacity: 0;
    transform: scale(40, 40);
  }
}

@keyframes spinner {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes checkmark {
  0% {
    transform: rotate(45deg) scale(0);
    opacity: 0;
  }
  50% {
    transform: rotate(45deg) scale(0.7);
    opacity: 1;
  }
  100% {
    transform: rotate(45deg) scale(1);
    opacity: 1;
  }
}

@keyframes typing-dot {
  0%,
  60%,
  100% {
    transform: scale(1);
    opacity: 1;
  }
  30% {
    transform: scale(1.5);
    opacity: 0.8;
  }
}

@keyframes pulse-effect {
  0% {
    transform: scale(0.95);
    opacity: 1;
  }
  50% {
    transform: scale(1.1);
    opacity: 0.7;
  }
  100% {
    transform: scale(0.95);
    opacity: 1;
  }
}

@keyframes skeleton-loading {
  0% {
    background-position: 200% 0;
  }
  100% {
    background-position: -200% 0;
  }
}

@keyframes page-enter {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes progress {
  0% {
    width: 0%;
  }
  50% {
    width: 70%;
  }
  100% {
    width: 100%;
  }
}

@keyframes shake {
  10%,
  90% {
    transform: translate3d(-1px, 0, 0);
  }
  20%,
  80% {
    transform: translate3d(2px, 0, 0);
  }
  30%,
  50%,
  70% {
    transform: translate3d(-4px, 0, 0);
  }
  40%,
  60% {
    transform: translate3d(4px, 0, 0);
  }
}
