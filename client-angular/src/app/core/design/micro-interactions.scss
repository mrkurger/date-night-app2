/**
 * Micro-Interactions Utilities
 * 
 * This file provides mixins and functions to help implement micro-interactions.
 * Micro-interactions are small animations that provide feedback to the user.
 * 
 * Usage:
 * @use 'src/app/core/design/main' as ds;
 * 
 * .button {
 *   @include ds.hover-scale;
 * }
 * 
 * .card {
 *   @include ds.hover-lift;
 * }
 * 
 * .form-field {
 *   @include ds.focus-highlight;
 * }
 * 
 * .loading-button {
 *   @include ds.loading-button;
 * }
 * 
 * .page-transition {
 *   @include ds.page-transition;
 * }
 * 
 * Note: All micro-interactions respect the user's prefers-reduced-motion setting.
 */

@use 'design-tokens' as tokens;
@use 'animation-utilities' as animation;

// Hover scale
// Scales an element slightly on hover
@mixin hover-scale($scale: 1.05, $duration: tokens.$transition-fast) {
  & {
    transition: transform $duration tokens.$transition-timing-default;
  }

  &:hover {
    transform: scale($scale);
  }

  @include animation.respect-reduced-motion;
}

// Hover lift
// Lifts an element slightly and adds a shadow on hover
@mixin hover-lift($y: -4px, $shadow: tokens.$shadow-md, $duration: tokens.$transition-fast) {
  transition:
    transform $duration tokens.$transition-timing-default,
    box-shadow $duration tokens.$transition-timing-default;

  &:hover {
    transform: translateY($y);
    box-shadow: $shadow;
  }

  @include animation.respect-reduced-motion;
}

// Hover color shift
// Changes the color of an element on hover
@mixin hover-color-shift(
  $property: color,
  $from: inherit,
  $to: tokens.$color-primary,
  $duration: tokens.$transition-fast
) {
  #{$property}: $from;
  transition: #{$property} $duration tokens.$transition-timing-default;

  &:hover {
    #{$property}: $to;
  }

  // Alternative syntax for future Sass versions:
  // & {
  //   #{$property}: $from;
  //   transition: #{$property} $duration tokens.$transition-timing-default;
  // }

  @include animation.respect-reduced-motion;
}

// Click ripple
// Adds a ripple effect on click
@mixin click-ripple($color: tokens.$color-primary, $duration: tokens.$transition-normal) {
  & {
    position: relative;
    overflow: hidden;
  }

  &::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 5px;
    height: 5px;
    background: rgba($color, 0.3);
    opacity: 0;
    border-radius: 100%;
    transform: scale(1, 1) translate(-50%, -50%);
    transform-origin: 50% 50%;
  }

  &:active::after {
    animation: ripple $duration ease-out;
  }

  @include animation.respect-reduced-motion;
}

// Focus highlight
// Adds a highlight effect on focus
@mixin focus-highlight($color: tokens.$color-primary, $duration: tokens.$transition-fast) {
  transition: box-shadow $duration tokens.$transition-timing-default;

  &:focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px rgba($color, 0.5);
  }

  @include animation.respect-reduced-motion;
}

// Loading spinner
// Adds a loading spinner
@mixin loading-spinner(
  $size: 24px,
  $border-width: 2px,
  $color: tokens.$color-primary,
  $duration: 0.8s
) {
  &::before {
    content: '';
    box-sizing: border-box;
    position: absolute;
    top: 50%;
    left: 50%;
    width: $size;
    height: $size;
    margin-top: -$size / 2;
    margin-left: -$size / 2;
    border-radius: 50%;
    border: $border-width solid transparent;
    border-top-color: $color;
    animation: spinner $duration linear infinite;
  }

  @include animation.respect-reduced-motion;
}

// Success checkmark
// Adds a success checkmark animation
@mixin success-checkmark(
  $size: 24px,
  $color: tokens.$color-success,
  $duration: tokens.$transition-normal
) {
  position: relative;

  &::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: $size;
    height: $size / 2;
    margin-top: -$size / 4;
    margin-left: -$size / 4;
    border-right: 2px solid $color;
    border-bottom: 2px solid $color;
    transform: rotate(45deg) scale(0);
    animation: checkmark $duration tokens.$transition-timing-default forwards;
  }

  @include animation.respect-reduced-motion;
}

// Error shake
// Adds a shake animation for error states
@mixin error-shake($duration: 0.4s) {
  animation: shake $duration tokens.$transition-timing-default;

  @include animation.respect-reduced-motion;
}

// Notification badge
// Adds a pulsing notification badge
@mixin notification-badge($size: 8px, $color: tokens.$color-error, $duration: 1.5s) {
  position: relative;

  &::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: $size;
    height: $size;
    background-color: $color;
    border-radius: 50%;
    animation: pulse-effect $duration tokens.$transition-timing-default infinite;
  }

  @include animation.respect-reduced-motion;
}

// Typing indicator
// Adds a typing indicator animation
@mixin typing-indicator($color: tokens.$color-primary, $duration: 1s) {
  display: inline-flex;
  align-items: center;

  &::before {
    content: '';
    width: 4px;
    height: 4px;
    border-radius: 50%;
    background-color: $color;
    animation: typing-dot $duration infinite;
    margin-right: 4px;
  }

  &::after {
    content: '';
    width: 4px;
    height: 4px;
    border-radius: 50%;
    background-color: $color;
    animation: typing-dot $duration infinite;
    animation-delay: 0.3s;
  }

  @include animation.respect-reduced-motion;
}

// Loading button
// Adds a loading state to a button with spinner
// Usage: Add a .loading class to the button when loading
@mixin loading-button($spinner-size: 16px, $spinner-color: tokens.$color-white) {
  position: relative;

  &.loading {
    pointer-events: none;
    opacity: 0.8;

    .button-text {
      visibility: hidden;
    }

    &::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: $spinner-size;
      height: $spinner-size;
      margin-top: -$spinner-size / 2;
      margin-left: -$spinner-size / 2;
      border: 2px solid rgba($spinner-color, 0.3);
      border-radius: 50%;
      border-top-color: $spinner-color;
      animation: spinner 1s ease-in-out infinite;
    }
  }

  &.success {
    background-color: tokens.$color-success !important;
    transition: background-color tokens.$transition-fast tokens.$transition-timing-default;
  }

  &.error {
    background-color: tokens.$color-error !important;
    transition: background-color tokens.$transition-fast tokens.$transition-timing-default;
  }

  @include animation.respect-reduced-motion;
}

// Skeleton loading
// Creates a skeleton loading effect for content placeholders
@mixin skeleton-loading(
  $bg-color-start: tokens.$color-light-gray-2,
  $bg-color-mid: tokens.$color-light-gray-1
) {
  background: linear-gradient(90deg, $bg-color-start 25%, $bg-color-mid 50%, $bg-color-start 75%);
  background-size: 200% 100%;
  border-radius: tokens.$border-radius-sm;

  animation: skeleton-loading 1.5s infinite;

  @include animation.respect-reduced-motion;
}

// Page transition
// Adds a smooth transition when navigating between pages
@mixin page-transition($duration: tokens.$transition-normal, $y-offset: 10px) {
  opacity: 0;
  transform: translateY($y-offset);

  animation: page-enter $duration forwards;

  @include animation.respect-reduced-motion;
}

// Hover border
// Adds a colored border or underline effect on hover
@mixin hover-border(
  $color: tokens.$color-primary,
  $position: bottom,
  $width: 2px,
  $duration: tokens.$transition-normal
) {
  position: relative;

  &::after {
    content: '';
    position: absolute;
    #{$position}: 0;
    left: 0;
    width: 0;
    height: $width;
    background-color: $color;
    transition: width $duration tokens.$transition-timing-default;
  }

  &:hover::after {
    width: 100%;
  }

  @include animation.respect-reduced-motion;
}

// Pulse animation (renamed to avoid conflict with animation-utilities)
// Adds a pulsing effect to an element
@mixin pulse-effect($scale: 1.05, $duration: 1.5s, $color: tokens.$color-primary) {
  animation: pulse $duration tokens.$transition-timing-default infinite;

  @include animation.respect-reduced-motion;
}

// Progress bar
// Creates an animated progress bar
@mixin progress-bar(
  $height: 4px,
  $color: tokens.$color-primary,
  $bg-color: tokens.$color-light-gray-2,
  $duration: 2s
) {
  position: relative;
  height: $height;
  background-color: $bg-color;
  border-radius: tokens.$border-radius-full;
  overflow: hidden;

  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 30%;
    background-color: $color;
    border-radius: tokens.$border-radius-full;
    animation: progress $duration infinite;
  }

  @include animation.respect-reduced-motion;
}

// Animation keyframes
@keyframes ripple {
  0% {
    transform: scale(0, 0);
    opacity: 0.5;
  }
  20% {
    transform: scale(25, 25);
    opacity: 0.3;
  }
  100% {
    opacity: 0;
    transform: scale(40, 40);
  }
}

@keyframes spinner {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes checkmark {
  0% {
    transform: rotate(45deg) scale(0);
    opacity: 0;
  }
  50% {
    transform: rotate(45deg) scale(0.7);
    opacity: 1;
  }
  100% {
    transform: rotate(45deg) scale(1);
    opacity: 1;
  }
}

@keyframes typing-dot {
  0%,
  60%,
  100% {
    transform: scale(1);
    opacity: 1;
  }
  30% {
    transform: scale(1.5);
    opacity: 0.8;
  }
}

@keyframes pulse-effect {
  0% {
    transform: scale(0.95);
    opacity: 1;
  }
  50% {
    transform: scale(1.1);
    opacity: 0.7;
  }
  100% {
    transform: scale(0.95);
    opacity: 1;
  }
}

@keyframes skeleton-loading {
  0% {
    background-position: 200% 0;
  }
  100% {
    background-position: -200% 0;
  }
}

@keyframes page-enter {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes progress {
  0% {
    width: 0%;
  }
  50% {
    width: 70%;
  }
  100% {
    width: 100%;
  }
}

@keyframes shake {
  10%,
  90% {
    transform: translate3d(-1px, 0, 0);
  }
  20%,
  80% {
    transform: translate3d(2px, 0, 0);
  }
  30%,
  50%,
  70% {
    transform: translate3d(-4px, 0, 0);
  }
  40%,
  60% {
    transform: translate3d(4px, 0, 0);
  }
}
