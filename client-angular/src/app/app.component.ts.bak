import { Component, OnInit, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import {
  NbIconModule,
  NbButtonModule,
  NbLayoutModule,
  NbSidebarModule,
  NbMenuModule,
  NbContextMenuModule,
  NbActionsModule,
  NbUserModule,
  NbBadgeModule,
  NbCardModule,
  NbListModule,
} from '@nebular/theme';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { SharedModule } from './shared/shared.module';
import { NotificationComponent } from './shared/components/notification/notification.component';

interface NotificationMessage {
  message: string;
  type: 'success' | 'error' | 'warning' | 'info';
  duration?: number;
}

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    CommonModule,
    RouterModule,
    SharedModule,
    NbIconModule,
    NbButtonModule,
    NbLayoutModule,
    NbSidebarModule,
    NbMenuModule,
    NbContextMenuModule,
    NbActionsModule,
    NbUserModule,
    NbBadgeModule,
    NbCardModule,
    NbListModule,
    NotificationComponent,
  ],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss'],
})
export class AppComponent implements OnInit {
  title = 'date-night-app';
  notifications: NotificationMessage[] = [];
  username = 'User'; // Replace with actual username from auth service
  isAuthenticated = false; // Replace with actual auth state
  isAdmin = false; // Replace with actual admin check
  isAdvertiser = false; // Replace with actual advertiser check
  isClient = false; // Replace with actual client check
  unreadMessages = 0; // Replace with actual unread messages count
  notificationCount = 0; // Replace with actual notification count
  showInstallPrompt = false; // Replace with actual PWA install check

  userMenu = [
    { title: 'Profile', icon: 'person-outline', link: '/profile' },
    { title: 'Settings', icon: 'settings-2-outline', link: '/settings' },
    { title: 'Logout', icon: 'log-out-outline', data: 'logout' },
  ];

  constructor() {}

  ngOnInit(): void {
    // This could subscribe to a notification service
    // Example: this.notificationService.notifications$.subscribe(...)
  }

  showNotification(notification: NotificationMessage) {
    this.notifications.push(notification);

    if (notification.duration) {
      setTimeout(() => {
        this.removeNotification(notification);
      }, notification.duration);
    }
  }

  removeNotification(notification: NotificationMessage) {
    const index = this.notifications.indexOf(notification);
    if (index !== -1) {
      this.notifications.splice(index, 1);
    }
  }

  installPwa() {
    // Implement PWA installation logic
  }

  logout() {
    // Implement logout logic
  }
}
