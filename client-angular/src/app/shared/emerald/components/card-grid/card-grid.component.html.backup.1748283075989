<!-- Card Grid Component -->
<!-- Using Nebular components -->

<!-- Loading State -->
<div *ngIf="loading" class="nb-card-grid" [ngStyle]="getGridStyle()">
  <div
    *ngFor="let i of getSkeletonArray()"
    class="nb-card-grid__item"
    [ngClass]="{ 'nb-card-grid__item--animated': animated }"
  >
    <p-card>
      <p-card-body >
        <nb-skeleton height="200px"></nb-skeleton>
        <nb-skeleton height="1.5rem" width="80%"></nb-skeleton>
        <nb-skeleton height="1rem" width="60%"></nb-skeleton>
      </ng-template>
    </p-card>
  </div>
</div>

<!-- Netflix Layout -->
<div *ngIf="!loading && layout === 'netflix'" class="nb-card-grid nb-card-grid--netflix">
  <div class="nb-card-grid__netflix-row">
    <div class="nb-card-grid__netflix-items">
      <div
        *ngFor="let item of items"
        class="nb-card-grid__item nb-card-grid__item--netflix"
        [ngClass]="{ 'nb-card-grid__item--animated': animated }"
        [style.margin-right.px]="gap"
        (click)="onItemClick(item)"
      >
        <ng-container *ngIf="itemTemplate; else defaultTemplate">
          <ng-container
            *ngTemplateOutlet="itemTemplate; context: { $implicit: item }"
          ></ng-container>
        </ng-container>
        <ng-template #defaultTemplate>
          <p-card *ngIf="item.title" (click)="handleCardClick(item.id)" >
            <p-card-header *ngIf="item.title" >{{ item.title }}</ng-template>
            <p-card-body >
              <div *ngIf="item.imageUrl" class="nb-card-image">
                <img [src]="item.imageUrl" [alt]="item.title" />
              </div>
              <div *ngIf="item.subtitle" class="nb-card-subtitle">{{ item.subtitle }}</div>
              <div *ngIf="item.description" class="nb-card-description">{{ item.description }}</div>
              <div *ngIf="item.avatarUrl || item.avatarName" class="nb-card-avatar">
                <nb-user
                  [name]="item.avatarName"
                  [picture]="item.avatarUrl"
                  [title]="item.subtitle"
                  [showTitle]="false"
                  size="medium"
                  [badgeStatus]="item.isOnline ? 'success' : 'basic'"
                  [badgePosition]="'bottom right'"
                ></nb-user>
              </div>
              <div *ngIf="item.tags && item.tags.length" class="nb-card-tags">
                <nb-badge
                  *ngFor="let tag of item.tags"
                  [text]="tag.label"
                  [status]="tag.status || 'primary'"
                  position="top right"
                >
                </nb-badge>
              </div>
            </ng-template>
            <p-card-footer *ngIf="item.actions && item.actions.length" >
              <nb-actions size="medium">
                <nb-action
                  *ngFor="let action of item.actions"
                  [icon]="action.icon"
                  [disabled]="action.disabled"
                  (click)="
                    handleActionClick({ id: item.id, action: action.id }); $event.stopPropagation()
                  "
                >
                </nb-action>
              </nb-actions>
            </ng-template>
          </p-card>
          <div *ngIf="!item.title" class="nb-card-grid__default-item">
            {{ item.name || item.label || 'Item' }}
          </div>
        </ng-template>
      </div>
    </div>
  </div>
</div>

<!-- Grid or Masonry Layout -->
<div
  *ngIf="!loading && layout !== 'netflix'"
  class="nb-card-grid"
  [ngClass]="{ 'nb-card-grid--masonry': layout === 'masonry' }"
  [ngStyle]="getGridStyle()"
>
  <div
    *ngFor="let item of items"
    class="nb-card-grid__item"
    [ngClass]="{
      'nb-card-grid__item--animated': animated,
      'nb-card-grid__item--masonry': layout === 'masonry',
    }"
    (click)="onItemClick(item)"
  >
    <ng-container *ngIf="itemTemplate; else defaultTemplate">
      <ng-container *ngTemplateOutlet="itemTemplate; context: { $implicit: item }"></ng-container>
    </ng-container>
    <ng-template #defaultTemplate>
      <p-card *ngIf="item.title" (click)="handleCardClick(item.id)" >
        <p-card-header *ngIf="item.title" >{{ item.title }}</ng-template>
        <p-card-body >
          <div *ngIf="item.imageUrl" class="nb-card-image">
            <img [src]="item.imageUrl" [alt]="item.title" />
          </div>
          <div *ngIf="item.subtitle" class="nb-card-subtitle">{{ item.subtitle }}</div>
          <div *ngIf="item.description" class="nb-card-description">{{ item.description }}</div>
          <div *ngIf="item.avatarUrl || item.avatarName" class="nb-card-avatar">
            <nb-user
              [name]="item.avatarName"
              [picture]="item.avatarUrl"
              [title]="item.subtitle"
              [showTitle]="false"
              size="medium"
              [badgeStatus]="item.isOnline ? 'success' : 'basic'"
              [badgePosition]="'bottom right'"
            ></nb-user>
          </div>
          <div *ngIf="item.tags && item.tags.length" class="nb-card-tags">
            <nb-badge
              *ngFor="let tag of item.tags"
              [text]="tag.label"
              [status]="tag.status || 'primary'"
              position="top right"
            >
            </nb-badge>
          </div>
        </ng-template>
        <p-card-footer *ngIf="item.actions && item.actions.length" >
          <nb-actions size="medium">
            <nb-action
              *ngFor="let action of item.actions"
              [icon]="action.icon"
              [disabled]="action.disabled"
              (click)="
                handleActionClick({ id: item.id, action: action.id }); $event.stopPropagation()
              "
            >
            </nb-action>
          </nb-actions>
        </ng-template>
      </p-card>
      <div *ngIf="!item.title" class="nb-card-grid__default-item">
        {{ item.name || item.label || 'Item' }}
      </div>
    </ng-template>
  </div>
</div>

<!-- Empty State -->
<div *ngIf="!loading && items.length === 0" class="nb-card-grid__empty">
  <div class="nb-card-grid__empty-content">
    <nb-icon icon="search-outline" pack="eva"></nb-icon>
    <p>No items found</p>
  </div>
</div>
