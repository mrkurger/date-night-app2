'use client';

import { useState, useEffect, useCallback } from 'react';
import Link from 'next/link';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import {
  AlertCircle,
  Calendar,
  MapPin,
  Clock,
  Pencil,
  Trash2,
  CalendarCheck,
  Eye,
  ArrowUpDown,
} from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { TravelService, Itinerary } from '@/services/travel-service';

interface ItineraryListProps {
  isLoading?: boolean;
  adId?: string;
}

type Itinerary = {
  id: string;
  destination: {
    city: string;
    county: string;
    location: {
      coordinates: [number, number];
    };
  };
  arrivalDate: string;
  departureDate: string;
  status: 'planned' | 'active' | 'completed' | 'cancelled';
  notes?: string;
  accommodation?: {
    name: string;
    address: string;
  };
};

export default function ItineraryList({ isLoading = false, adId }: ItineraryListProps) {
  const [itineraries, setItineraries] = useState<Itinerary[]>([]);
  const [filteredItineraries, setFilteredItineraries] = useState<Itinerary[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [sortBy, setSortBy] = useState<string>('date-asc');

  // Define filter and sort function first
  const filterAndSortItineraries = useCallback(() => {
    // First filter by status
    let filtered = [...itineraries];
    if (statusFilter !== 'all') {
      filtered = filtered.filter(item => item.status === statusFilter);
    }

    // Then sort
    switch (sortBy) {
      case 'date-asc':
        filtered.sort(
          (a, b) => new Date(a.arrivalDate).getTime() - new Date(b.arrivalDate).getTime(),
        );
        break;
      case 'date-desc':
        filtered.sort(
          (a, b) => new Date(b.arrivalDate).getTime() - new Date(a.arrivalDate).getTime(),
        );
        break;
      case 'city-asc':
        filtered.sort((a, b) => a.destination.city.localeCompare(b.destination.city));
        break;
      case 'city-desc':
        filtered.sort((a, b) => b.destination.city.localeCompare(a.destination.city));
        break;
    }

    setFilteredItineraries(filtered);
  }, [itineraries, statusFilter, sortBy]);

  // Define fetch function next
  const fetchItineraries = useCallback(async () => {
    try {
      setError(null);
      let fetchedItineraries: Itinerary[] = [];
      
      try {
        if (adId) {
          // If adId is provided, get itineraries for this specific ad
          fetchedItineraries = await TravelService.getItinerariesByAdId(adId);
        } else {
          // Otherwise get all itineraries for the user
          fetchedItineraries = await TravelService.getAllItineraries();
        }
        
        setItineraries(fetchedItineraries);
      } catch (apiError) {
        console.error('API error:', apiError);
        setError('Failed to load itineraries from the server. Using mock data instead.');
        
        // Fallback to mock data if API call fails
        const mockItineraries = [
          {
            id: '1',
            destination: {
              city: 'Oslo',
              county: 'Oslo',
              location: {
                coordinates: [10.7522, 59.9139], // [longitude, latitude]
              },
            },
            arrivalDate: '2025-06-15T12:00:00Z',
            departureDate: '2025-06-20T12:00:00Z',
            status: 'planned' as const,
            notes: 'Meeting with several clients in Oslo center',
          },
          {
            id: '2',
            destination: {
              city: 'Bergen',
              county: 'Vestland',
              location: {
                coordinates: [5.3221, 60.3913],
              },
            },
            arrivalDate: '2025-06-22T12:00:00Z',
            departureDate: '2025-06-28T12:00:00Z',
            status: 'planned' as const,
            accommodation: {
              name: 'Hotel Norge',
              address: 'Nedre Ole Bulls plass 4, 5012 Bergen',
            },
          },
          {
            id: '3',
            destination: {
              city: 'Trondheim',
              county: 'TrÃ¸ndelag',
              location: {
                coordinates: [10.3951, 63.4305],
              },
            },
            arrivalDate: '2025-07-01T12:00:00Z',
            departureDate: '2025-07-07T12:00:00Z',
            status: 'planned' as const,
          },
        ];
        
        setItineraries(mockItineraries);
      }
    } catch (err) {
      console.error('Error fetching itineraries:', err);
      setError('Unable to load travel itineraries. Please try again later.');
    }
  }, [adId]);

  // Setup effects after function definitions
  useEffect(() => {
    if (!isLoading) {
      fetchItineraries();
    }
  }, [isLoading, adId, fetchItineraries]);

  useEffect(() => {
    filterAndSortItineraries();
  }, [filterAndSortItineraries]);

  const getStatusBadgeColor = (status: string) => {
    switch (status) {
      case 'planned':
        return 'bg-blue-100 text-blue-800 hover:bg-blue-200';
      case 'active':
        return 'bg-green-100 text-green-800 hover:bg-green-200';
      case 'completed':
        return 'bg-gray-100 text-gray-800 hover:bg-gray-200';
      case 'cancelled':
        return 'bg-red-100 text-red-800 hover:bg-red-200';
      default:
        return 'bg-gray-100 text-gray-800 hover:bg-gray-200';
    }
  };

  const formatDateRange = (arrival: string, departure: string) => {
    const arrivalDate = new Date(arrival);
    const departureDate = new Date(departure);

    return `${arrivalDate.toLocaleDateString()} - ${departureDate.toLocaleDateString()}`;
  };

  const calculateDuration = (arrival: string, departure: string) => {
    const arrivalDate = new Date(arrival);
    const departureDate = new Date(departure);
    const diffTime = Math.abs(departureDate.getTime() - arrivalDate.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    return `${diffDays} day${diffDays !== 1 ? 's' : ''}`;
  };

  if (isLoading) {
    return (
      <div className="space-y-4">
        {[1, 2, 3].map(i => (
          <Card key={i} className="w-full">
            <CardHeader className="pb-2">
              <Skeleton className="h-6 w-1/3" />
              <Skeleton className="h-4 w-1/4" />
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-2/3" />
              </div>
            </CardContent>
            <CardFooter>
              <Skeleton className="h-10 w-20 mr-2" />
              <Skeleton className="h-10 w-20" />
            </CardFooter>
          </Card>
        ))}
      </div>
    );
  }

  if (error) {
    return (
      <Alert variant="destructive" className="mb-6">
        <AlertCircle className="h-4 w-4" />
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <h2 className="text-xl font-semibold">Your Travel Itineraries</h2>
        <div className="flex flex-col sm:flex-row gap-2">
          <Select value={statusFilter} onValueChange={setStatusFilter}>
            <SelectTrigger className="w-[160px]">
              <SelectValue placeholder="Filter by status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All statuses</SelectItem>
              <SelectItem value="planned">Planned</SelectItem>
              <SelectItem value="active">Active</SelectItem>
              <SelectItem value="completed">Completed</SelectItem>
              <SelectItem value="cancelled">Cancelled</SelectItem>
            </SelectContent>
          </Select>

          <Select value={sortBy} onValueChange={setSortBy}>
            <SelectTrigger className="w-[160px]">
              <SelectValue placeholder="Sort by" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="date-asc">Date (earliest first)</SelectItem>
              <SelectItem value="date-desc">Date (latest first)</SelectItem>
              <SelectItem value="city-asc">City (A-Z)</SelectItem>
              <SelectItem value="city-desc">City (Z-A)</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      {filteredItineraries.length === 0 ? (
        <div className="text-center py-8">
          <p className="text-gray-500">No itineraries found matching your filters.</p>
          {statusFilter !== 'all' && (
            <Button variant="link" onClick={() => setStatusFilter('all')} className="mt-2">
              Clear filters
            </Button>
          )}
        </div>
      ) : (
        <div className="space-y-4">
          {filteredItineraries.map(itinerary => (
            <Card key={itinerary.id} className="w-full">
              <CardHeader className="pb-2">
                <div className="flex justify-between items-start">
                  <div>
                    <CardTitle className="text-lg">
                      {itinerary.destination.city}, {itinerary.destination.county}
                    </CardTitle>
                    <CardDescription className="flex items-center gap-1 mt-1">
                      <Calendar className="h-3 w-3" />
                      {formatDateRange(itinerary.arrivalDate, itinerary.departureDate)}
                      <span className="mx-1">â€¢</span>
                      <Clock className="h-3 w-3" />
                      {calculateDuration(itinerary.arrivalDate, itinerary.departureDate)}
                    </CardDescription>
                  </div>
                  <Badge className={getStatusBadgeColor(itinerary.status)} variant="secondary">
                    {itinerary.status.charAt(0).toUpperCase() + itinerary.status.slice(1)}
                  </Badge>
                </div>
              </CardHeader>
              <CardContent>
                {itinerary.notes && <p className="text-sm text-gray-600 mb-2">{itinerary.notes}</p>}

                {itinerary.accommodation && (
                  <div className="bg-gray-50 p-3 rounded-md text-sm">
                    <p className="font-medium">Accommodation</p>
                    <p>{itinerary.accommodation.name}</p>
                    <p className="text-gray-600">{itinerary.accommodation.address}</p>
                  </div>
                )}
              </CardContent>
              <CardFooter className="flex gap-2 pt-0">
                <Link href={`/travel/${itinerary.id}`}>
                  <Button size="sm" variant="outline" className="flex gap-2 items-center">
                    <Eye className="h-4 w-4" />
                    <span>View</span>
                  </Button>
                </Link>

                <Link href={`/travel/edit/${itinerary.id}`}>
                  <Button size="sm" variant="outline" className="flex gap-2 items-center">
                    <Pencil className="h-4 w-4" />
                    <span>Edit</span>
                  </Button>
                </Link>

                {itinerary.status === 'planned' && (
                  <Button
                    size="sm"
                    variant="outline"
                    className="flex gap-2 items-center text-red-600 hover:text-red-700 border-red-200 hover:border-red-300 hover:bg-red-50"
                  >
                    <Trash2 className="h-4 w-4" />
                    <span>Cancel</span>
                  </Button>
                )}
              </CardFooter>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}
