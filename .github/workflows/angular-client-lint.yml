---
name: Angular Client Lint

# Updated to run on all branches to improve development workflow and catch issues earlier
on:
  push:
    branches:
      - '**'  # Matches any branch
    paths:
      - 'client-angular/**'
      - '.github/workflows/angular-client-lint.yml'
  pull_request:
    branches:
      - '**'  # Matches any branch
    paths:
      - 'client-angular/**'
  workflow_dispatch:
    inputs:
      node-version:
        description: 'Specify Node.js version'
        required: false
        default: '20.x'

permissions:
  contents: read
  checks: write
  pull-requests: write  # Allows reporting lint status on PRs

# Prevent multiple instances from running concurrently for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-angular-client:
    runs-on: ubuntu-latest

    # Set all run steps to execute inside the client-angular directory
    defaults:
      run:
        working-directory: ./client-angular

    strategy:
      matrix:
        node-version: ['22.14.0']

    steps:
      # Step 1: Checkout the repository at the correct commit
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Output the current working directory, for debugging purposes
      - name: Show current directory
        run: pwd # Shows the current path (should end with /client-angular)

      # Step 3: List the contents of the current directory to verify client-angular is present
      - name: List current directory contents
        run: ls -la # Should display package.json, angular.json, etc.

      # Step 4: Output the Node.js version to confirm the runtime
      - name: Check Node.js Version
        run: node --version

      # Step 5: Set up Node.js and enable dependency caching using the custom action
      - name: Setup Node.js with Dependency Conflict Resolution
        uses: ./.github/actions/setup-nodejs
        with:
          node-version: ${{ matrix.node-version }}
          cache-strategy: 'npm'
          legacy-peer-deps: 'true'
          resolve-conflicts: 'true'
          check-missing: 'true'
          
      # Step 6: Verify dependencies were successfully installed
      - name: Verify Dependencies
        run: |
          echo "Checking installed packages..."
          npm list --depth=0 @angular/common @nebular/auth || true
          echo "Node.js modules directory size:"
          du -sh node_modules || echo "No node_modules directory found"

      # Step 7: Check for ESLint configuration, add if missing
      - name: Check for ESLint Configuration
        run: |
          # If .eslintrc.json is missing, set up Angular ESLint
          if [ ! -f .eslintrc.json ]; then
            echo "ESLint configuration not found, running ng add."
            npx ng add @angular-eslint/schematics --skip-confirmation
          else
            echo "ESLint configuration found, skipping ng add."
          fi

      # Step 8: Run the linter on the Angular project
      - name: Run ESLint
        run: npx ng lint client-angular
        # TODO: If you want to lint the entire workspace instead, change the command above as needed
