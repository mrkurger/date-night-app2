# Workflow name: Appears in the Actions tab of the GitHub repository.
name: Angular Client Lint

# Defines the triggers for the workflow.
on:
  # Trigger on push events to the 'main' or 'develop' branches.
  push:
    branches:
      - main
      - develop
    # Only run if files in 'client-angular/**' or this workflow file itself change.
    paths:
      - 'client-angular/**'
      - '.github/workflows/angular-client-lint.yml'
  # Trigger on pull request events targeting the 'main' or 'develop' branches.
  pull_request:
    branches:
      - main
      - develop
    # Only run if files in 'client-angular/**' change.
    paths:
      - 'client-angular/**'
  # Allows manual triggering of the workflow from the Actions tab.
  workflow_dispatch:
    inputs:
      node-version:
        description: 'Specify Node.js version'
        required: false
        default: '22.14.0'

# Defines the jobs to be run in the workflow.
jobs:
  # 'lint-angular-client' job: Lints the Angular client application.
  lint-angular-client:
    # Specifies the runner environment.
    runs-on: ubuntu-latest
    # Sets a name for the job that will appear in the GitHub UI.
    name: Lint Angular Client (Node ${{ matrix.node-version }})
    # Sets default settings for all 'run' steps in this job.
    defaults:
      run:
        # All 'run' commands will execute in the 'client-angular' directory by default.
        # This assumes 'client-angular' is the root of your Angular workspace.
        working-directory: ./client-angular

    # Defines a build matrix for running the job with different Node.js versions.
    strategy:
      matrix:
        # Pin the Node.js version for consistency with package.json.
        node-version: ['22.14.0']

    # Defines the sequence of steps for the job.
    steps:
      # Step 1: Check out the repository code.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Validate Node.js version compatibility.
      - name: Debug Node.js Version
        run: node --version

      # Step 3: Set up Node.js.
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          # Enable caching of npm packages.
          cache: 'npm'
          # Specify the path to the package-lock.json file for cache invalidation.
          cache-dependency-path: |
            client-angular/package-lock.json
            client-angular/yarn.lock

      # Step 4: Debug directory structure.
      - name: Debug Directory Structure
        run: ls -la client-angular

      # Step 5: Check for package-lock.json before installing dependencies.
      - name: Check for package-lock.json
        run: |
          if [ ! -f package-lock.json ]; then
            echo "Error: package-lock.json not found in client-angular."
            exit 1
          fi

      # Step 6: Install project dependencies.
      - name: Install Dependencies
        run: npm ci

      # Step 7: Check for ESLint configuration.
      - name: Check for ESLint Configuration
        run: |
          if [ ! -f .eslintrc.json ]; then
            echo "ESLint configuration not found, running ng add."
            npx ng add @angular-eslint/schematics --skip-confirmation
          else
            echo "ESLint configuration found, skipping ng add."
          fi

      # Step 8: Run the linter.
      - name: Run ESLint
        run: npx ng lint client-angular