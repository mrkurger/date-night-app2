name: "CodeQL Analysis"

on:
  push:
    branches: [main]
    paths:
      - '**/*.js'
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.jsx'
      - '.github/workflows/codeql-analysis.yml'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    paths:
      - '**/*.js'
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.jsx'
      - '.github/workflows/codeql-analysis.yml'
      - 'package.json'
      - 'package-lock.json'

jobs:
  codeql:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript-typescript' ]
        include:
          - language: 'javascript-typescript'
            build-mode: 'none'  # No build needed for JS/TS analysis

    steps:
      # Step 1: Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Step 2: Setup Node.js for JavaScript/TypeScript
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Step 3: Initialize CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality
          config: |
            # Ignore build output and dependencies
            paths-ignore:
              - node_modules
              - dist
              - build
              - .angular

      # Step 4: Install dependencies for better analysis accuracy
      - name: Install dependencies
        shell: bash
        run: |
          # Install Node.js dependencies strictly via lockfile: ensures reproducible env or fails fast
          if [[ -f "package.json" ]]; then
            if [[ -f "package-lock.json" ]]; then
              npm ci --prefer-offline --no-audit
            else
              echo "❌ package-lock.json missing! Aborting install for safety."
              exit 1
            fi
          fi

      # Step 5: Perform CodeQL Analysis (no autobuild needed)
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
          upload: false
          output: codeql-results-${{ matrix.language }}

      # Step 6: Convert CodeQL results to readable format (ESModules)
      - name: Process CodeQL Results
        id: process-results
        shell: bash
        run: |
          # Create results directory
          mkdir -p processed-results
          SARIF_FILE=$(find codeql-results-${{ matrix.language }} -name "*.sarif" -type f | head -n 1)

          if [[ -n "$SARIF_FILE" ]]; then
            echo "Found SARIF file: $SARIF_FILE"

            # Use ESModules syntax for result processing
            node --input-type=module --eval "
            import { readFileSync, writeFileSync } from 'fs';

            // Read SARIF file content
            const sarifContent = readFileSync('$SARIF_FILE', 'utf8');
            const sarif = JSON.parse(sarifContent);

            // Initialize counters and findings array
            let highCount = 0, mediumCount = 0, lowCount = 0;
            const findings = [];

            // Parse results
            for (const run of sarif.runs || []) {
              for (const result of run.results || []) {
                // Determine severity level
                const level = result.level || 'warning';
                let severity;
                if (level === 'error') { severity = 'HIGH'; highCount++; }
                else if (level === 'warning') { severity = 'MEDIUM'; mediumCount++; }
                else { severity = 'LOW'; lowCount++; }

                // Extract file and line info (with fallback)
                const file = result.locations?.[0]?.physicalLocation?.artifactLocation?.uri || 'unknown';
                const line = result.locations?.[0]?.physicalLocation?.region?.startLine || '?';

                findings.push({
                  severity,
                  rule: result.ruleId || 'unknown',
                  message: result.message?.text || 'No description',
                  file,
                  line
                });
              }
            }

            // Sort findings by severity for output
            const severityOrder = { 'HIGH': 0, 'MEDIUM': 1, 'LOW': 2 };
            findings.sort((a, b) => severityOrder[a.severity] - severityOrder[b.severity]);

            // Generate markdown summary
            let markdown = '# CodeQL Security Analysis Results\\n\\n';
            markdown += '**Language:** ${{ matrix.language }}\\n';
            markdown += '**Date:** ' + new Date().toISOString() + '\\n\\n';
            markdown += '## 📊 Summary\\n\\n';
            markdown += '| Severity | Count |\\n|----------|-------|\\n';
            markdown += '| 🔴 HIGH | ' + highCount + ' |\\n';
            markdown += '| 🟡 MEDIUM | ' + mediumCount + ' |\\n';
            markdown += '| 🔵 LOW | ' + lowCount + ' |\\n';
            markdown += '| **TOTAL** | **' + findings.length + '** |\\n\\n';

            if (findings.length > 0) {
              markdown += '## 🔍 Detailed Findings\\n\\n';
              const grouped = findings.reduce((acc, f) => { acc[f.severity] = acc[f.severity] || []; acc[f.severity].push(f); return acc; }, {});
              for (const [severity, items] of Object.entries(grouped)) {
                markdown += '### ' + severity + ' Severity Issues\\n\\n';
                for (const item of items.slice(0, 10)) {
                  markdown += '#### ' + item.rule + '\\n- **File:** `' + item.file + ':' + item.line + '`\\n- **Message:** ' + item.message + '\\n\\n';
                }
                if (items.length > 10) {
                  markdown += '*... and ' + (items.length - 10) + ' more ' + severity + ' issues*\\n\\n';
                }
              }
            } else {
              markdown += '## ✅ No Security Issues Found!\\n\\nGreat job! CodeQL analysis found no security vulnerabilities.\\n';
            }

            // Save markdown and JSON reports
            writeFileSync('processed-results/codeql-${{ matrix.language }}.md', markdown);
            const jsonReport = {
              language: '${{ matrix.language }}',
              timestamp: new Date().toISOString(),
              summary: { total: findings.length, high: highCount, medium: mediumCount, low: lowCount },
              findings: findings
            };
            writeFileSync('processed-results/codeql-${{ matrix.language }}.json', JSON.stringify(jsonReport, null, 2));
            // Set outputs
            console.log('::set-output name=total_issues::' + findings.length);
            console.log('::set-output name=high_issues::' + highCount);
            console.log('::set-output name=has_issues::' + (findings.length > 0));
            "
          else
            echo "❗ No SARIF file found. Analysis may have failed. Creating empty report..."
            echo "# CodeQL Security Analysis Results" > processed-results/codeql-${{ matrix.language }}.md
            echo "No results file generated. This might indicate an analysis error." >> processed-results/codeql-${{ matrix.language }}.md
            echo "::set-output name=total_issues::0"
            echo "::set-output name=high_issues::0"
            echo "::set-output name=has_issues::false"
          fi

      # Step 7: Upload results as artifacts
      - name: Upload CodeQL Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codeql-results-${{ matrix.language }}
          path: |
            codeql-results-${{ matrix.language }}/
            processed-results/
          retention-days: 7  # Lowered for cost savings

      # Step 8: Add results to job summary
      - name: Add to Job Summary
        if: always()
        run: |
          echo "## 🔐 CodeQL Analysis Results for ${{ matrix.language }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "processed-results/codeql-${{ matrix.language }}.md" ]; then
            cat "processed-results/codeql-${{ matrix.language }}.md" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No results file found. Check the workflow logs for errors." >> $GITHUB_STEP_SUMMARY
          fi
