# File: .github/workflows/trivy-codeql-dashboard.yml
name: "Security Dashboard"

# This workflow creates a unified security dashboard combining Trivy and CodeQL results
# Works with GitHub Pro+ by using artifacts and workflow summaries

on:
  # Run after other security workflows complete
  workflow_run:
    workflows: ["Trivy Security Scan", "CodeQL Security Analysis (Pro+ Compatible)"]
    types:
      - completed
  
  # Daily dashboard generation
  schedule:
    - cron: '0 6 * * *'
  
  # Manual trigger
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  issues: write

jobs:
  generate-dashboard:
    name: Generate Security Dashboard
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout for scripts
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: Setup Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        npm install @octokit/rest

    # Step 4: Generate comprehensive dashboard
    - name: Generate Security Dashboard
      uses: actions/github-script@v7
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        script: |
          // Import Octokit for GitHub API access
          const { Octokit } = require('@octokit/rest');
          
          // Initialize Octokit client
          const octokit = new Octokit({
            auth: process.env.GITHUB_TOKEN
          });
          
          // Repository information
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          
          console.log('üìä Generating security dashboard...');
          
          try {
            // Fetch recent workflow runs
            const { data: workflowRuns } = await octokit.actions.listWorkflowRunsForRepo({
              owner,
              repo,
              per_page: 100,
              status: 'completed'
            });
            
            // Filter security-related workflows
            const trivyRuns = workflowRuns.workflow_runs.filter(run => 
              run.name.includes('Trivy')
            ).slice(0, 5);
            
            const codeqlRuns = workflowRuns.workflow_runs.filter(run => 
              run.name.includes('CodeQL')
            ).slice(0, 5);
            
            // Create dashboard HTML
            let dashboard = `<!DOCTYPE html>
            <html>
            <head>
              <title>Security Dashboard - ${repo}</title>
              <style>
                body {
                  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                  max-width: 1200px;
                  margin: 0 auto;
                  padding: 20px;
                  background: #f6f8fa;
                }
                .header {
                  background: #24292e;
                  color: white;
                  padding: 20px;
                  border-radius: 6px;
                  margin-bottom: 20px;
                }
                .card {
                  background: white;
                  border: 1px solid #e1e4e8;
                  border-radius: 6px;
                  padding: 20px;
                  margin-bottom: 20px;
                  box-shadow: 0 1px 3px rgba(0,0,0,0.12);
                }
                .metrics {
                  display: grid;
                  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                  gap: 15px;
                  margin-bottom: 20px;
                }
                .metric {
                  background: #f6f8fa;
                  padding: 15px;
                  border-radius: 6px;
                  text-align: center;
                }
                .metric-value {
                  font-size: 2em;
                  font-weight: bold;
                  color: #0366d6;
                }
                .metric-label {
                  color: #586069;
                  font-size: 0.9em;
                }
                .status-badge {
                  display: inline-block;
                  padding: 3px 8px;
                  border-radius: 3px;
                  font-size: 0.85em;
                  font-weight: 600;
                }
                .status-success { background: #28a745; color: white; }
                .status-failure { background: #dc3545; color: white; }
                .status-pending { background: #ffc107; color: #212529; }
                table {
                  width: 100%;
                  border-collapse: collapse;
                }
                th, td {
                  padding: 8px 12px;
                  text-align: left;
                  border-bottom: 1px solid #e1e4e8;
                }
                th {
                  background: #f6f8fa;
                  font-weight: 600;
                }
                .trend-up { color: #dc3545; }
                .trend-down { color: #28a745; }
                .trend-neutral { color: #6c757d; }
              </style>
            </head>
            <body>
              <div class="header">
                <h1>üîê Security Dashboard</h1>
                <p>Repository: ${owner}/${repo}</p>
                <p>Generated: ${new Date().toUTCString()}</p>
              </div>
              
              <div class="card">
                <h2>üìä Security Overview</h2>
                <div class="metrics">
                  <div class="metric">
                    <div class="metric-value" id="total-scans">-</div>
                    <div class="metric-label">Total Scans (24h)</div>
                  </div>
                  <div class="metric">
                    <div class="metric-value" id="trivy-status">-</div>
                    <div class="metric-label">Trivy Status</div>
                  </div>
                  <div class="metric">
                    <div class="metric-value" id="codeql-status">-</div>
                    <div class="metric-label">CodeQL Status</div>
                  </div>
                  <div class="metric">
                    <div class="metric-value" id="last-scan">-</div>
                    <div class="metric-label">Hours Since Last Scan</div>
                  </div>
                </div>
              </div>
              
              <div class="card">
                <h2>üîÑ Recent Trivy Scans</h2>
                <table>
                  <thead>
                    <tr>
                      <th>Date</th>
                      <th>Branch</th>
                      <th>Status</th>
                      <th>Duration</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody id="trivy-runs">
                    ${trivyRuns.map(run => `
                      <tr>
                        <td>${new Date(run.created_at).toLocaleString()}</td>
                        <td>${run.head_branch}</td>
                        <td><span class="status-badge status-${run.conclusion}">${run.conclusion || 'pending'}</span></td>
                        <td>${Math.floor((new Date(run.updated_at) - new Date(run.created_at)) / 60000)} min</td>
                        <td><a href="${run.html_url}">View Run</a></td>
                      </tr>
                    `).join('') || '<tr><td colspan="5">No recent Trivy scans found</td></tr>'}
                  </tbody>
                </table>
              </div>
              
              <div class="card">
                <h2>üîç Recent CodeQL Analyses</h2>
                <table>
                  <thead>
                    <tr>
                      <th>Date</th>
                      <th>Branch</th>
                      <th>Status</th>
                      <th>Duration</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody id="codeql-runs">
                    ${codeqlRuns.map(run => `
                      <tr>
                        <td>${new Date(run.created_at).toLocaleString()}</td>
                        <td>${run.head_branch}</td>
                        <td><span class="status-badge status-${run.conclusion}">${run.conclusion || 'pending'}</span></td>
                        <td>${Math.floor((new Date(run.updated_at) - new Date(run.created_at)) / 60000)} min</td>
                        <td><a href="${run.html_url}">View Run</a></td>
                      </tr>
                    `).join('') || '<tr><td colspan="5">No recent CodeQL scans found</td></tr>'}
                  </tbody>
                </table>
              </div>
              
              <div class="card">
                <h2>üìà Security Trends</h2>
                <p>Security scanning trends over the past 7 days:</p>
                <ul>
                  <li>Total scans performed: <strong>${trivyRuns.length + codeqlRuns.length}</strong></li>
                  <li>Average scan time: <strong>${
                    Math.floor(
                      [...trivyRuns, ...codeqlRuns]
                        .map(run => (new Date(run.updated_at) - new Date(run.created_at)) / 60000)
                        .reduce((a, b) => a + b, 0) / (trivyRuns.length + codeqlRuns.length || 1)
                    )
                  } minutes</strong></li>
                  <li>Success rate: <strong>${
                    Math.floor(
                      [...trivyRuns, ...codeqlRuns]
                        .filter(run => run.conclusion === 'success').length / 
                      (trivyRuns.length + codeqlRuns.length || 1) * 100
                    )
                  }%</strong></li>
                </ul>
              </div>
              
              <div class="card">
                <h2>üéØ Recommendations</h2>
                <ul>
                  <li>Enable branch protection rules to require security scans before merging</li>
                  <li>Review security scan artifacts regularly</li>
                  <li>Consider upgrading to GitHub Advanced Security for enhanced features</li>
                  <li>Keep dependencies updated to minimize vulnerability exposure</li>
                </ul>
              </div>
              
              <script>
                // Update metrics
                document.getElementById('total-scans').textContent = '${trivyRuns.length + codeqlRuns.length}';
                document.getElementById('trivy-status').textContent = '${trivyRuns[0]?.conclusion || 'No runs'}';
                document.getElementById('codeql-status').textContent = '${codeqlRuns[0]?.conclusion || 'No runs'}';
                
                // Calculate hours since last scan
                const lastScan = [...trivyRuns, ...codeqlRuns]
                  .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))[0];
                if (lastScan) {
                  const hoursSince = Math.floor((new Date() - new Date(lastScan.created_at)) / 3600000);
                  document.getElementById('last-scan').textContent = hoursSince;
                } else {
                  document.getElementById('last-scan').textContent = 'N/A';
                }
              </script>
            </body>
            </html>`;
            
            // Save dashboard as artifact
            const fs = require('fs');
            fs.mkdirSync('security-dashboard', { recursive: true });
            fs.writeFileSync('security-dashboard/index.html', dashboard);
            
            // Create markdown summary for job summary
            let summary = `# üîê Security Dashboard Summary\n\n`;
            summary += `**Generated:** ${new Date().toUTCString()}\n\n`;
            summary += `## üìä Quick Stats\n\n`;
            summary += `- **Total Security Scans (24h):** ${trivyRuns.length + codeqlRuns.length}\n`;
            summary += `- **Latest Trivy Scan:** ${trivyRuns[0]?.conclusion || 'No recent scans'}\n`;
            summary += `- **Latest CodeQL Scan:** ${codeqlRuns[0]?.conclusion || 'No recent scans'}\n\n`;
            
            // Add scan history
            summary += `## üîÑ Recent Scan Activity\n\n`;
            summary += `### Trivy Scans\n`;
            trivyRuns.slice(0, 3).forEach(run => {
              summary += `- ${new Date(run.created_at).toLocaleString()} - ${run.head_branch} - ${run.conclusion}\n`;
            });
            
            summary += `\n### CodeQL Analyses\n`;
            codeqlRuns.slice(0, 3).forEach(run => {
              summary += `- ${new Date(run.created_at).toLocaleString()} - ${run.head_branch} - ${run.conclusion}\n`;
            });
            
            // Add recommendations based on scan results
            summary += `\n## üéØ Automated Recommendations\n\n`;
            
            const recentScans = [...trivyRuns, ...codeqlRuns]
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            
            if (recentScans.length === 0) {
              summary += `- ‚ö†Ô∏è No security scans found. Check workflow configurations.\n`;
            } else {
              const lastScanTime = new Date(recentScans[0].created_at);
              const hoursSince = Math.floor((new Date() - lastScanTime) / 3600000);
              
              if (hoursSince > 24) {
                summary += `- ‚ö†Ô∏è No scans in ${hoursSince} hours. Security scans might not be running properly.\n`;
              }
              
              const failures = recentScans.filter(run => run.conclusion === 'failure').length;
              if (failures > recentScans.length / 2) {
                summary += `- üî¥ High failure rate (${Math.floor(failures / recentScans.length * 100)}%). Review scan configurations.\n`;
              }
              
              if (!trivyRuns.length) {
                summary += `- üì¶ No recent Trivy scans. Dependency vulnerabilities might go undetected.\n`;
              }
              
              if (!codeqlRuns.length) {
                summary += `- üîç No recent CodeQL scans. Code vulnerabilities might go undetected.\n`;
              }
            }
            
            // Save summary
            await core.summary.addRaw(summary).write();
            
            console.log('‚úÖ Security dashboard generated successfully!');
            
          } catch (error) {
            console.error('‚ùå Error generating dashboard:', error);
            core.setFailed(error.message);
          }

    # Step 5: Upload dashboard artifact
    - name: Upload Security Dashboard
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-dashboard-${{ github.run_number }}
        path: security-dashboard/
        retention-days: 30

    # Step 6: Create/Update dashboard issue (optional)
    - name: Update Dashboard Issue
      uses: actions/github-script@v7
      with:
        script: |
          // Find existing dashboard issue
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'security-dashboard',
            state: 'open'
          });
          
          const dashboardIssue = issues.find(issue => 
            issue.title.includes('Security Dashboard')
          );
          
          // Create issue body with link to latest dashboard
          const issueBody = `## üîê Security Dashboard
          
          The latest security dashboard has been generated!
          
          ### üìä View Dashboard
          - [Latest Dashboard Artifact](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
          - Download the \`security-dashboard-${context.runNumber}\` artifact to view the full HTML dashboard
          
          ### üîÑ Recent Activity
          Check the [workflow summary](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for quick stats.
          
          ### üìÖ Next Update
          This dashboard updates:
          - Daily at 6 AM UTC
          - After each security scan completion
          - On manual trigger
          
          ---
          *Last updated: ${new Date().toUTCString()}*
          *Workflow run: #${context.runNumber}*`;
          
          if (dashboardIssue) {
            // Update existing issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: dashboardIssue.number,
              body: issueBody
            });
            console.log(`Updated dashboard issue #${dashboardIssue.number}`);
          } else {
            // Create new issue
            const newIssue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üîê Security Dashboard - Pro+ Edition',
              body: issueBody,
              labels: ['security-dashboard', 'automated']
            });
            console.log(`Created dashboard issue #${newIssue.data.number}`);
          }