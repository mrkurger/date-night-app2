name: Sync Test Reports

on:
  workflow_run:
    workflows: 
      - 'Angular Tests'
      - 'Server Tests'
    types:
      - completed
    branches:
      - main
      - develop
      - 'feature/*'
      - 'bugfix/*'
      - 'hotfix/*'
      - 'release/*'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write    # For committing test reports
  actions: read      # For reading workflow artifacts
  checks: write      # For updating check runs with test results
  pull-requests: write # For commenting test results on PRs

jobs:
  sync-reports:
    runs-on: ubuntu-latest
    env:
      CI: true

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Angular Test Artifacts
        uses: dawidd6/action-download-artifact@v9
        with:
          workflow: angular-tests.yml
          workflow_conclusion: completed
          name: test-results
          path: downloaded-reports/angular
          if_no_artifact_found: warn
          github_token: ${{ secrets.WORKFLOW_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Download Server Test Artifacts
        uses: dawidd6/action-download-artifact@v9
        with:
          workflow: server-tests.yml
          workflow_conclusion: completed
          name: server-test-results
          path: downloaded-reports/server
          if_no_artifact_found: warn
          github_token: ${{ secrets.WORKFLOW_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js and Install Dependencies
        uses: ./.github/actions/setup-nodejs
        with:
          node-version: '22'

      - name: Process Reports
        run: |
          # Create directories
          mkdir -p downloaded-reports/testing

          # Create combined report if both exist
          if [ -f "downloaded-reports/angular/angular-test-results.md" ] && [ -f "downloaded-reports/server/server-test-results.md" ]; then
            node scripts/combine-test-reports.js
          fi

          # Create placeholder if no reports exist
          if [ ! -f "downloaded-reports/testing/coverage-summary.md" ]; then
            echo "# Latest Test Results\n\nNo test results available yet." > downloaded-reports/testing/coverage-summary.md
          fi

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Fetch latest changes
        run: |
          # Fetch the latest changes from the remote repository
          git fetch origin main

      - name: Check for conflicts
        id: check_conflicts
        run: |
          # Check if there are any conflicts between local and remote
          if git merge-tree $(git merge-base HEAD origin/main) HEAD origin/main | grep -e "^<<<<<<< ";
          then
            echo "has_conflicts=true" >> $GITHUB_OUTPUT
          else
            echo "has_conflicts=false" >> $GITHUB_OUTPUT
          fi

      - name: Handle non-conflicting changes
        if: steps.check_conflicts.outputs.has_conflicts == 'false'
        run: |
          # Pull the latest changes with rebase strategy
          git pull --rebase origin main

          git add downloaded-reports/testing/coverage-summary.md || true
          git commit -m "docs: update test reports [skip ci]" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle conflicting changes
        if: steps.check_conflicts.outputs.has_conflicts == 'true'
        run: |
          # Create a new branch for our changes
          BRANCH_NAME="test-reports-update-$(date +%Y%m%d%H%M%S)"
          git checkout -b $BRANCH_NAME

          git add downloaded-reports/testing/coverage-summary.md || true
          git commit -m "docs: update test reports [skip ci]" || echo "No changes to commit"

          # Only push if there were changes to commit
          if [ $? -eq 0 ]; then
            git push --set-upstream origin $BRANCH_NAME
            
            # Create a pull request
            gh pr create --title "Update test reports" \
                         --body "This PR contains updated test reports that had conflicts with the main branch." \
                         --base main \
                         --head $BRANCH_NAME
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
