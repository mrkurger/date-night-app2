# Workflow name: Appears in the Actions tab of the GitHub repository.
name: Server Tests

# Triggers for the workflow.
on:
  # Trigger on push events to the 'main', 'develop', or 'Nebular-UI-Refactor' branches.
  push:
    branches: [main, develop, Nebular-UI-Refactor]
    # Only run if files in 'server/**' or the workflow file itself change.
    paths:
      - 'server/**'
      - '.github/workflows/server-tests.yml'
  # Trigger on pull request events targeting the 'main' or 'develop' branches.
  pull_request:
    branches: [main, develop]
    paths:
      - 'server/**'
  # Allow manual triggering
  workflow_dispatch:

# Set job-level permissions (least privilege).
permissions:
  contents: read
  checks: write         # For reporting test results
  pull-requests: write  # For updating PRs with test results
  issues: write         # For creating issues on test failures

# Add concurrency settings to cancel in-progress runs from the same workflow/branch.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 'test' job: Runs server-side tests.
  test:
    # Specifies the runner environment. 'ubuntu-latest' uses the latest stable Ubuntu image.
    runs-on: ubuntu-latest
    # Sets a maximum execution time for the job.
    timeout-minutes: 15

    # Defines services, like databases, to be run as part of the job.
    services:
      # MongoDB service for integration tests.
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017 # MongoDB default port

    steps:
      # Step 1: Check out the repository code.
      - uses: actions/checkout@v4

      # Step 2: Cache Node.js dependencies to speed up workflow runs.
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('server/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 3: Setup Node.js and install dependencies using a custom local action.
      - name: Setup Node.js and Install Dependencies
        uses: ./.github/actions/setup-nodejs
        with:
          node-version: '22.x' # You may add more versions to your setup-nodejs action if supported.
        working-directory: server

      # Step 4: Wait for MongoDB to be ready before running tests.
      - name: Wait for MongoDB
        run: |
          for i in {1..10}; do
            if nc -z localhost 27017; then
              echo "MongoDB is up!"
              exit 0
            fi
            echo "Waiting for MongoDB to start..."
            sleep 5
          done
          echo "MongoDB failed to start."
          exit 1

      # Step 5: Run the tests.
      - name: Run tests
        run: npm test
        working-directory: server
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/test

      # Step 6: Run NPM Audit to check for security vulnerabilities.
      - name: Run NPM Audit
        run: npm audit --audit-level=high
        working-directory: server

      # Step 7: (Optional) Create a GitHub Issue if the workflow fails.
      # Uncomment and configure the following step if you want automated issue creation on failure.
      # - name: Create Issue on Failure
      #   if: failure()
      #   uses: peter-evans/create-issue-from-file@v4
      #   with:
      #     title: "Workflow Failure - ${{ github.workflow }}"
      #     content-filepath: failure.log
      #     labels: bug

  # 'lint' job: Runs linting and type checking on the server-side code.
  lint:
    runs-on: ubuntu-latest
    env:
      CI: true # Standard CI environment variable.
    timeout-minutes: 10

    # Strategy matrix allows testing against multiple Node.js versions.
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      # Step 1: Check out the repository code.
      - uses: actions/checkout@v4

      # Step 2: Cache Node.js dependencies.
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('server/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 3: Setup Node.js and install dependencies.
      - name: Setup Node.js and Install Dependencies
        uses: ./.github/actions/setup-nodejs
        with:
          node-version: ${{ matrix.node-version }}
        working-directory: ./server

      # Step 4: Run ESLint for linting checks.
      - name: Run ESLint
        run: npx eslint .
        working-directory: ./server

      # Step 5: Run TypeScript compiler for type checking.
      - name: Run TypeScript Compiler Check
        run: npx tsc --noEmit
        working-directory: ./server

# END OF WORKFLOW
